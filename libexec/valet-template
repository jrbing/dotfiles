#!/usr/bin/env ruby
# Usage: valet template <type>
# Summary: Create script from template
# Help: Creates script files based on predefined templates

require 'fileutils'
require 'thor'
require 'thor/actions'
require_relative '../share/valet/util'

TEMPLATE_DIRECTORY = File.expand_path('~/.dotfiles/share/valet/templates')

class Template < Thor

  include Thor::Actions
  include Valet

  self.source_root(TEMPLATE_DIRECTORY)

  # sqlplus script
  desc "sqlplus [NAME]", "Creates a basic sqlplus script file from template"
  def sqlplus(script_name=nil)
    @script_name = get_script_name(script_name)
    create_from_template("sqlplus_script.erb", "#{@script_name}.sql")
  end

  # bash script
  desc "bash [NAME]", "Creates a basic bash script from template"
  def bash(script_name=nil)
    @script_name = get_script_name(script_name)
    chmod(create_from_template("bash_script.erb", "#{@script_name}.sh"), 0755)
  end

  # envrc
  desc "envrc", "Creates a basic .envrc file in the current directory"
  def envrc
    create_from_template("envrc.erb", ".envrc")
  end

  # watchman
  #desc "watchman", "Creates a basic Thorfile for use with ruby-watchman"
  #def watchman
    #watch_file = File.join(Dir.pwd, "Thorfile")
    #say_status("info", "Creating #{watch_file}")
    #template("../share/valet/templates/watchman.erb", watch_file)
    #file = File.open(watch_file, 'r')
    #file.chmod(0700)
    #file.close
  #end

  # thorfile
  desc "thorfile [NAME]", "Creates a basic thor-based script file"
  def thorfile(script_name=nil)
    chmod(create_from_template("thor_script.erb", "Thorfile"), 0755)
  end

  # windows batch script
  desc "batch [NAME]", "Creates a basic dos batch script file"
  def batch (script_name=nil)
    @script_name = get_script_name(script_name)
    create_from_template("batch_script.erb", "#{@script_name}.bat")
  end

  # datafix
  desc "datafix [NAME]", "Creates datafix files and directories"
  def datafix(datafix_name=nil)
    @datafix_name = get_datafix_name(datafix_name)
    records = ask("Records to be affected: ").upcase.split(' ').uniq
    @date = Time.now.localtime.strftime("%m/%d/%Y")

    # Create the datafix directory
    @datafix_base_directory = create_datafix_directory(@datafix_name)
    create_from_template("datafix_script.erb", "#{@datafix_name}.sql")

    # Create the datamover export files for all records
    records.each do |record|
      @record = record
      create_from_template("datamover_backup.erb", "#{@record}.sql")
    end
    run "unix2dos #{@datafix_base_directory}/*"
  end

  # golang project
  desc "golang [NAME]", "Creates golang project files and directories"
  def golang(project_name=nil)

    @project_name = get_project_name(project_name)
    @project_base_directory = create_project_directory(@project_name)

    create_from_template("goenvrc.erb", ".envrc")
    create_project_subdirectory('_vendor/bin')
    create_project_subdirectory('_vendor/pkg')
    create_project_subdirectory('_vendor/src')

  end

  # shellfire project
  desc "shellfire [NAME]", "Creates shellfire project files and directories"
  def shellfire(project_name=nil)

    @project_name = get_project_name(project_name)
    @project_base_directory = create_project_directory(@project_name)
    initialize_git_repo(@project_base_directory)

    etc_path = create_project_subdirectory('etc/shellfire')
    lib_path = create_project_subdirectory('lib/shellfire')
    tools_path = create_project_subdirectory('tools')

    add_submodule("https://github.com/shellfire-dev/paths.d", etc_path)
    add_submodule("https://github.com/shellfire-dev/core", lib_path)
    add_submodule("https://github.com/shellfire-dev/jsonreader", lib_path)
    add_submodule("https://github.com/shellfire-dev/unicode", lib_path)
    add_submodule("https://github.com/shellfire-dev/xmlwriter", lib_path)
    add_submodule("https://github.com/shellfire-dev/build", lib_path)
    add_submodule("https://github.com/shellfire-dev/fatten", tools_path)
    add_submodule("https://github.com/raphaelcohn/swaddle", tools_path)
    create_project_subdirectory("lib/shellfire/#{@project_name}")

    update_submodules(@project_base_directory)

    project_file = create_from_template("shellfire.erb", project_name)
    chmod(project_file, 0755)

    create_from_template("shellfire_functions.erb", "lib/shellfire/#{@project_name}/#{project_name}.functions")

    create_from_template("shellfire_build.erb", "build.shellfire")

    inside(@project_base_directory) do
      run('ln -s lib/shellfire/build/build')
    end

  end

end

Template.start(ARGV)

