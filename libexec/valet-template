#!/usr/bin/env ruby
# Usage: valet template <type>
# Summary: Create script from template
# Help: Creates script files based on predefined templates

require 'fileutils'
require 'thor'
require 'thor/actions'

class Template < Thor

  include Thor::Actions

  def self.source_root
    File.dirname(__FILE__)
  end

  #
  # SQLPlus Script
  #
  desc "sqlplus [NAME]", "Creates a basic sqlplus script file from template"
  def sqlplus(script_name=nil)

    # Get the name for the script
    if script_name
      @script_name = script_name
    else
      @script_name = ask("Name for sqlplus script to be created: ")
    end

    # Create the sql script
    script_file = File.join(Dir.pwd, "#{@script_name}.sql")
    say_status("INFO", "Creating sqlplus script #{script_file}")
    template("../share/valet/templates/sqlplus_script.erb", script_file)

  end

  #
  # Bash Script
  #
  desc "bash [NAME]", "Creates a basic bash script from template"
  def bash(script_name=nil)

    # Get the name for the script
    if script_name
      @script_name = script_name
    else
      @script_name = ask("Name for bash script to be created: ")
    end

    # Create the bash script
    script_file = File.join(Dir.pwd, "#{@script_name}.sh")
    say_status("INFO", "Creating bash script #{script_file}")
    template("../share/valet/templates/bash_script.erb", script_file)
    file = File.open(script_file, 'r')
    file.chmod(0700)
    file.close

  end

  #
  # envrc
  #
  desc "envrc", "Creates a basic .envrc file in the current directory"
  def envrc

    # Create the envrc file
    env_file = File.join(Dir.pwd, ".envrc")
    say_status("INFO", "Creating .envrc file")
    template("../share/valet/templates/envrc.erb", env_file)
    file = File.open(env_file, 'r')
    file.chmod(0700)
    file.close

  end

  #
  # Thor Script
  #
  desc "thorfile [NAME]", "Creates a basic thor script file"
  def thorfile(script_name=nil)

    # Get the name for the script
    if script_name
      @script_name = script_name
    else
      @script_name = ask("Name for thor script to be created: ")
    end

    # Create the thor script
    script_file = File.join(Dir.pwd, "#{@script_name}.rb")
    say_status("INFO", "Creating thor script #{script_file}")
    template("../share/valet/templates/thor_script.erb", script_file)
    file = File.open(script_file, 'r')
    file.chmod(0700)
    file.close

  end

  #
  # Batch Script
  #
  desc "batch [NAME]", "Creates a basic dos batch script file"
  def batch (script_name=nil)

    # Get the name for the script
    if script_name
      @script_name = script_name
    else
      @script_name = ask("Name for batch script to be created: ")
    end

    # Create the thor script
    script_file = File.join(Dir.pwd, "#{@script_name}.bat")
    say_status("INFO", "Creating batch script #{script_file}")
    template("../share/valet/templates/batch_script.erb", script_file)
    file = File.open(script_file, 'r')
    file.chmod(0700)
    file.close

  end

  #
  # Datafix
  #
  desc "datafix [NAME]", "Creates datafix files and folders"
  def datafix(datafix_name=nil)

    # Get the name for the datafix unless one is specified
    if datafix_name
      @datafix_name = datafix_name
    else
      @datafix_name = ask("Name for datafix folder: ")
    end

    @date = Time.now.localtime.strftime("%m/%d/%Y")

    # Get list of records to be affected
    records = ask("Records to be affected: ").upcase.split(' ').uniq

    # Create the datafix folder
    datafix_folder = File.join(Dir.pwd, @datafix_name)
    Dir.mkdir(datafix_folder) unless File.exists?(datafix_folder)

    # Create the sql script
    script_file = File.join(datafix_folder, "#{@datafix_name}.sql")
    say_status("INFO", "Creating sqlplus script #{script_file}")
    template("../share/valet/templates/datafix_script.erb", script_file)

    # Create the datamover export files for all records
    records.each do |record|
      @record = record
      backup_file = File.join(datafix_folder, "#{record}_backup.dms")
      say_status("INFO", "Creating datamover backup script #{backup_file}")
      template("../share/valet/templates/datamover_backup.erb", backup_file)
    end
    run "unix2dos #{datafix_folder}/*"

  end

end

Template.start(ARGV)

