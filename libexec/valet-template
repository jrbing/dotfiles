#!/usr/bin/env ruby
# Usage: valet template <type>
# Summary: Create script from template
# Help: Creates script files based on predefined templates

require 'fileutils'
require 'thor'
require 'thor/actions'
require_relative '../share/valet/util'

TEMPLATE_DIRECTORY = File.expand_path('~/.dotfiles/share/valet/templates')

class Template < Thor

  include Thor::Actions
  include Valet

  self.source_root(TEMPLATE_DIRECTORY)

  # sqlplus script
  desc "sqlplus [NAME]", "Creates a basic sqlplus script file from template"
  def sqlplus(script_name=nil)
    @script_name = get_script_name(script_name)
    create_from_template("sqlplus_script.erb", "#{@script_name}.sql")
  end

  # bash script
  desc "bash [NAME]", "Creates a basic bash script from template"
  def bash(script_name=nil)
    @script_name = get_script_name(script_name)
    chmod(create_from_template("bash_script.erb", "#{@script_name}.sh"), 0755)
  end

  # envrc
  desc "envrc", "Creates a basic .envrc file in the current directory"
  def envrc
    create_from_template("envrc.erb", ".envrc")
  end

  # thorfile
  desc "thorfile [NAME]", "Creates a basic thor-based script file"
  def thorfile(script_name=nil)
    chmod(create_from_template("thor_script.erb", "Thorfile"), 0755)
  end

  # windows batch script
  desc "batch [NAME]", "Creates a basic dos batch script file"
  def batch (script_name=nil)
    @script_name = get_script_name(script_name)
    create_from_template("batch_script.erb", "#{@script_name}.bat")
    run "unix2dos #{@script_name}.bat"
  end

  # datafix
  desc "datafix [NAME]", "Creates datafix files and directories"
  def datafix(datafix_name=nil)
    @datafix_name = get_datafix_name(datafix_name)
    records = ask("Records to be affected: ").upcase.split(' ').uniq
    @date = Time.now.localtime.strftime("%m/%d/%Y")

    # Create the datafix directory
    @datafix_base_directory = create_datafix_directory(@datafix_name)
    create_from_template("datafix_script.erb", "#{@datafix_name}.sql")

    # Create the datamover export files for all records
    records.each do |record|
      @record = record
      create_from_template("datamover_backup.erb", "#{@record}.sql")
    end
    run "unix2dos #{@datafix_base_directory}/*"
  end

  # golang project
  desc "golang [NAME]", "Creates golang project files and directories"
  def golang(project_name=nil)
    @project_name = get_project_name(project_name)
    @project_base_directory = create_project_directory(@project_name)

    create_from_template("goenvrc.erb", ".envrc")
    create_project_subdirectory('_vendor/bin')
    create_project_subdirectory('_vendor/pkg')
    create_project_subdirectory('_vendor/src')
    inside(@project_base_directory) do
      run("direnv allow")
      run("glide init")
    end
  end

  # windows powershell script
  desc "powershell [NAME]", "Creates a basic powershell script file"
  def powershell (script_name=nil)
    @script_name = get_script_name(script_name)
    create_from_template("powershell.erb", "#{@script_name}.ps1")
    run "unix2dos #{@script_name}.ps1"
  end

  # casperjs script
  desc "casper [NAME]", "Creates a basic casperjs script file"
  def casper (script_name=nil)
    @script_name = get_script_name(script_name)
    create_from_template("casper.erb", "#{@script_name}.js")
  end

end

Template.start(ARGV)

