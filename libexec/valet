#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Sub: a script organization tool.
"""
# Imports {{{
import sys
import os
import glob
import logging
import subprocess
import cStringIO
import re
from textwrap import dedent as dd

# }}}
# Globals {{{
SUBNAME = os.path.basename(__file__)
SUB_ROOT = None
LIBEXEC_PATH = None
internal_commands = {}
DOC_FILE = 'doc.txt'
DIR_PREFIX = u'â†¬ '

# }}}
# Configure logging {{{
# -----------------------------------------------------------------------------
# Enable logging by setting the SUBDEBUG environment variable to any value
# -----------------------------------------------------------------------------
DEBUGGING = False

if 'SUBDEBUG' in os.environ:
    logging.basicConfig(filename='sub.log', level=logging.DEBUG)
    DEBUGGING = True
    DEBUG_PREFIX = SUBNAME.upper()
    TRACE_DEPTH = 0
# -----------------------------------------------------------------------------

# }}}
# Decorators {{{

def decorator(dec):
    """
    A decorator-decorator. Keeps all decorator boilerplate together so that it
    does not have to be repeated in every decorator.

    It propagates the attributes of the original function to the decorated
    version.
    """
    def wrapped_decorator(f):
        g = dec(f)
        g.__name__ = f.__name__
        g.__doc__ = f.__doc__
        g.__dict__.update(f.__dict__)
        return g
    wrapped_decorator.__name__ = dec.__name__
    wrapped_decorator.__doc__ = dec.__doc__
    wrapped_decorator.__dict__.update(dec.__dict__)
    return wrapped_decorator

@decorator
def debugonly(f):
    """
    A decorator to turn any function into a noop when not in debugging mode.
    """
    if DEBUGGING:
        return f
    else:
        def noop(*args, **kwargs):
            pass
        return noop

@decorator
def traced(f):
    """
    A decorator to log a trace of the call to the decorated function, only in
    debugging mode.
    """
    if not DEBUGGING:
        return f

    def wrapped(*args, **kwargs):
        global TRACE_DEPTH
        if f.__name__ == 'main':
            logging.debug(" --------------------------------------------------------------------")
            logging.debug(" Running %s %s", SUBNAME, " ".join(args[0][1:]))
            logging.debug(" --------------------------------------------------------------------")
        logging.debug("%12s:TRACE: %sEntering %s with args: %s, %s",
                      DEBUG_PREFIX, ("| " * TRACE_DEPTH), f.__name__, args, kwargs)
        TRACE_DEPTH += 1

        ret = f(*args, **kwargs)

        TRACE_DEPTH -= 1
        logging.debug("%12s:TRACE: %sReturning from %s with value: %s",
            DEBUG_PREFIX, ("| " * TRACE_DEPTH), f.__name__, ret)
        return ret

    return wrapped

@decorator
def internal_command(f):
    """
    A decorator for commands implemented internally.

    It registers the decorated function as an internal command.

    It sets the logging prefix in debugging mode so that all log entries
    indicate the command that is being run.
    """
    if not f.__name__.startswith('sub_'):
        return f

    command_name = f.__name__[4:]
    internal_commands[command_name] = f.__name__
    if not DEBUGGING:

        return f
    command_name = f.__name__[4:]
    def wrapped(*args, **kwargs):
        global DEBUG_PREFIX
        old_debug_prefix = DEBUG_PREFIX
        DEBUG('Handling "%s" subcommand internally' % command_name)
        DEBUG_PREFIX = command_name.upper()
        r = f(*args, **kwargs)
        DEBUG_PREFIX = old_debug_prefix
        return r
    return wrapped


@decorator
def provide_completions(f):
    """
    A decorator that declares that a internal command provides completions
    """
    f.provides_completions = True
    return f


# }}}
# Utility functions {{{

@debugonly
def DEBUG(msg, *args, **kwargs):
    """
    Send debug messages to the log. Enabled only on debug mode.
    """
    logging.debug("%12s: %s" % (DEBUG_PREFIX, msg), *args, **kwargs)

# -----------------------------------------------------------------------------

@traced
def path_prepend(directory):
    """
    Add a given directory to the beginning of the PATH environment variable.
    """
    os.environ['PATH'] = u"%s:%s" % (directory, os.environ['PATH'] )


@traced
def mkcmd(command, sh_flag = False):
    """
    Return a string with the name of a command in this sub.
    """
    return u"%s%s-%s" % (SUBNAME, ('-sh' if sh_flag else ''), command)


@traced
def die(error):
    """
    Show message on stderr and exit
    """
    sys.stderr.write(error)
    sys.stderr.write("\n")
    sys.stderr.flush()
    sys.exit(1)

@traced
def find_command_path(argv, start_dir = None):
    """
    Given a command line with tokens representing both the subcommand structure
    and eventually the arguments for a command, figure out the path to the
    command and extract the items from the command line that are to be passed
    as parameters of that command.

    Returns a tuple with the following:
        * The full path to the command, which can be either a file or a
          directory. This will be None if the command cannot be found.
        * A list of the tokens that lead up to the command, not including the
          arguments for such. This is always set.
        * The arguments to be passed to the command. this will be None if the
          command cannot be found.
    """
    running_path = LIBEXEC_PATH if start_dir is None else start_dir
    shift = 0
    command = []
    is_sh = False
    for (shift, token) in enumerate(argv):

        # If we still have not resolved the script name and we are already
        # seeing flags in the command line. This means user passing flags to a
        # container, which is not supported, so just jump out and show help for
        # the container that has been built so far.
        if token[0] == '-':
            break
        command.append(token)
        possible_path = os.path.join(running_path, mkcmd(token))

        # If the current token is part of the path but no the script, just add
        # to running path and keep looking.
        if os.path.isdir(possible_path):
            running_path = possible_path
            continue

        # But if the current token is the script, set the path and return.
        if os.access(possible_path, os.X_OK):
            running_path = possible_path
            break

        # Perhaps it's an "sh-type" script
        possible_path_sh = os.path.join(running_path, mkcmd(token, sh_flag=True))
        if os.access(possible_path_sh, os.X_OK):
            running_path = possible_path_sh
            is_sh = True
            break

        # Otherwise, we have a token that is not a directory and appears before
        # the script is found. This is an error. Make sure we still return the
        # command, so it can be shown in the error.
        return (None, command, None, None)

    return (running_path, command, argv[shift+1:], is_sh)

@traced
def get_internal_command(name):
    """
    Query the internal command registry with a given command name and return
    the implementing function if the command is found
    """
    func_name = internal_commands.get(name, None)
    return globals().get(func_name, None)


class Matcher(object):
    """
    A more convenient way to check regex matches. It holds the latest match
    result for further checks.

    The current regex match mechanism does not allow for checking matches in
    if/elif chains. Thanks to Matcher now one can do this:

        >>> m = Matcher()
        >>> s = "ba"
        >>> if m.match(re.compile(r'^a(.)'), s):
        >>>     print "A" + m.group(0)
        >>> elif m.match(re.compile(r'^b(.)', s):
        >>>     print "B" + m.group(0)
        Ba

    """
    def __init__(self):
        self.clear()
    def match(self, regex, string):
        self.m = regex.match(string)
        if self.m is None:
            return False
        return True
    def group(self, n):
        if self.m is None:
            return None
        return self.m.group(n)
    def clear(self):
        self.m = None

# }}}
# Internal command: HELP {{{

@traced
def print_container_help(container, command = None):
    """
    Print the usage, help text and sub command summaries of a given sub command
    container.
    """
    docfile = os.path.join(container, DOC_FILE)
    helptext = None
    if os.path.isfile(docfile):
        with open(docfile) as fin:
            helptext = get_usage_and_help(fin)[1]

    command = '' if not command else (" ".join(command) + " ")
    print "Usage: %s %s<command> [<args>]" % (SUBNAME, command)
    print
    if helptext is not None:
        print helptext.rstrip()
        print
    summaries = get_container_summaries(container)
    if summaries is not None:
        msg = dd("""\
            Some useful %(subname)s %(command)scommands are:
            %%(summaries)s

            See '%(subname)s help %(command)s<command>' for information on a specific command.""" %(
            dict(subname = SUBNAME, command = command)))

        print msg % dict(summaries=summaries)


@traced
def get_container_summaries(container):
    """
    Return the summaries for all sub commands within a given container
    """
    summaries = []
    for command in get_container_commands(container):
        command_path = find_command_path([command], container)[0]
        if command_path is None or os.path.islink(command_path):
            continue
        if os.path.isdir(command_path):
            command_path = os.path.join(command_path, DOC_FILE)
            command = u"%s %s" % (DIR_PREFIX, command)
            DEBUG("command %s is a directory, adding docfile: %s", command, command_path)
        else:
            command = (u" " * (len(DIR_PREFIX) + 1)) + command
        if os.path.exists(command_path):
            DEBUG("Found docfile: %s, will get summary", command_path)
            summary = get_summary(command_path)
            DEBUG("Summary for %s: %s", command, summary)
            if summary is not None:
                summaries.append((command, summary))
    if summaries:
        columns = int(subprocess.check_output(['stty', 'size']).split()[-1])
        max_length = max([ len(s[0]) for s in summaries ])
        summary_length = columns - max_length - 6
        summary_format = "   %-" + str(max_length) + "s  %s"
        return "\n".join([ summary_format % (c, s[:summary_length]) for (c, s) in summaries ])
    return None

@traced
def get_summary(afile):
    """
    Parse the first 100 lines of a file looking for a special comment that
    contains a summary of what the script does. Return the summary if found,
    None otherwise.
    """
    summary = None
    max_lines_to_check = 100
    lines_checked = 0
    re_summary = re.compile(r'^\s*#\s*Summary:\s*(.*)$')
    matcher = Matcher()
    with file(afile) as fin:
        for line in fin:
            lines_checked += 1
            if lines_checked > max_lines_to_check:
                DEBUG("Exceeded the maximum of %d lines looking for summary",
                      max_lines_to_check)
                break
            if matcher.match(re_summary, line):
                summary = matcher.group(1)
                break
    return summary

@traced
def get_usage_and_help(afile):
    """
    Get usage and helptext from the contents of a file-like object
    """
    usage, helptext = None, None
    in_help = False
    max_lines_to_check = 100
    lines_checked = 0
    leading_spaces = 0
    re_usage = re.compile(r'^\s*#\s*Usage:\s*(.*)$')
    re_help = re.compile(r'^\s*#(\s*)Help:\s*(.*)$')
    re_help_cont_pat = r'^\s*#(\s{0,%d})(.*)$'
    re_help_cont = None

    matcher = Matcher()
    for line in afile:
        lines_checked += 1
        if lines_checked > max_lines_to_check and not in_help:
            DEBUG("Exceeded the maximum of %d lines looking for help comments",
                  max_lines_to_check)
            break
        if usage is None and matcher.match(re_usage, line):
            usage = "Usage: %s" % matcher.group(1)
            if helptext is not None:
                break
            continue
            in_help = False
        elif in_help:
            if matcher.match(re_help_cont, line):
                help_line = matcher.group(2)
                # Support a number of blank lines at the beginning
                if helptext or help_line != "":
                    helptext.append(help_line)
            else:
                in_help = False
        elif helptext is None and matcher.match(re_help, line):
            in_help = True
            helptext = []
            # Se the number of leading spaces to consume based on how many
            # spaces are found between the comment symbol and the word Help
            leading_spaces = len(str(matcher.group(1)))
            re_help_cont = re.compile(re_help_cont_pat % leading_spaces)
            first_help_line = matcher.group(2)
            if first_help_line != "":
                helptext.append(first_help_line)

    if helptext is not None:
        helptext = "\n".join(helptext)
        if re.match(r'^\s*$', helptext) is not None:
            helptext = None


    return usage, helptext



@traced
def print_usage_help(usage, helptext, file_path, command = None):
    """
    Print out a formatted help message
    """
    if usage is not None:
        command.insert(0, SUBNAME)
        DEBUG("Usage comment found for %s: %s", file_path, usage)
        if command and "%COMMAND%" in usage:
            DEBUG("Injecting command name into usage string")
            usage = usage.replace("%COMMAND%", " ".join(command))
        print usage
        if helptext is not None:
            if command and "%COMMAND%" in helptext:
                DEBUG("Injecting command name into helptext string")
                helptext = helptext.replace("%COMMAND%", " ".join(command))

            DEBUG("Help comment found for %s: %s", file_path, helptext)
            print
            print "".join(helptext)
    else:
        DEBUG("Usage comment NOT found for %s", file_path)
        DEBUG("Not showing helptext: %s", helptext)
        print "This command isn't documented yet."


@traced
def print_file_help(file_path, command = None):
    """
    Print help for a file, based on special comments in the file
    """
    with file(file_path) as fin:
        usage, helptext = get_usage_and_help(fin)
    print_usage_help(usage, helptext, file_path, command)


@traced
def print_internal_help(command_name):
    """
    Print help for an internal command, based on the comments within the
    function's docstring
    """
    command_func = get_internal_command(command_name)
    docs = dd(command_func.__doc__)
    DEBUG("Printing help for internal command %s based on docstring: %s", command_name, docs)
    fin = cStringIO.StringIO(docs)
    usage, helptext = get_usage_and_help(fin)
    print_usage_help(usage, helptext, command_name, [command_name])


@traced
@internal_command
@provide_completions
def sub_help(args = None):
    """
    Run the help subcommand

    # Usage: %COMMAND% <command>
    # Help: Shows help for sub commands
    """
    if args is None:
        args = []
    if args and args[0] == '--complete':
        args = args[1:-1]
        DEBUG("Completing %s", args)
        return sub_commands(args)


    if args and get_internal_command(args[0]) is not None:
        DEBUG("Requested help for internal command %s", args[0])
        print_internal_help(args[0])
        return True

    # -------------------------------------------------------------------------
    # If the first argument is a directory, it means somebody ran
    #
    #    sub command1 command2
    #
    # where command2 contains more subcommands. In that case, show help from
    # the doc file if present and exit with error.
    # -------------------------------------------------------------------------
    if args and os.path.isdir(args[0]) and os.path.abspath(args[0]) == args[0]:
        print_container_help(args[0], args[1:])
        return False

    # -------------------------------------------------------------------------
    # resolve the path of the command based on its tokens. It no arguments were
    # used to call this script, the path will resolve to the one of libexec,
    # which will then print help for the top level commands.
    # -------------------------------------------------------------------------
    command_path, command = find_command_path(args)[:2]
    if command_path is not None:
        if os.path.isdir(command_path):
            print_container_help(command_path, args)
        else:
            print_file_help(command_path, command)
        return True
    else:
        die("%s: no such command `%s'" % (SUBNAME, " ".join(args)))


# }}}
# Internal command: COMMANDS {{{

@traced
def print_container_commands(container_path, sh_flag = None, only_containers = False):
    """
    Printing helper. Print all commands in a container
    """
    for command in get_container_commands(container_path, sh_flag, only_containers):
        print command

@traced
def get_container_commands(container_path, sh_flag = None, only_containers = False):
    """
    Print the commands available in a given path
    """
    glob_pattern = os.path.join(container_path, mkcmd('*'))
    commands = []
    if not sh_flag and container_path == LIBEXEC_PATH and not only_containers:
        commands = internal_commands.keys()
    for command in glob.iglob(glob_pattern):
        if only_containers and not os.path.isdir(command):
            continue
        DEBUG("command '%s' matched glob pattern '%s'", command, glob_pattern)
        # Leave only the command name without prefix
        command = command[len(glob_pattern)-1:]
        # If it is an 'sh-type' command, also remove the 'sh-' prefix
        is_sh = command.startswith('sh-')
        if is_sh:
            if sh_flag is None or sh_flag == True:
                commands.append(command[3:])
        else:
            if sh_flag is None or sh_flag == False:
                commands.append(command)
    # sort | uniq, python style
    DEBUG("These commands passed the filter: %s", commands)
    for cmd in sorted(set(commands)):
        yield cmd


@traced
@internal_command
@provide_completions
def sub_commands(args):
    """
    Run the commands subcommand
    """
    if args is None:
        args = []
    sh_flag = None
    only_containers = False
    if args:
        if args[0] == '--complete':
            args = args[1:-1]
            DEBUG("Completing %s", args)
            only_containers = True
        elif args[0] == '--sh':
            sh_flag = True
            args.pop(0)
        elif args[0] == '--no-sh':
            sh_flag = False
            args.pop(0)
    command = args
    # Find the path to the container
    container_path = os.path.join(LIBEXEC_PATH, *[ mkcmd(c) for c in command])

    if os.path.isdir(container_path):
        DEBUG("Container path %s exists", container_path)
        print_container_commands(container_path, sh_flag, only_containers)
        return True
    return False


# }}}
# Internal command: COMPLETIONS {{{

@traced
def provides_completions(command_path):
    """
    Check wether certain file declares to provide completion for the current
    sub.
    """
    compl_line = "# provide %s completions" % SUBNAME

    with file(command_path, 'r') as fin:
        for line in fin:
            if line.lower().startswith(compl_line):
                return True
    return False


@traced
@internal_command
def sub_completions(args = None):
    """
    Run the completions subcommand

    # Usage: %COMMAND% <command> [args]
    # Help: Internal command to generate completions for shells

    """
    if not args:
        die("usage: %s completions COMMAND [arg1 arg2...]" % SUBNAME)
    int_command = get_internal_command(args[0])
    if int_command is not None and getattr(int_command, 'provides_completions', False):
        DEBUG("Will complete by calling internal command %s with --complete", args[0])
        args.pop(0)
        return int_command(['--complete'] + args)

    # Pass all arguments but last
    (command_path, command, flags, _) = find_command_path(args[:-1])
    if command_path is None:
        DEBUG ("command %s not found" % (command[:-1]))
        return True
    elif os.path.isdir(command_path):
        DEBUG ("Will complete with commands in container: %s" % command_path)
        return sub_commands(command)
    elif provides_completions(command_path):
        DEBUG("Will complete by calling script %s --complete" % command_path)
        os.execvp(command_path, [command_path, '--complete'] + flags)
    else:
        DEBUG("%s does not provide completions" % command_path)


# }}}
# Internal command: INIT {{{
@traced
@internal_command
def sub_init(args = None):
    """
    Run the init subcommand

    # Usage: %COMMAND% [-] [<shell>]
    # Help: When run bare, provides instructions on how to initialise this sub in your shell.
    #
    # When run with a hyphen, it will output the code to be evalled by the shell in order to get the sub working.
    #
    # It will try to to guess the current shell, but one can be specified by name in the command line.
    """
    do_print = args and args[0] == '-'
    if do_print:
        args.pop(0)
        DEBUG("Called by shell")
    else:
        DEBUG("Called by user")

    # Figure out the shell
    if args:
        shell = args.pop(0)
    else:
        shell = os.path.basename(os.environ.get('SHELL', ''))

    # Profile files for supported shells
    profiles = dict(
        bash = '~/.bash_profile',
        zsh  = '~/.zshenv'
        )

    # Common arguments for all subsequent strings
    fmt_args = dict(
            sub      = SUBNAME,
            profile  = profiles.get(shell, 'your profile'),
            sub_root = SUB_ROOT,
            shell    = shell
            )

    DEBUG("Common arguments for strings: %s" % fmt_args)

    if not do_print:
        msg = dd("""\
            # Load %(sub)s automatically by adding
            # the following to %(profile)s:

            eval "$(%(sub_root)s/bin/%(sub)s init -)"

            """ % fmt_args )
        if shell not in profiles:
            msg += dd("""\
                # Warning: %(sub)s has no support for either 'sh' commands or
                # completions in your shell '%(shell)s'

                """ % fmt_args )
        # Print message to stderr and exit
        die(msg)

    # alternatively, if init is being called to get its out output evalled:

    # Add to PATH
    print 'export PATH="%s:%s/bin"' % (os.environ['PATH'], SUB_ROOT)

    if shell in profiles:
        print dd("""\
        source "%(sub_root)s/completions/%(sub)s.%(shell)s"
        _sub_%(sub)s_wrapper() {
            if [[ -z $1 ]]; then
                command %(sub)s
            elif command %(sub)s --is-sh "$@"; then
                eval "$(command %(sub)s "$@")"
            else
                command %(sub)s "$@"
            fi
            return $?
        }
        """ % fmt_args)
        if shell == 'bash':
            print "alias %(sub)s=_sub_%(sub)s_wrapper" % fmt_args
        elif shell == 'zsh':
            print "%(sub)s=_sub_%(sub)s_wrapper" % fmt_args


# }}}
# MAIN {{{
@traced
def main(argv=[__name__]):
    """ Run this program """
    args = argv[1:]
    global SUB_ROOT
    global LIBEXEC_PATH
    sh_check_mode = False
    try:
        # Add this sub's main directory to the environment
        SUB_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        LIBEXEC_PATH = os.path.join(SUB_ROOT, 'libexec')

        DEBUG("LIBEXEC_PATH = %s, SUB_ROOT = %s", LIBEXEC_PATH, SUB_ROOT)

        sub_root_env_name        = "_%s_ROOT"         % SUBNAME.upper()
        sub_leading_command_name = "_%s_COMMAND"      % SUBNAME.upper()
        sub_command_path_name    = "_%s_COMMAND_PATH" % SUBNAME.upper()
        sub_is_eval_name         = "_%s_IS_EVAL"      % SUBNAME.upper()
        os.environ[sub_root_env_name] = SUB_ROOT

        # And also add the libexec directory to the PATH
        path_prepend(LIBEXEC_PATH)

        # If user is just asking for help, give them help
        if len(args) < 1 or args[0] in ('-h', '--help'):
            ret = sub_help()
            return 0 if ret else 1

        if args[0] == '--is-sh':
            DEBUG("Running in sh checking mode")
            sh_check_mode = True
            args.pop(0)

        # If the requested command is one that has been registered as
        # internally managed through the @internal_command decorator, run it
        # now
        int_command = get_internal_command(args[0])
        if int_command is not None:
            if sh_check_mode:
                DEBUG("In sh sheck mode, this was an internal command, no sh")
                return 1
            args.pop(0)
            ret = int_command(args)
            return 0 if ret else 1

        DEBUG('will attempt to find subcommand with args: %s' % args)

        # Find the path to the requested subcommand
        (command_path, command, flags, is_sh) = find_command_path(args)

        # In sh check mode, return answer before checking any errors
        if sh_check_mode:
            DEBUG("In sh sheck mode, this is %sas sh command", '' if is_sh else 'not ')
            return 0 if is_sh else 1

        # If we ended up with a directory, show help for that directory
        if command_path is not None and os.path.isdir(command_path):
            DEBUG("subcommand %s is a container. Showing help" % command)
            return sub_help([command_path] + command)


        # We could not find the command, show error
        if command_path is None or not os.access(command_path, os.X_OK):
            DEBUG("subcommand %s was not found. Showing error" % command)
            die("%s: no such command `%s'" % (SUBNAME, ' '.join(command)))

        # Or everything went well, so run the command
        if is_sh or command[-1].startswith("sh-"):
            os.environ[sub_is_eval_name] = '1'
        os.environ[sub_leading_command_name] = ' '.join(command)
        os.environ[sub_command_path_name] = command_path
        DEBUG("subcommand %s was found. Executing with args: %s" % (command, flags))
        os.execvp(command_path, [command_path] + flags)


    except KeyboardInterrupt:
        sys.exit(-1)


if __name__ == '__main__':
    sys.exit(main(sys.argv) or 0)

# }}}
# vim: fdm=marker : ts=4 : sw=4 : expandtab :
