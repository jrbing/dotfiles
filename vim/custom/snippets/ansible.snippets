priority 50

# THIS FILE IS AUTOMATICALLY GENERATED, PLEASE DON'T MODIFY BY HAND

snippet play "Execute an ansible play"
- hosts: ${1:host_group}
	remote_user: ${2:remote_user}
	tasks:
	$0
endsnippet

snippet aws_kms "Perform various KMS management tasks."
- name:
	aws_kms:
		mode: ${1:#grant|deny}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		role_arn: ${5:# ARN of role to allow/deny access. One of C(role_name) or C(role_arn) are required.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		grant_types: ${8:# List of grants to give to user/role. Likely "role,role grant" or "role,role grant,admin". Required when C(mode=grant).}
		role_name: ${9:# Role to allow/deny access. One of C(role_name) or C(role_arn) are required.}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		key_arn: ${11:# Full ARN to the key. One of C(key_alias) or C(key_arn) are required.}
		clean_invalid_entries: ${12:yes}
		validate_certs: ${13:#yes|no}
		key_alias: ${14:# Alias label to the key. One of C(key_alias) or C(key_arn) are required.}
$0
endsnippet

snippet cloudformation "Create or delete an AWS CloudFormation stack"
- name:
	cloudformation:
		stack_name: ${1:# name of the cloudformation stack}
		state: ${2:# If state is "present", stack will be created.  If state is "present" and if stack exists and template has changed, it will be updated. If state is "absent", stack will be removed.}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		disable_rollback: ${6:true|#false}
		role_arn: ${7:# The role that AWS CloudFormation assumes to create the stack. See the AWS CloudFormation Service Role docs U(http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-servicerole.html)}
		notification_arns: ${8:# The Simple Notification Service (SNS) topic ARNs to publish stack related events.}
		security_token: ${9:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${10:# Dictionary of tags to associate with stack and its resources during stack creation. Can be updated later, updating tags removes previous entries.}
		stack_policy: ${11:# the path of the cloudformation stack policy. A policy cannot be removed once placed, but it can be modified. (for instance, [allow all updates](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html#d0e9051)}
		region: ${12:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		template_format: ${13:#json|yaml}
		template_parameters: ${14:{}}
		template_url: ${15:# Location of file containing the template body. The URL must point to a template (max size 307,200 bytes) located in an S3 bucket in the same region as the stack.}
		template: ${16:# The local path of the cloudformation template.}
		ec2_url: ${17:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${18:#yes|no}
$0
endsnippet

snippet cloudformation_facts "Obtain facts about an AWS CloudFormation stack"
- name:
	cloudformation_facts:
		stack_name: ${1:# The name or id of the CloudFormation stack}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		stack_template: ${6:no}
		all_facts: ${7:no}
		stack_policy: ${8:no}
		region: ${9:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		stack_events: ${10:no}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		stack_resources: ${12:no}
		validate_certs: ${13:#yes|no}
$0
endsnippet

snippet cloudfront_facts "Obtain facts about an AWS CloudFront distribution"
- name:
	cloudfront_facts:
		profile: ${1:# Uses a boto profile. Only works with boto >= 2.24.0.}
		list_streaming_distributions: ${2:no}
		origin_access_identity_config: ${3:no}
		streaming_distribution_configuration: ${4:no}
		invalidation: ${5:no}
		domain_name_alias: ${6:# Can be used instead of I(distribution_id) - uses the aliased CNAME for the cloudfront distribution to get the distribution id where required.}
		list_invalidations: ${7:no}
		origin_access_identity_id: ${8:# The id of the cloudfront origin access identity to get information about.}
		list_distributions_by_web_acl_id: ${9:no}
		origin_access_identity: ${10:no}
		all_lists: ${11:no}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		list_distributions: ${13:no}
		summary: ${14:no}
		aws_secret_key: ${15:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${16:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${17:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		web_acl_id: ${18:# Used with I(list_distributions_by_web_acl_id).}
		region: ${19:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		streaming_distribution: ${20:no}
		distribution_id: ${21:# The id of the CloudFront distribution. Used with I(distribution), I(distribution_config), I(invalidation), I(streaming_distribution), I(streaming_distribution_config), I(list_invalidations).}
		distribution_config: ${22:no}
		invalidation_id: ${23:# The id of the invalidation to get information about. Used with I(invalidation).}
		distribution: ${24:no}
		validate_certs: ${25:#yes|no}
		list_origin_access_identities: ${26:no}
$0
endsnippet

snippet cloudtrail "manage CloudTrail creation and deletion"
- name:
	cloudtrail:
		state: ${1:enabled|disabled}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		name: ${5:# name for given CloudTrail configuration.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		validate_certs: ${7:#yes|no}
		region: ${8:# The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.}
		include_global_events: ${9:true|false}
		s3_bucket_prefix: ${10:# bucket to place CloudTrail in.}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		s3_key_prefix: ${12:# prefix to keys in bucket. A trailing slash is not necessary and will be removed.}
$0
endsnippet

snippet cloudwatchevent_rule "Manage CloudWatch Event rules and targets"
- name:
	cloudwatchevent_rule:
		name: ${1:# The name of the rule you are creating, updating or deleting. No spaces or special characters allowed (i.e. must match C([\.\-_A-Za-z0-9]+))}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		role_arn: ${5:# The Amazon Resource Name (ARN) of the IAM role associated with the rule}
		description: ${6:# A description of the rule}
		security_token: ${7:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		event_pattern: ${8:# A string pattern (in valid JSON format) that is used to match against incoming events to determine if the rule should be triggered}
		schedule_expression: ${9:# A cron or rate expression that defines the schedule the rule will trigger on. For example, C(cron(0 20 * * ? *)), C(rate(5 minutes))}
		state: ${10:#present|disabled|absent}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${12:#yes|no}
		targets: ${13:# A dictionary array of targets to add to or update for the rule, in the form C({ id: [string], arn: [string], input: [valid JSON string], input_path: [valid JSONPath string] }). I(id) [required] is the unique target assignment ID. I(arn) (required) is the Amazon Resource Name associated with the target. I(input) (optional) is a JSON object that will override the event data when passed to the target.  I(input_path) (optional) is a JSONPath string (e.g. C($.detail)) that specifies the part of the event data to be passed to the target. If neither I(input) nor I(input_path) is specified, then the entire event is passed to the target in JSON form.}
$0
endsnippet

snippet dynamodb_table "Create, update or delete AWS Dynamo DB tables."
- name:
	dynamodb_table:
		name: ${1:# Name of the table.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		read_capacity: ${4:1}
		hash_key_name: ${5:# Name of the hash key.}
		range_key_type: ${6:#STRING|NUMBER|BINARY}
		security_token: ${7:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		write_capacity: ${9:1}
		indexes: ${10:[]}
		range_key_name: ${11:# Name of the range key.}
		state: ${12:#present|absent}
		ec2_url: ${13:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		aws_access_key: ${14:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		validate_certs: ${15:#yes|no}
		hash_key_type: ${16:#STRING|NUMBER|BINARY}
$0
endsnippet

snippet ec2 "create, terminate, start or stop an instance in ec2"
- name:
	ec2:
		image: ${1:# I(ami) ID to use for the instance}
		instance_type: ${2:# instance type to use for the instance, see U(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)}
		kernel: ${3:# kernel I(eki) to use for the instance}
		monitoring: ${4:yes|no}
		user_data: ${5:# opaque blob of data which is made available to the ec2 instance}
		termination_protection: ${6:yes|no}
		private_ip: ${7:# the private ip address to assign the instance (from the vpc subnet)}
		spot_type: ${8:#one-time|persistent}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		id: ${10:# identifier for this instance or set of instances, so that the module will be idempotent with respect to EC2 instances. This identifier is valid for at least 24 hours after the termination of the instance, and should not be reused for another call later on. For details, see the description of client token at U(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).}
		source_dest_check: ${11:yes|no}
		aws_secret_key: ${12:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		spot_wait_timeout: ${13:600}
		group: ${14:# security group (or list of groups) to use with the instance}
		zone: ${15:# AWS availability zone in which to launch the instance}
		exact_count: ${16:# An integer value which indicates how many instances that match the 'count_tag' parameter should be running. Instances are either created or terminated based on this value.}
		ebs_optimized: ${17:false}
		state: ${18:#present|absent|running|restarted|stopped}
		placement_group: ${19:# placement group for the instance when using EC2 Clustered Compute}
		key_name: ${20:# key pair to use on the instance}
		ramdisk: ${21:# ramdisk I(eri) to use for the instance}
		count_tag: ${22:# Used with 'exact_count' to determine how many nodes based on a specific tag criteria should be running.  This can be expressed in multiple ways and is shown in the EXAMPLES section.  For instance, one can request 25 servers that are tagged with "class=webserver". The specified tag must already exist or be passed in as the 'instance_tags' option.}
		spot_launch_group: ${23:# Launch group for spot request, see U(http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-spot-instances-work.html#spot-launch-group)}
		vpc_subnet_id: ${24:# the subnet ID in which to launch the instance (VPC)}
		instance_ids: ${25:# list of instance ids, currently used for states: absent, running, stopped}
		tenancy: ${26:#default|dedicated}
		profile: ${27:# Uses a boto profile. Only works with boto >= 2.24.0.}
		assign_public_ip: ${28:yes|no}
		spot_price: ${29:# Maximum spot price to bid, If not set a regular on-demand instance is requested. A spot request is made with this maximum bid. When it is filled, the instance is started.}
		wait: ${30:yes|#no}
		count: ${31:1}
		aws_access_key: ${32:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${33:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		instance_profile_name: ${34:# Name of the IAM instance profile to use. Boto library must be 2.5.0+}
		region: ${35:# The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		network_interfaces: ${36:# A list of existing network interfaces to attach to the instance at launch. When specifying existing network interfaces, none of the assign_public_ip, private_ip, vpc_subnet_id, group, or group_id parameters may be used. (Those parameters are for creating a new network interface at launch.)}
		instance_initiated_shutdown_behavior: ${37:#stop|terminate}
		wait_timeout: ${38:300}
		volumes: ${39:# a list of hash/dictionaries of volumes to add to the new instance; '[{"key":"value", "key":"value"}]'; keys allowed are - device_name (str; required), delete_on_termination (bool; False), device_type (deprecated), ephemeral (str), encrypted (bool; False), snapshot (str), volume_type (str), iops (int) - device_type is deprecated use volume_type, iops must be set when volume_type='io1', ephemeral and snapshot are mutually exclusive.}
		instance_tags: ${40:# a hash/dictionary of tags to add to the new instance or for starting/stopping instance by tag; '{"key":"value"}' and '{"key":"value","key":"value"}'}
		group_id: ${41:# security group id (or list of ids) to use with the instance}
		validate_certs: ${42:#yes|no}
$0
endsnippet

snippet ec2_ami "create or destroy an image in ec2"
- name:
	ec2_ami:
		profile: ${1:# Uses a boto profile. Only works with boto >= 2.24.0.}
		description: ${2:# Human-readable string describing the contents and purpose of the AMI.}
		tags: ${3:# A dictionary of tags to add to the new image; '{"key":"value"}' and '{"key":"value","key":"value"}'}
		kernel_id: ${4:# The target kernel id of the image to register}
		launch_permissions: ${5:# Users and groups that should be able to launch the AMI. Expects dictionary with a key of user_ids and/or group_names. user_ids should be a list of account ids. group_name should be a list of groups, "all" is the only acceptable value currently.}
		image_id: ${6:# Image ID to be deregistered.}
		no_reboot: ${7:yes|no}
		wait_timeout: ${8:300}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		wait: ${10:yes|#no}
		aws_secret_key: ${11:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${12:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		name: ${13:# The name of the new AMI.}
		security_token: ${14:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		delete_snapshot: ${15:yes|#no}
		region: ${16:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		architecture: ${17:# The target architecture of the image to register}
		instance_id: ${18:# Instance ID to create the AMI from.}
		state: ${19:absent|#present}
		root_device_name: ${20:# The root device name of the image to register}
		validate_certs: ${21:#yes|no}
		virtualization_type: ${22:# The virtualization type of the image to register}
		device_mapping: ${23:# List of device hashes/dictionaries with custom configurations (same block-device-mapping parameters)}
$0
endsnippet

snippet ec2_ami_copy "copies AMI between AWS regions, return new image id"
- name:
	ec2_ami_copy:
		source_image_id: ${1:# The ID of the AMI in source region that should be copied.}
		source_region: ${2:# The source region the AMI should be copied from.}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		name: ${6:default}
		security_token: ${7:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${8:# A hash/dictionary of tags to add to the new copied AMI; '{"key":"value"}' and '{"key":"value","key":"value"}'}
		encrypted: ${9:# Whether or not the destination snapshots of the copied AMI should be encrypted.}
		description: ${10:# An optional human-readable string describing the contents and purpose of the new AMI.}
		kms_key_id: ${11:# KMS key id used to encrypt image. If not specified, uses default EBS Customer Master Key (CMK) for your account.}
		wait_timeout: ${12:1200}
		ec2_url: ${13:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${14:#yes|no}
		region: ${15:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		wait: ${16:yes|#no}
$0
endsnippet

snippet ec2_ami_find "Searches for AMIs to obtain the AMI ID and other information"
- name:
	ec2_ami_find:
		region: ${1:# The AWS region to use.}
		sort: ${2:name|description|tag|architecture|block_device_mapping|creationDate|hypervisor|is_public|location|owner_id|platform|root_device_name|root_device_type|state|virtualization_type}
		no_result_action: ${3:#success|fail}
		sort_end: ${4:# Which result to end with (when sorting).}
		sort_order: ${5:#ascending|descending}
		owner: ${6:# Search AMIs owned by the specified owner}
		is_public: ${7:yes|no}
		product_code: ${8:# Marketplace product code to match.}
		ami_id: ${9:# An AMI ID to match.}
		name: ${10:# An AMI name to match.}
		ami_tags: ${11:# A hash/dictionary of tags to match for the AMI.}
		hypervisor: ${12:# A hypervisor type type to match (e.g. xen).}
		sort_tag: ${13:# Tag name with which to sort results.}
		platform: ${14:# Platform type to match.}
		state: ${15:available}
		sort_start: ${16:# Which result to start with (when sorting).}
		architecture: ${17:# An architecture type to match (e.g. x86_64).}
		virtualization_type: ${18:# Virtualization type to match (e.g. hvm).}
$0
endsnippet

snippet ec2_asg "Create or delete AWS Autoscaling Groups"
- name:
	ec2_asg:
		launch_config_name: ${1:# Name of the Launch configuration to use for the group. See the ec2_lc module for managing these.}
		name: ${2:# Unique name for group to be created or deleted}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		default_cooldown: ${5:300 seconds}
		tags: ${6:# A list of tags to add to the Auto Scale Group. Optional key is 'propagate_at_launch', which defaults to true.}
		aws_access_key: ${7:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		min_size: ${8:# Minimum number of instances in group, if unspecified then the current group value will be used.}
		wait_timeout: ${9:300}
		health_check_period: ${10:500 seconds}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		load_balancers: ${12:# List of ELB names to use for the group}
		aws_secret_key: ${13:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		lc_check: ${14:yes}
		availability_zones: ${15:# List of availability zone names in which to create the group.  Defaults to all the availability zones in the region if vpc_zone_identifier is not set.}
		replace_batch_size: ${16:1}
		vpc_zone_identifier: ${17:# List of VPC subnets to use}
		replace_all_instances: ${18:no}
		validate_certs: ${19:#yes|no}
		region: ${20:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		suspend_processes: ${21:[Launch, Terminate, HealthCheck, ReplaceUnhealthy, AZRebalance, AlarmNotification, ScheduledActions, AddToLoadBalancer}
		termination_policies: ${22:OldestInstance|NewestInstance|OldestLaunchConfiguration|ClosestToNextInstanceHour|#Default}
		replace_instances: ${23:# List of instance_ids belonging to the named ASG that you would like to terminate and be replaced with instances matching the current launch configuration.}
		desired_capacity: ${24:# Desired number of instances in group, if unspecified then the current group value will be used.}
		state: ${25:#present|absent}
		health_check_type: ${26:#EC2|ELB}
		max_size: ${27:# Maximum number of instances in group, if unspecified then the current group value will be used.}
		placement_group: ${28:# Physical location of your cluster placement group created in Amazon EC2.}
		notification_topic: ${29:# A SNS topic ARN to send auto scaling notifications to.}
		notification_types: ${30:[u'autoscaling:EC2_INSTANCE_LAUNCH', u'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', u'autoscaling:EC2_INSTANCE_TERMINATE', u'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']}
		wait_for_instances: ${31:yes}
$0
endsnippet

snippet ec2_asg_facts "Gather facts about ec2 Auto Scaling Groups (ASGs) in AWS"
- name:
	ec2_asg_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		name: ${4:# The prefix or name of the auto scaling group(s) you are searching for.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${6:# A dictionary/hash of tags in the format { tag1_name: 'tag1_value', tag2_name: 'tag2_value' } to match against the auto scaling group(s) you are searching for.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${9:#yes|no}
$0
endsnippet

snippet ec2_customer_gateway "Manage an AWS customer gateway"
- name:
	ec2_customer_gateway:
		name: ${1:# Name of the customer gateway.}
		ip_address: ${2:# Internet-routable IP address for customers gateway, must be a static address.}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		validate_certs: ${7:#yes|no}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		state: ${10:#present|absent}
		bgp_asn: ${11:# Border Gateway Protocol (BGP) Autonomous System Number (ASN), required when state=present.}
$0
endsnippet

snippet ec2_eip "manages EC2 elastic IP (EIP) addresses."
- name:
	ec2_eip:
		release_on_disassociation: ${1:no}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		reuse_existing_ip_allowed: ${5:no}
		region: ${6:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		public_ip: ${7:# The IP address of a previously allocated EIP.}
		state: ${8:#present|absent}
		in_vpc: ${9:no}
		profile: ${10:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		private_ip_address: ${12:# The primary or secondary private IP address to associate with the Elastic IP address.}
		validate_certs: ${13:#yes|no}
		device_id: ${14:# The id of the device for the EIP. Can be an EC2 Instance id or Elastic Network Interface (ENI) id.}
$0
endsnippet

snippet ec2_elb "De-registers or registers instances from EC2 ELBs"
- name:
	ec2_elb:
		instance_id: ${1:# EC2 Instance ID}
		state: ${2:present|absent}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		wait_timeout: ${8:0}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		ec2_elbs: ${10:# List of ELB names, required for registration. The ec2_elbs fact should be used if there was a previous de-register.}
		validate_certs: ${11:#yes|no}
		enable_availability_zone: ${12:yes|no}
		wait: ${13:yes|no}
$0
endsnippet

snippet ec2_elb_facts "Gather facts about EC2 Elastic Load Balancers in AWS"
- name:
	ec2_elb_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		names: ${4:# List of ELB names to gather facts about. Pass this option to gather facts about a set of ELBs, otherwise, all ELBs are returned.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet ec2_elb_lb "Creates or destroys Amazon ELB."
- name:
	ec2_elb_lb:
		name: ${1:# The name of the ELB}
		state: ${2:present|absent}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		subnets: ${4:# A list of VPC subnets to use when creating ELB. Zones should be empty if using this.}
		health_check: ${5:# An associative array of health check configuration settings (see example)}
		tags: ${6:# An associative array of tags. To delete all tags, supply an empty dict.}
		purge_subnets: ${7:no}
		aws_access_key: ${8:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		instance_ids: ${9:no}
		zones: ${10:# List of availability zones to enable on this ELB}
		idle_timeout: ${11:# ELB connections from clients and to servers are timed out after this amount of time}
		wait_timeout: ${12:60}
		ec2_url: ${13:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		cross_az_load_balancing: ${14:yes|#no}
		security_group_ids: ${15:# A list of security groups to apply to the elb}
		purge_zones: ${16:no}
		wait: ${17:yes|no}
		aws_secret_key: ${18:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		purge_instance_ids: ${19:no}
		connection_draining_timeout: ${20:# Wait a specified timeout allowing connections to drain before terminating an instance}
		security_token: ${21:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${22:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		listeners: ${23:# List of ports/protocols for this ELB to listen on (see example)}
		access_logs: ${24:# An associative array of access logs configuration settings (see example)}
		security_group_names: ${25:# A list of security group names to apply to the elb}
		purge_listeners: ${26:yes}
		scheme: ${27:internet-facing}
		validate_certs: ${28:#yes|no}
		stickiness: ${29:# An associative array of stickiness policy settings. Policy will be applied to all listeners ( see example )}
$0
endsnippet

snippet ec2_eni "Create and optionally attach an Elastic Network Interface (ENI) to an instance"
- name:
	ec2_eni:
		subnet_id: ${1:# ID of subnet in which to create the ENI. Only required when state=present.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		secondary_private_ip_addresses: ${3:# A list of IP addresses to assign as secondary IP addresses to the network interface. This option is mutually exclusive of secondary_private_ip_address_count}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		description: ${5:# Optional description of the ENI.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		validate_certs: ${7:#yes|no}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		device_index: ${9:0}
		attached: ${10:yes}
		force_detach: ${11:no}
		instance_id: ${12:# Instance ID that you wish to attach ENI to. Since version 2.2, use the 'attached' parameter to attach or       detach an ENI. Prior to 2.2, to detach an ENI from an instance, use 'None'.}
		state: ${13:#present|absent}
		profile: ${14:# Uses a boto profile. Only works with boto >= 2.24.0.}
		security_groups: ${15:# List of security groups associated with the interface. Only used when state=present. Since version 2.2, you       can specify security groups by ID or by name or a combination of both. Prior to 2.2, you can specify only by ID.}
		ec2_url: ${16:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		private_ip_address: ${17:# Private IP address.}
		secondary_private_ip_address_count: ${18:# The number of secondary IP addresses to assign to the network interface. This option is mutually exclusive of secondary_private_ip_addresses}
		eni_id: ${19:# The ID of the ENI}
		delete_on_termination: ${20:# Delete the interface when the instance it is attached to is terminated. You can only specify this flag when the interface is being modified, not on creation.}
		source_dest_check: ${21:# By default, interfaces perform source/destination checks. NAT instances however need this check to be disabled. You can only specify this flag when the interface is being modified, not on creation.}
$0
endsnippet

snippet ec2_eni_facts "Gather facts about ec2 ENI interfaces in AWS"
- name:
	ec2_eni_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		filters: ${5:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNetworkInterfaces.html) for possible filters.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet ec2_facts "Gathers facts about remote hosts within ec2 (aws)"
- name:
	ec2_facts:
		validate_certs: ${1:#yes|no}
$0
endsnippet

snippet ec2_group "maintain an ec2 VPC security group."
- name:
	ec2_group:
		name: ${1:# Name of the security group.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		rules_egress: ${3:# List of firewall outbound rules to enforce in this group (see example). If none are supplied, a default all-out rule is assumed. If an empty list is supplied, no outbound rules will be enabled.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		purge_rules: ${5:true}
		rules: ${6:# List of firewall inbound rules to enforce in this group (see example). If none are supplied, a default all-out rule is assumed. If an empty list is supplied, no inbound rules will be enabled. Rules list may include its own name in `group_name`. This allows idempotent loopback additions (e.g. allow group to acccess itself).}
		description: ${7:# Description of the security group. Required when C(state) is C(present).}
		state: ${8:#present|absent}
		profile: ${9:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		vpc_id: ${11:# ID of the VPC to create the group in.}
		security_token: ${12:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		validate_certs: ${13:#yes|no}
		region: ${14:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		purge_rules_egress: ${15:true}
$0
endsnippet

snippet ec2_group_facts "Gather facts about ec2 security groups in AWS."
- name:
	ec2_group_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		filters: ${5:{}}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet ec2_key "maintain an ec2 key pair."
- name:
	ec2_key:
		name: ${1:# Name of the key pair.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		force: ${5:yes}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		key_material: ${8:# Public key material.}
		state: ${9:present}
		wait_timeout: ${10:300}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${12:#yes|no}
		wait: ${13:no}
$0
endsnippet

snippet ec2_lc "Create or delete AWS Autoscaling Launch Configurations"
- name:
	ec2_lc:
		name: ${1:# Unique name for configuration}
		instance_type: ${2:# instance type to use for the instance}
		state: ${3:present|absent}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		kernel_id: ${6:# Kernel id for the EC2 instance}
		key_name: ${7:# The SSH key name to be used for access to managed instances}
		ramdisk_id: ${8:# A RAM disk id for the instances.}
		user_data: ${9:# opaque blob of data which is made available to the ec2 instance. Mutually exclusive with I(user_data_path).}
		image_id: ${10:# The AMI unique identifier to be used for the group}
		assign_public_ip: ${11:# Used for Auto Scaling groups that launch instances into an Amazon Virtual Private Cloud. Specifies whether to assign a public IP address to each instance launched in a Amazon VPC.}
		instance_monitoring: ${12:no}
		classic_link_vpc_id: ${13:# Id of ClassicLink enabled VPC}
		security_groups: ${14:# A list of security groups to apply to the instances. For VPC instances, specify security group IDs. For EC2-Classic, specify either security group names or IDs.}
		classic_link_vpc_security_groups: ${15:# A list of security group id's with which to associate the ClassicLink VPC instances.}
		aws_secret_key: ${16:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${17:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		spot_price: ${18:# The spot price you are bidding. Only applies for an autoscaling group with spot instances.}
		instance_profile_name: ${19:# The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instances.}
		user_data_path: ${20:# Path to the file that contains userdata for the ec2 instances. Mutually exclusive with I(user_data).}
		region: ${21:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		ebs_optimized: ${22:no}
		ec2_url: ${23:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		volumes: ${24:# a list of volume dicts, each containing device name and optionally ephemeral id or snapshot id. Size and type (and number of iops for io device type) must be specified for a new volume or a root volume, and may be passed for a snapshot volume. For any volume, a volume size less than 1 will be interpreted as a request not to create the volume.}
		validate_certs: ${25:#yes|no}
$0
endsnippet

snippet ec2_lc_facts "Gather facts about AWS Autoscaling Launch Configurations"
- name:
	ec2_lc_facts:
		sort: ${1:launch_configuration_name|image_id|created_time|instance_type|kernel_id|ramdisk_id|key_name}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		sort_end: ${3:# Which result to end with (when sorting).}
		name: ${4:[]}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${6:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		aws_access_key: ${7:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		sort_start: ${8:# Which result to start with (when sorting).}
		sort_order: ${9:#ascending|descending}
		profile: ${10:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${12:#yes|no}
$0
endsnippet

snippet ec2_lc_find "Find AWS Autoscaling Launch Configurations"
- name:
	ec2_lc_find:
		region: ${1:# The AWS region to use.}
		name_regex: ${2:# A Launch Configuration to match}
		sort_order: ${3:#ascending|descending}
		limit: ${4:# How many results to show.}
$0
endsnippet

snippet ec2_metric_alarm "Create/update or delete AWS Cloudwatch 'metric alarms'"
- name:
	ec2_metric_alarm:
		name: ${1:# Unique name for the alarm}
		state: ${2:present|absent}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ok_actions: ${4:# A list of the names of action(s) to take when the alarm is in the 'ok' status}
		description: ${5:# A longer description of the alarm}
		evaluation_periods: ${6:# The number of times in which the metric is evaluated before final calculation}
		metric: ${7:# Name of the monitored metric (e.g. CPUUtilization)}
		statistic: ${8:SampleCount|Average|Sum|Minimum|Maximum}
		period: ${9:# The time (in seconds) between metric evaluations}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		threshold: ${11:# Sets the min/max bound for triggering the alarm}
		unit: ${12:Seconds|Microseconds|Milliseconds|Bytes|Kilobytes|Megabytes|Gigabytes|Terabytes|Bits|Kilobits|Megabits|Gigabits|Terabits|Percent|Count|Bytes/Second|Kilobytes/Second|Megabytes/Second|Gigabytes/Second|Terabytes/Second|Bits/Second|Kilobits/Second|Megabits/Second|Gigabits/Second|Terabits/Second|Count/Second|None}
		dimensions: ${13:# Describes to what the alarm is applied}
		aws_secret_key: ${14:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		comparison: ${15:<=|<|>|>=}
		alarm_actions: ${16:# A list of the names action(s) taken when the alarm is in the 'alarm' status}
		security_token: ${17:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${18:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		namespace: ${19:# Name of the appropriate namespace ('AWS/EC2', 'System/Linux', etc.), which determines the category it will appear under in cloudwatch}
		insufficient_data_actions: ${20:# A list of the names of action(s) to take when the alarm is in the 'insufficient_data' status}
		aws_access_key: ${21:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		validate_certs: ${22:#yes|no}
$0
endsnippet

snippet ec2_remote_facts "Gather facts about ec2 instances in AWS"
- name:
	ec2_remote_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		filters: ${5:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html) for possible filters.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet ec2_scaling_policy "Create or delete AWS scaling policies for Autoscaling groups"
- name:
	ec2_scaling_policy:
		name: ${1:# Unique name for the scaling policy}
		asg_name: ${2:# Name of the associated autoscaling group}
		state: ${3:present|absent}
		aws_secret_key: ${4:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${5:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${6:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${7:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		adjustment_type: ${9:ChangeInCapacity|ExactCapacity|PercentChangeInCapacity}
		min_adjustment_step: ${10:# Minimum amount of adjustment when policy is triggered}
		scaling_adjustment: ${11:# The amount by which the autoscaling group is adjusted by the policy}
		cooldown: ${12:# The minimum period of time between which autoscaling actions can take place}
		ec2_url: ${13:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${14:#yes|no}
$0
endsnippet

snippet ec2_snapshot "creates a snapshot from an existing volume"
- name:
	ec2_snapshot:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		description: ${4:# description to be applied to the snapshot}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		snapshot_tags: ${6:# a hash/dictionary of tags to add to the snapshot}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		volume_id: ${8:# volume from which to take the snapshot}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		device_name: ${10:# device name of a mounted volume to be snapshotted}
		instance_id: ${11:# instance that has the required volume to snapshot mounted}
		state: ${12:absent|#present}
		wait_timeout: ${13:0}
		snapshot_id: ${14:# snapshot id to remove}
		last_snapshot_min_age: ${15:0}
		validate_certs: ${16:#yes|no}
		wait: ${17:yes|no}
$0
endsnippet

snippet ec2_snapshot_facts "Gather facts about ec2 volume snapshots in AWS"
- name:
	ec2_snapshot_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${5:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		snapshot_ids: ${6:[]}
		filters: ${7:{}}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		restorable_by_user_ids: ${9:[]}
		validate_certs: ${10:#yes|no}
		owner_ids: ${11:[]}
$0
endsnippet

snippet ec2_tag "create and remove tag(s) to ec2 resources."
- name:
	ec2_tag:
		resource: ${1:# The EC2 resource id.}
		tags: ${2:# a hash/dictionary of tags to add to the resource; '{"key":"value"}' and '{"key":"value","key":"value"}'}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		state: ${8:#present|absent|list}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${10:#yes|no}
$0
endsnippet

snippet ec2_vol "create and attach a volume, return volume id and device map"
- name:
	ec2_vol:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		name: ${4:# volume Name tag if you wish to attach an existing volume (requires instance)}
		zone: ${5:# zone in which to create the volume, if unset uses the zone the instance is in (if set)}
		instance: ${6:# instance ID if you wish to attach the volume. Since 1.9 you can set to None to detach.}
		encrypted: ${7:no}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		kms_key_id: ${9:# Specify the id of the KMS key to use.}
		volume_type: ${10:standard}
		device_name: ${11:# device id to override device mapping. Assumes /dev/sdf for Linux/UNIX and /dev/xvdf for Windows.}
		volume_size: ${12:# size of volume (in GB) to create.}
		state: ${13:absent|#present|list}
		iops: ${14:100}
		snapshot: ${15:# snapshot ID on which to base the volume}
		ec2_url: ${16:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		id: ${17:# volume id if you wish to attach an existing volume (requires instance) or remove an existing volume}
		security_token: ${18:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		validate_certs: ${19:#yes|no}
		delete_on_termination: ${20:yes|#no}
		tags: ${21:{}}
$0
endsnippet

snippet ec2_vol_facts "Gather facts about ec2 volumes in AWS"
- name:
	ec2_vol_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		filters: ${5:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html) for possible filters.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet ec2_vpc_dhcp_options "Manages DHCP Options, and can ensure the DHCP options for the given VPC match what's requested"
- name:
	ec2_vpc_dhcp_options:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		dns_servers: ${4:# A list of hosts to set the DNS servers for the VPC to. (Should be a list of IP addresses rather than host names.)}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${6:# Tags to be applied to a VPC options set if a new one is created, or if the resource_id is provided. (options must match)}
		ntp_servers: ${7:# List of hosts to advertise as NTP servers for the VPC.}
		domain_name: ${8:# The domain name to set in the DHCP option sets}
		delete_old: ${9:yes}
		state: ${10:absent|#present}
		netbios_node_type: ${11:# NetBIOS node type to advertise in the DHCP options. The AWS recommendation is to use 2 (when using netbios name services) http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		vpc_id: ${13:# VPC ID to associate with the requested DHCP option set. If no vpc id is provided, and no matching option set is found then a new DHCP option set is created.}
		inherit_existing: ${14:no}
		validate_certs: ${15:#yes|no}
		dhcp_options_id: ${16:# The resource_id of an existing DHCP options set. If this is specified, then it will override other settings, except tags (which will be updated to match)}
		netbios_name_servers: ${17:# List of hosts to advertise as NetBIOS servers.}
$0
endsnippet

snippet ec2_vpc_dhcp_options_facts "Gather facts about dhcp options sets in AWS"
- name:
	ec2_vpc_dhcp_options_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${5:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		DhcpOptionsIds: ${6:# Get details of specific DHCP Option ID}
		filters: ${7:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html) for possible filters.}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${9:#yes|no}
$0
endsnippet

snippet ec2_vpc_igw "Manage an AWS VPC Internet gateway"
- name:
	ec2_vpc_igw:
		vpc_id: ${1:# The VPC ID for the VPC in which to manage the Internet Gateway.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${6:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		state: ${7:#present|absent}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${9:#yes|no}
$0
endsnippet

snippet ec2_vpc_igw_facts "Gather facts about internet gateways in AWS"
- name:
	ec2_vpc_igw_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		internet_gateway_ids: ${5:# Get details of specific Internet Gateway ID. Provide this value as a list.}
		region: ${6:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		filters: ${7:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html) for possible filters.}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${9:#yes|no}
$0
endsnippet

snippet ec2_vpc_nacl "create and delete Network ACLs."
- name:
	ec2_vpc_nacl:
		name: ${1:# Tagged name identifying a network ACL.}
		vpc_id: ${2:# VPC id of the requesting VPC.}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		subnets: ${4:# The list of subnets that should be associated with the network ACL.}
		ingress: ${5:# List of rules for incoming traffic.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${7:# Dictionary of tags to look for and apply when creating a network ACL.}
		aws_access_key: ${8:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		state: ${9:#present|absent}
		egress: ${10:# A list of rules for outgoing traffic.}
		profile: ${11:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${13:#yes|no}
$0
endsnippet

snippet ec2_vpc_nacl_facts "Gather facts about Network ACLs in an AWS VPC"
- name:
	ec2_vpc_nacl_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${5:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		nacl_ids: ${6:[]}
		filters: ${7:{}}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${9:#yes|no}
$0
endsnippet

snippet ec2_vpc_nat_gateway "Manage AWS VPC NAT Gateways."
- name:
	ec2_vpc_nat_gateway:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		release_eip: ${4:yes}
		nat_gateway_id: ${5:# The id AWS dynamically allocates to the NAT Gateway on creation. This is required when the absent option is present.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		allocation_id: ${7:# The id of the elastic IP allocation. If this is not passed and the eip_address is not passed. An EIP is generated for this NAT Gateway.}
		subnet_id: ${8:# The id of the subnet to create the NAT Gateway in. This is required with the present option.}
		region: ${9:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		if_exist_do_not_create: ${10:no}
		eip_address: ${11:# The elastic IP address of the EIP you want attached to this NAT Gateway. If this is not passed and the allocation_id is not passed, an EIP is generated for this NAT Gateway.}
		state: ${12:#present|absent}
		wait_timeout: ${13:300}
		ec2_url: ${14:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		client_token: ${15:# Optional unique token to be used during create to ensure idempotency. When specifying this option, ensure you specify the eip_address parameter as well otherwise any subsequent runs will fail.}
		validate_certs: ${16:#yes|no}
		wait: ${17:no}
$0
endsnippet

snippet ec2_vpc_nat_gateway_facts "Retrieves AWS VPC Managed Nat Gateway details using AWS methods."
- name:
	ec2_vpc_nat_gateway_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		nat_gateway_ids: ${3:# Get details of specific nat gateway IDs}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${5:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		aws_access_key: ${6:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		filters: ${7:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNatGateways.html) for possible filters.}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${9:#yes|no}
$0
endsnippet

snippet ec2_vpc_net "Configure AWS virtual private clouds"
- name:
	ec2_vpc_net:
		name: ${1:# The name to give your VPC. This is used in combination with the cidr_block parameter to determine if a VPC already exists.}
		cidr_block: ${2:# The CIDR of the VPC}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		dns_support: ${6:yes|no}
		tags: ${7:# The tags you want attached to the VPC. This is independent of the name value, note if you pass a 'Name' key it would override the Name of the VPC if it's different.}
		security_token: ${8:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		multi_ok: ${10:no}
		state: ${11:#present|absent}
		tenancy: ${12:#default|dedicated}
		dns_hostnames: ${13:yes|no}
		validate_certs: ${14:#yes|no}
		region: ${15:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		dhcp_opts_id: ${16:# the id of the DHCP options to use for this vpc}
$0
endsnippet

snippet ec2_vpc_net_facts "Gather facts about ec2 VPCs in AWS"
- name:
	ec2_vpc_net_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		filters: ${5:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html) for possible filters.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet ec2_vpc_peer "create, delete, accept, and reject VPC peering connections between two VPCs."
- name:
	ec2_vpc_peer:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		peering_id: ${5:# Peering connection id.}
		tags: ${6:# Dictionary of tags to look for and apply when creating a Peering Connection.}
		ec2_url: ${7:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		peer_owner_id: ${8:# The AWS account number for cross account peering.}
		state: ${9:#present|absent|accept|reject}
		peer_vpc_id: ${10:# VPC id of the accepting VPC.}
		vpc_id: ${11:# VPC id of the requesting VPC.}
		validate_certs: ${12:#yes|no}
$0
endsnippet

snippet ec2_vpc_route_table "Manage route tables for AWS virtual private clouds"
- name:
	ec2_vpc_route_table:
		subnets: ${1:# An array of subnets to add to this route table. Subnets may be specified by either subnet ID, Name tag, or by a CIDR such as '10.0.0.0/24'.}
		vpc_id: ${2:# VPC ID of the VPC in which to create the route table.}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${6:# A dictionary of resource tags of the form: { tag1: value1, tag2: value2 }. Tags are used to uniquely identify route tables within a VPC when the route_table_id is not supplied.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		purge_subnets: ${8:true}
		purge_routes: ${9:true}
		route_table_id: ${10:# The ID of the route table to update or delete.}
		state: ${11:#present|absent}
		lookup: ${12:#tag|id}
		ec2_url: ${13:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		routes: ${14:# List of routes in the route table. Routes are specified as dicts containing the keys 'dest' and one of 'gateway_id', 'instance_id', 'interface_id', or 'vpc_peering_connection_id'. If 'gateway_id' is specified, you can refer to the VPC's IGW by using the value 'igw'. Routes are required for present states.}
		profile: ${15:# Uses a boto profile. Only works with boto >= 2.24.0.}
		validate_certs: ${16:#yes|no}
		propagating_vgw_ids: ${17:# Enable route propagation from virtual gateways specified by ID.}
$0
endsnippet

snippet ec2_vpc_route_table_facts "Gather facts about ec2 VPC route tables in AWS"
- name:
	ec2_vpc_route_table_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		filters: ${5:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html) for possible filters.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet ec2_vpc_subnet "Manage subnets in AWS virtual private clouds"
- name:
	ec2_vpc_subnet:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${5:# A dict of tags to apply to the subnet. Any tags currently applied to the subnet and not present here will be removed.}
		region: ${6:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		state: ${7:#present|absent}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		vpc_id: ${9:# VPC ID of the VPC in which to create the subnet.}
		cidr: ${10:# The CIDR block for the subnet. E.g. 192.0.2.0/24. Only required when state=present.}
		az: ${11:# The availability zone for the subnet. Only required when state=present.}
		validate_certs: ${12:#yes|no}
$0
endsnippet

snippet ec2_vpc_subnet_facts "Gather facts about ec2 VPC subnets in AWS"
- name:
	ec2_vpc_subnet_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		filters: ${5:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html) for possible filters.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet ec2_vpc_vgw "Create and delete AWS VPN Virtual Gateways."
- name:
	ec2_vpc_vgw:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		name: ${4:# name of the vgw to be created or deleted}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${6:# dictionary of resource tags}
		validate_certs: ${7:#yes|no}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		state: ${9:#present|absent}
		wait_timeout: ${10:320}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		vpc_id: ${12:# the vpc-id of a vpc to attach or detach}
		vpn_gateway_id: ${13:# vpn gateway id of an existing virtual gateway}
		type: ${14:ipsec.1}
$0
endsnippet

snippet ec2_vpc_vgw_facts "Gather facts about virtual gateways in AWS"
- name:
	ec2_vpc_vgw_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		vpn_gateway_ids: ${4:# Get details of a specific Virtual Gateway ID. This value should be provided as a list.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${6:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		filters: ${7:# A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html) for possible filters.}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${9:#yes|no}
$0
endsnippet

snippet ec2_win_password "gets the default administrator password for ec2 windows instances"
- name:
	ec2_win_password:
		instance_id: ${1:# The instance id to get the password data from.}
		key_file: ${2:# Path to the file containing the key pair used on the instance.}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		key_passphrase: ${8:# The passphrase for the instance key pair. The key must use DES or 3DES encryption for this module to decrypt it. You can use openssl to convert your password protected keys if they do not use DES or 3DES. ex) openssl rsa -in current_key -out new_key -des3.}
		wait_timeout: ${9:120}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${11:#yes|no}
		wait: ${12:yes|#no}
$0
endsnippet

snippet ecs_cluster "create or terminate ecs clusters"
- name:
	ecs_cluster:
		name: ${1:# The cluster name}
		state: ${2:present|absent|has_instances}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		repeat: ${6:# The number of times to wait for the cluster to have an instance}
		security_token: ${7:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		delay: ${9:# Number of seconds to wait}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${11:#yes|no}
$0
endsnippet

snippet ecs_ecr "Manage Elastic Container Registry repositories"
- name:
	ecs_ecr:
		name: ${1:# the name of the repository}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		validate_certs: ${6:#yes|no}
		delete_policy: ${7:no}
		force_set_policy: ${8:no}
		state: ${9:#present|absent}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		policy: ${11:# JSON or dict that represents the new policy}
		registry_id: ${12:# AWS account id associated with the registry.}
$0
endsnippet

snippet ecs_service "create, terminate, start or stop a service in ecs"
- name:
	ecs_service:
		name: ${1:# The name of the service}
		state: ${2:present|absent|deleting}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		repeat: ${6:10}
		security_token: ${7:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		desired_count: ${8:# The count of how many instances of the service. This parameter is required when state=present}
		region: ${9:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		delay: ${10:10}
		cluster: ${11:# The name of the cluster in which the service exists}
		task_definition: ${12:# The task definition the service will run. This parameter is required when state=present}
		role: ${13:# The name or full Amazon Resource Name (ARN) of the IAM role that allows your Amazon ECS container agent to make calls to your load balancer on your behalf. This parameter is only required if you are using a load balancer with your service.}
		deployment_configuration: ${14:# Optional parameters that control the deployment_configuration; format is '{"maximum_percent":<integer>, "minimum_healthy_percent":<integer>}}
		ec2_url: ${15:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		load_balancers: ${16:# The list of ELBs defined for this service}
		client_token: ${17:# Unique, case-sensitive identifier you provide to ensure the idempotency of the request. Up to 32 ASCII characters are allowed.}
		validate_certs: ${18:#yes|no}
$0
endsnippet

snippet ecs_service_facts "list or describe services in ecs"
- name:
	ecs_service_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		service: ${5:# The service to get details for (required if details is true)}
		region: ${6:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		cluster: ${7:default}
		details: ${8:true|#false}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${10:#yes|no}
$0
endsnippet

snippet ecs_task "run, start or stop a task in ecs"
- name:
	ecs_task:
		operation: ${1:run|start|stop}
		count: ${2:# How many new instances to start}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		task: ${5:# The task to stop}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		overrides: ${7:# A dictionary of values to pass to the new instances}
		started_by: ${8:# A value showing who or what started the task (for informational purposes)}
		cluster: ${9:# The name of the cluster to run the task on}
		task_definition: ${10:# The task definition to start or run}
		container_instances: ${11:# The list of container instances on which to deploy the task}
		profile: ${12:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${13:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${14:#yes|no}
		region: ${15:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
$0
endsnippet

snippet ecs_taskdefinition "register a task definition in ecs"
- name:
	ecs_taskdefinition:
		state: ${1:present|absent}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		family: ${6:# A Name that would be given to the task definition}
		task_role_arn: ${7:# The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role.}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		network_mode: ${9:#bridge|host|none}
		containers: ${10:# A list of containers definitions}
		volumes: ${11:# A list of names of volumes to be attached}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${13:#yes|no}
		arn: ${14:# The arn of the task description to delete}
		revision: ${15:# A revision number for the task definition}
$0
endsnippet

snippet efs "create and maintain EFS file systems"
- name:
	efs:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		name: ${4:# Creation Token of Amazon EFS file system. Required for create. Either name or ID required for delete.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${6:# List of tags of Amazon EFS. Should be defined as dictionary In case of 'present' state with list of tags and existing EFS (matched by 'name'), tags of EFS will be replaced with provided data.}
		validate_certs: ${7:#yes|no}
		targets: ${8:# List of mounted targets. It should be a list of dictionaries, every dictionary should include next attributes: - subnet_id - Mandatory. The ID of the subnet to add the mount target in. - ip_address - Optional. A valid IPv4 address within the address range of the specified subnet. - security_groups - Optional. List of security group IDs, of the form 'sg-xxxxxxxx'. These must be for the same VPC as subnet specified This data may be modified for existing EFS using state 'present' and new list of mount targets.}
		state: ${9:#present|absent}
		wait_timeout: ${10:0}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		performance_mode: ${12:#general_purpose|max_io}
		id: ${13:# ID of Amazon EFS. Either name or ID required for delete.}
		wait: ${14:yes|#no}
$0
endsnippet

snippet efs_facts "Get information about Amazon EFS file systems"
- name:
	efs_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		name: ${4:# Creation Token of Amazon EFS file system.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${6:# List of tags of Amazon EFS. Should be defined as dictionary}
		targets: ${7:# List of mounted targets. It should be a list of dictionaries, every dictionary should include next attributes: - SubnetId - Mandatory. The ID of the subnet to add the mount target in. - IpAddress - Optional. A valid IPv4 address within the address range of the specified subnet. - SecurityGroups - Optional. List of security group IDs, of the form 'sg-xxxxxxxx'. These must be for the same VPC as subnet specified.}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${9:#yes|no}
		id: ${10:# ID of Amazon EFS.}
$0
endsnippet

snippet elasticache "Manage cache clusters in Amazon Elasticache."
- name:
	elasticache:
		name: ${1:# The cache cluster identifier}
		state: ${2:present|absent|rebooted}
		engine: ${3:redis|#memcached}
		aws_secret_key: ${4:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		cache_port: ${5:# The port number on which each of the cache nodes will accept connections}
		cache_parameter_group: ${6:# The name of the cache parameter group to associate with this cache cluster. If this argument is omitted, the default cache parameter group for the specified engine will be used.}
		cache_engine_version: ${7:# The version number of the cache engine}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		node_type: ${10:cache.m1.small}
		num_nodes: ${11:# The initial number of cache nodes that the cache cluster will have. Required when state=present.}
		profile: ${12:# Uses a boto profile. Only works with boto >= 2.24.0.}
		zone: ${13:# The EC2 Availability Zone in which the cache cluster will be created}
		cache_security_groups: ${14:# A list of cache security group names to associate with this cache cluster. Must be an empty list if inside a vpc}
		cache_subnet_group: ${15:# The subnet group name to associate with. Only use if inside a vpc. Required if inside a vpc}
		hard_modify: ${16:yes|no}
		aws_access_key: ${17:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${18:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		security_group_ids: ${19:# A list of vpc security group names to associate with this cache cluster. Only use if inside a vpc}
		validate_certs: ${20:#yes|no}
		wait: ${21:yes|no}
$0
endsnippet

snippet elasticache_parameter_group "Manage cache security groups in Amazon Elasticache."
- name:
	elasticache_parameter_group:
		group_family: ${1:memcached1.4|redis2.6|redis2.8|redis3.2}
		state: ${2:present|absent|reset}
		name: ${3:# A user-specified name for the cache parameter group.}
		values: ${4:# A user-specified list of parameters to reset or modify for the cache parameter group.}
		description: ${5:# A user-specified description for the cache parameter group.}
$0
endsnippet

snippet elasticache_snapshot "Manage cache snapshots in Amazon Elasticache."
- name:
	elasticache_snapshot:
		name: ${1:# The name of the snapshot we want to create, copy, delete}
		state: ${2:present|absent|copy}
		replication_id: ${3:# The name of the existing replication group to make the snapshot.}
		cluster_id: ${4:# The name of an existing cache cluster in the replication group to make the snapshot.}
		bucket: ${5:# The s3 bucket to which the snapshot is exported}
		target: ${6:# The name of a snapshot copy}
$0
endsnippet

snippet elasticache_subnet_group "manage Elasticache subnet groups"
- name:
	elasticache_subnet_group:
		name: ${1:# Database subnet group identifier.}
		state: ${2:#present|absent}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		subnets: ${4:# List of subnet IDs that make up the Elasticache subnet group.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		profile: ${8:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${10:#yes|no}
		description: ${11:# Elasticache subnet group description. Only set when a new group is added.}
$0
endsnippet

snippet execute_lambda "Execute an AWS Lambda function"
- name:
	execute_lambda:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		name: ${4:# The name of the function to be invoked. This can only be used for invocations within the calling account. To invoke a function in another account, use I(function_arn) to specify the full ARN.}
		dry_run: ${5:no}
		function_arn: ${6:# The name of the function to be invoked}
		tail_log: ${7:no}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		version_qualifier: ${9:LATEST}
		security_token: ${10:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		validate_certs: ${11:#yes|no}
		payload: ${12:{}}
		wait: ${13:yes}
$0
endsnippet

snippet iam "Manage IAM users, groups, roles and keys"
- name:
	iam:
		name: ${1:# Name of IAM resource to create or identify}
		iam_type: ${2:user|group|role}
		state: ${3:present|absent|update}
		new_name: ${4:# When state is update, will replace name with new_name on IAM resource}
		aws_secret_key: ${5:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		update_password: ${6:#always|on_create}
		new_path: ${7:# When state is update, will replace the path with new_path on the IAM resource}
		security_token: ${8:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		access_key_state: ${9:create|remove|active|inactive}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		key_count: ${11:1}
		aws_access_key: ${12:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		validate_certs: ${13:#yes|no}
		access_key_ids: ${14:# A list of the keys that you want impacted by the access_key_state parameter.}
		profile: ${15:# Uses a boto profile. Only works with boto >= 2.24.0.}
		groups: ${16:# A list of groups the user should belong to. When update, will gracefully remove groups not listed.}
		trust_policy: ${17:# The inline (JSON or YAML) trust policy document that grants an entity permission to assume the role. Mutually exclusive with C(trust_policy_filepath).}
		path: ${18:/}
		password: ${19:# When type is user and state is present, define the users login password. Also works with update. Note that always returns changed.}
		trust_policy_filepath: ${20:# The path to the trust policy document that grants an entity permission to assume the role. Mutually exclusive with C(trust_policy).}
$0
endsnippet

snippet iam_cert "Manage server certificates for use on ELBs and CloudFront"
- name:
	iam_cert:
		name: ${1:# Name of certificate to add, update or remove.}
		state: ${2:present|absent}
		new_name: ${3:# When present, this will update the name of the cert with the value passed here.}
		aws_secret_key: ${4:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		dup_ok: ${5:no}
		new_path: ${6:# When present, this will update the path of the cert with the value passed here.}
		security_token: ${7:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		cert: ${9:# The path to the certificate body in PEM encoded format.}
		profile: ${10:# Uses a boto profile. Only works with boto >= 2.24.0.}
		key: ${11:# The path to the private key of the certificate in PEM encoded format.}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		path: ${13:/}
		aws_access_key: ${14:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		validate_certs: ${15:#yes|no}
		cert_chain: ${16:# The path to the CA certificate chain in PEM encoded format.}
$0
endsnippet

snippet iam_mfa_device_facts "List the MFA (Multi-Factor Authentication) devices registered for a user"
- name:
	iam_mfa_device_facts:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		ec2_url: ${5:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${6:#yes|no}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		user_name: ${8:# The name of the user whose MFA devices will be listed}
$0
endsnippet

snippet iam_policy "Manage IAM policies for users, groups, and roles"
- name:
	iam_policy:
		iam_name: ${1:# Name of IAM resource you wish to target for policy actions. In other words, the user name, group name or role name.}
		iam_type: ${2:user|group|role}
		policy_name: ${3:# The name label for the policy to create or remove.}
		state: ${4:present|absent}
		aws_secret_key: ${5:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		policy_document: ${6:# The path to the properly json formatted policy file (mutually exclusive with C(policy_json))}
		aws_access_key: ${7:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${8:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${9:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		policy_json: ${10:# A properly json formatted policy as string (mutually exclusive with C(policy_document), see https://github.com/ansible/ansible/issues/7005#issuecomment-42894813 on how to use it properly)}
		skip_duplicates: ${11:/}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		profile: ${13:# Uses a boto profile. Only works with boto >= 2.24.0.}
		validate_certs: ${14:#yes|no}
$0
endsnippet

snippet iam_role "Manage AWS IAM roles"
- name:
	iam_role:
		name: ${1:# The name of the role to create.}
		state: ${2:present|absent}
		managed_policy: ${3:# A list of managed policy ARNs (can't use friendly names due to AWS API limitation) to attach to the role. To embed an inline policy, use M(iam_policy). To remove existing policies, use an empty list item.}
		aws_secret_key: ${4:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${5:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${6:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${7:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		assume_role_policy_document: ${8:# The trust relationship policy document that grants an entity permission to assume the role.  This parameter is required when state: present.}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		path: ${10:/}
		validate_certs: ${11:#yes|no}
$0
endsnippet

snippet iam_server_certificate_facts "Retrieve the facts of a server certificate"
- name:
	iam_server_certificate_facts:
		name: ${1:# The name of the server certificate you are retrieving attributes for.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet kinesis_stream "Manage a Kinesis Stream."
- name:
	kinesis_stream:
		name: ${1:# The name of the Kinesis Stream you are managing.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${6:# A dictionary of resource tags of the form: { tag1: value1, tag2: value2 }.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		retention_period: ${8:# The default retention period is 24 hours and can not be less than 24 hours.}
		shards: ${9:# The number of shards you want to have with this stream. This can not be modified after being created.}
		state: ${10:#present|absent}
		wait_timeout: ${11:300}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${13:#yes|no}
		wait: ${14:yes}
$0
endsnippet

snippet lambda "Manage AWS Lambda functions"
- name:
	lambda:
		name: ${1:# The name you want to assign to the function you are uploading. Cannot be changed.}
		runtime: ${2:# The runtime environment for the Lambda function you are uploading. Required when creating a function. Use parameters as described in boto3 docs. Current example runtime environments are nodejs, nodejs4.3, java8 or python2.7}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		description: ${4:# A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.}
		s3_key: ${5:# The Amazon S3 object (the deployment package) key name you want to upload}
		zip_file: ${6:# A .zip file containing your deployment package}
		s3_object_version: ${7:# The Amazon S3 object (the deployment package) version you want to upload.}
		memory_size: ${8:128}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		dead_letter_arn: ${10:# The parent object that contains the target Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.}
		aws_secret_key: ${11:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${12:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${13:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		s3_bucket: ${14:# Amazon S3 bucket name where the .zip file containing your deployment package is stored}
		state: ${15:#present|absent}
		handler: ${16:# The function within your code that Lambda calls to begin execution}
		role: ${17:# The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. You may use the bare ARN if the role belongs to the same AWS account.}
		timeout: ${18:3}
		environment_variables: ${19:# A dictionary of environment variables the Lambda function is given.}
		validate_certs: ${20:#yes|no}
		region: ${21:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		vpc_subnet_ids: ${22:# List of subnet IDs to run Lambda function in. Use this option if you need to access resources in your VPC. Leave empty if you don't want to run the function in a VPC.}
		vpc_security_group_ids: ${23:# List of VPC security group IDs to associate with the Lambda function. Required when vpc_subnet_ids is used.}
$0
endsnippet

snippet lambda_alias "Creates, updates or deletes AWS Lambda function aliases."
- name:
	lambda_alias:
		name: ${1:# Name of the function alias.}
		state: ${2:#present|absent}
		function_name: ${3:# The name of the function alias.}
		aws_secret_key: ${4:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${5:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${6:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		description: ${7:# A short, user-defined function alias description.}
		security_token: ${8:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		version: ${9:# Version associated with the Lambda function alias. A value of 0 (or omitted parameter) sets the alias to the $LATEST version.}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${11:#yes|no}
$0
endsnippet

snippet lambda_event "Creates, updates or deletes AWS Lambda function event mappings."
- name:
	lambda_event:
		source_params: ${1:# Sub-parameters required for event source.}
		lambda_function_arn: ${2:# The name or ARN of the lambda function.}
		alias: ${3:# Name of the function alias. Mutually exclusive with C(version).}
		state: ${4:#present|absent}
		aws_secret_key: ${5:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${6:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		event_source: ${7:#stream}
		security_token: ${8:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		version: ${9:# Version of the Lambda function. Mutually exclusive with C(alias).}
		profile: ${10:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${12:#yes|no}
$0
endsnippet

snippet lambda_facts "Gathers AWS Lambda function details as Ansible facts"
- name:
	lambda_facts:
		query: ${1:aliases|#all|config|mappings|policy|versions}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		event_source_arn: ${6:# For query type 'mappings', this is the Amazon Resource Name (ARN) of the Amazon Kinesis or DynamoDB stream.}
		ec2_url: ${7:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${8:#yes|no}
		function_name: ${9:# The name of the lambda function for which facts are requested.}
$0
endsnippet

snippet rds "create, delete, or modify an Amazon rds instance"
- name:
	rds:
		command: ${1:create|replicate|delete|facts|modify|promote|snapshot|reboot|restore}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		db_engine: ${3:mariadb|MySQL|oracle-se1|oracle-se|oracle-ee|sqlserver-ee|sqlserver-se|sqlserver-ex|sqlserver-web|postgres|aurora}
		iops: ${4:# Specifies the number of IOPS for the instance.  Used only when command=create or command=modify. Must be an integer greater than 1000.}
		backup_window: ${5:# Backup window in format of hh24:mi-hh24:mi.  If not specified then a random backup window is assigned. Used only when command=create or command=modify.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		backup_retention: ${7:# Number of days backups are retained.  Set to 0 to disable backups.  Default is 1 day.  Valid range: 0-35. Used only when command=create or command=modify.}
		port: ${8:3306 for mysql, 1521 for Oracle, 1433 for SQL Server, 5432 for PostgreSQL.}
		security_groups: ${9:# Comma separated list of one or more security groups.  Used only when command=create or command=modify.}
		size: ${10:# Size in gigabytes of the initial storage for the DB instance. Used only when command=create or command=modify.}
		aws_secret_key: ${11:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		subnet: ${12:# VPC subnet group.  If specified then a VPC instance is created. Used only when command=create.}
		vpc_security_groups: ${13:# Comma separated list of one or more vpc security group ids. Also requires `subnet` to be specified. Used only when command=create or command=modify.}
		upgrade: ${14:yes|no}
		zone: ${15:# availability zone in which to launch the instance. Used only when command=create, command=replicate or command=restore.}
		instance_type: ${16:# The instance type of the database.  Must be specified when command=create. Optional when command=replicate, command=modify or command=restore. If not specified then the replica inherits the same instance type as the source instance.}
		source_instance: ${17:# Name of the database to replicate. Used only when command=replicate.}
		parameter_group: ${18:# Name of the DB parameter group to associate with this instance.  If omitted then the RDS default DBParameterGroup will be used. Used only when command=create or command=modify.}
		multi_zone: ${19:yes|no}
		new_instance_name: ${20:# Name to rename an instance to. Used only when command=modify.}
		username: ${21:# Master database username. Used only when command=create.}
		tags: ${22:# tags dict to apply to a resource. Used with command=create, command=replicate, command=restore. Requires boto >= 2.26.0}
		db_name: ${23:# Name of a database to create within the instance.  If not specified then no database is created. Used only when command=create.}
		license_model: ${24:license-included|bring-your-own-license|general-public-license|postgresql-license}
		password: ${25:# Password for the master database username. Used only when command=create or command=modify.}
		apply_immediately: ${26:yes|no}
		wait: ${27:yes|#no}
		aws_access_key: ${28:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${29:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		character_set_name: ${30:# Associate the DB instance with a specified character set. Used with command=create.}
		validate_certs: ${31:#yes|no}
		region: ${32:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		option_group: ${33:# The name of the option group to use.  If not specified then the default option group is used. Used only when command=create.}
		engine_version: ${34:# Version number of the database engine to use. Used only when command=create. If not specified then the current Amazon RDS default engine version is used.}
		instance_name: ${35:# Database instance identifier. Required except when using command=facts or command=delete on just a snapshot}
		force_failover: ${36:yes|#no}
		wait_timeout: ${37:300}
		snapshot: ${38:# Name of snapshot to take. When command=delete, if no snapshot name is provided then no snapshot is taken. If used with command=delete with no instance_name, the snapshot is deleted. Used with command=facts, command=delete or command=snapshot.}
		publicly_accessible: ${39:# explicitly set whether the resource should be publicly accessible or not. Used with command=create, command=replicate. Requires boto >= 2.26.0}
		maint_window: ${40:# Maintenance window in format of ddd:hh24:mi-ddd:hh24:mi.  (Example: Mon:22:00-Mon:23:15) If not specified then a random maintenance window is assigned. Used only when command=create or command=modify.}
$0
endsnippet

snippet rds_param_group "manage RDS parameter groups"
- name:
	rds_param_group:
		name: ${1:# Database parameter group identifier.}
		state: ${2:#present|absent}
		engine: ${3:aurora5.6|mariadb10.0|mariadb10.1|mysql5.1|mysql5.5|mysql5.6|mysql5.7|oracle-ee-11.2|oracle-ee-12.1|oracle-se-11.2|oracle-se-12.1|oracle-se1-11.2|oracle-se1-12.1|postgres9.3|postgres9.4|postgres9.5|postgres9.6|sqlserver-ee-10.5'|sqlserver-ee-11.0|sqlserver-ex-10.5|sqlserver-ex-11.0|sqlserver-ex-12.0|sqlserver-se-10.5|sqlserver-se-11.0|sqlserver-se-12.0|sqlserver-web-10.5|sqlserver-web-11.0|sqlserver-web-12.0}
		aws_secret_key: ${4:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		immediate: ${8:# Whether to apply the changes immediately, or after the next reboot of any associated instances.}
		params: ${9:# Map of parameter names and values. Numeric values may be represented as K for kilo (1024), M for mega (1024^2), G for giga (1024^3), or T for tera (1024^4), and these values will be expanded into the appropriate number before being set in the parameter group.}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		profile: ${11:# Uses a boto profile. Only works with boto >= 2.24.0.}
		validate_certs: ${12:#yes|no}
		description: ${13:# Database parameter group description. Only set when a new group is added.}
$0
endsnippet

snippet rds_subnet_group "manage RDS database subnet groups"
- name:
	rds_subnet_group:
		name: ${1:# Database subnet group identifier.}
		state: ${2:#present|absent}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		subnets: ${4:# List of subnet IDs that make up the database subnet group.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		profile: ${8:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${10:#yes|no}
		description: ${11:# Database subnet group description. Only set when a new group is added.}
$0
endsnippet

snippet redshift "create, delete, or modify an Amazon Redshift instance"
- name:
	redshift:
		command: ${1:create|facts|delete|modify}
		identifier: ${2:# Redshift cluster identifier.}
		cluster_parameter_group_name: ${3:# name of the cluster parameter group}
		username: ${4:# Master database username. Used only when command=create.}
		new_cluster_identifier: ${5:# Only used when command=modify.}
		number_of_nodes: ${6:# Number of nodes. Only used when cluster_type=multi-node.}
		availability_zone: ${7:# availability zone in which to launch cluster}
		encrypted: ${8:no}
		node_type: ${9:ds1.xlarge|ds1.8xlarge|ds2.xlarge|ds2.8xlarge|dc1.large|dc1.8xlarge|dw1.xlarge|dw1.8xlarge|dw2.large|dw2.8xlarge}
		db_name: ${10:# Name of the database.}
		publicly_accessible: ${11:no}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		password: ${13:# Master database password. Used only when command=create.}
		port: ${14:# which port the cluster is listining}
		wait: ${15:yes|#no}
		aws_secret_key: ${16:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${17:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${18:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		allow_version_upgrade: ${19:yes}
		cluster_type: ${20:multi-node|#single-node}
		elastic_ip: ${21:# if the cluster has an elastic IP or not}
		cluster_subnet_group_name: ${22:# which subnet to place the cluster}
		profile: ${23:# Uses a boto profile. Only works with boto >= 2.24.0.}
		validate_certs: ${24:#yes|no}
		wait_timeout: ${25:300}
		cluster_security_groups: ${26:# in which security group the cluster belongs}
		automated_snapshot_retention_period: ${27:# period when the snapshot take place}
		cluster_version: ${28:1.0}
		preferred_maintenance_window: ${29:# maintenance window}
		vpc_security_group_ids: ${30:# VPC security group}
$0
endsnippet

snippet redshift_subnet_group "mange Redshift cluster subnet groups"
- name:
	redshift_subnet_group:
		group_name: ${1:# Cluster subnet group name.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		ec2_url: ${6:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		state: ${7:#present|absent}
		group_subnets: ${8:# List of subnet IDs that make up the cluster subnet group.}
		group_description: ${9:# Database subnet group description.}
		validate_certs: ${10:#yes|no}
$0
endsnippet

snippet route53 "add or delete entries in Amazons Route53 DNS service"
- name:
	route53:
		zone: ${1:# The DNS zone to modify}
		record: ${2:# The full DNS record to create or delete}
		command: ${3:get|create|delete}
		type: ${4:A|CNAME|MX|AAAA|TXT|PTR|SRV|SPF|NS|SOA}
		profile: ${5:# Uses a boto profile. Only works with boto >= 2.24.0.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		health_check: ${7:# Health check to associate with this record}
		weight: ${8:# Weighted resource record sets only. Among resource record sets that have the same combination of DNS name and type, a value that determines what portion of traffic for the current resource record set is routed to the associated location.}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		hosted_zone_id: ${10:# The Hosted Zone ID of the DNS zone to modify}
		wait_timeout: ${11:300}
		ttl: ${12:3600 (one hour)}
		overwrite: ${13:# Whether an existing record should be overwritten on create if values do not match}
		wait: ${14:no}
		aws_secret_key: ${15:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${16:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		alias_hosted_zone_id: ${17:# The hosted zone identifier.}
		validate_certs: ${18:#yes|no}
		region: ${19:# Latency-based resource record sets only Among resource record sets that have the same combination of DNS name and type, a value that determines which region this should be associated with for the latency-based routing}
		retry_interval: ${20:500}
		value: ${21:# The new value when creating a DNS record.  Multiple comma-spaced values are allowed for non-alias records.  When deleting a record all values for the record must be specified or Route53 will not delete it.}
		alias: ${22:True|False}
		private_zone: ${23:no}
		alias_evaluate_target_health: ${24:no}
		vpc_id: ${25:# When used in conjunction with private_zone: true, this will only modify records in the private hosted zone attached to this VPC.}
		identifier: ${26:# Have to be specified for Weighted, latency-based and failover resource record sets only. An identifier that differentiates among multiple resource record sets that have the same combination of DNS name and type.}
		failover: ${27:# Failover resource record sets only. Whether this is the primary or secondary resource record set. Allowed values are PRIMARY and SECONDARY}
$0
endsnippet

snippet route53_facts "Retrieves route53 details using AWS methods"
- name:
	route53_facts:
		query: ${1:change|checker_ip_range|health_check|hosted_zone|record_sets|reusable_delegation_set}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		start_record_name: ${5:# The first name in the lexicographic ordering of domain names that you want the list_command: record_sets to start listing from}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		resource_id: ${7:# The ID/s of the specified resource/s}
		hosted_zone_method: ${8:details|#list|list_by_name|count|tags}
		dns_name: ${9:# The first name in the lexicographic ordering of domain names that you want the list_command to start listing from}
		health_check_method: ${10:#list|details|status|failure_reason|count|tags}
		delegation_set_id: ${11:# The DNS Zone delegation set ID}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		max_items: ${13:# Maximum number of items to return for various get/list requests}
		hosted_zone_id: ${14:# The Hosted Zone ID of the DNS zone}
		validate_certs: ${15:#yes|no}
		health_check_id: ${16:# The ID of the health check}
		change_id: ${17:# The ID of the change batch request. The value that you specify here is the value that ChangeResourceRecordSets returned in the Id element when you submitted the request.}
		next_marker: ${18:# Some requests such as list_command: hosted_zones will return a maximum number of entries - EG 100. If the number of entries exceeds this maximum another request can be sent using the NextMarker entry from the first response to get the next page of results}
		type: ${19:A|CNAME|MX|AAAA|TXT|PTR|SRV|SPF|NS}
$0
endsnippet

snippet route53_health_check "add or delete health-checks in Amazons Route53 DNS service"
- name:
	route53_health_check:
		request_interval: ${1:10|#30}
		type: ${2:HTTP|HTTPS|HTTP_STR_MATCH|HTTPS_STR_MATCH|TCP}
		state: ${3:present|absent}
		failure_threshold: ${4:1|2|#3|4|5|6|7|8|9|10}
		aws_secret_key: ${5:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${6:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${7:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${8:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${9:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		fqdn: ${11:# Domain name of the endpoint to check. Either this or `ip_address` has to be provided. When both are given the `fqdn` is used in the `Host:` header of the HTTP request.}
		port: ${12:# The port on the endpoint on which you want Amazon Route 53 to perform health checks. Required for TCP checks.}
		validate_certs: ${13:#yes|no}
		resource_path: ${14:# The path that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example the file /docs/route53-health-check.html.}
		ip_address: ${15:# IP address of the end-point to check. Either this or `fqdn` has to be provided.}
		string_match: ${16:# If the check type is HTTP_STR_MATCH or HTTP_STR_MATCH, the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the first 5120 bytes of the response body, Amazon Route 53 considers the resource healthy.}
$0
endsnippet

snippet route53_zone "add or delete Route53 zones"
- name:
	route53_zone:
		zone: ${1:# The DNS zone record (eg: foo.com.)}
		comment: ${2:}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		vpc_region: ${5:# The VPC Region the zone should be a part of (if this is going to be a private zone)}
		region: ${6:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		state: ${7:present|absent}
		profile: ${8:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${9:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		vpc_id: ${10:# The VPC ID the zone should be a part of (if this is going to be a private zone)}
		security_token: ${11:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		validate_certs: ${12:#yes|no}
$0
endsnippet

snippet s3 "manage objects in S3."
- name:
	s3:
		bucket: ${1:# Bucket name.}
		mode: ${2:get|put|delete|create|geturl|getstr|delobj|list}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		permission: ${4:private}
		dest: ${5:# The destination file path when downloading an object/key with a GET operation.}
		object: ${6:# Keyname of the object inside the bucket. Can be used to create "virtual directories", see examples.}
		prefix: ${7:# Limits the response to keys that begin with the specified prefix for list mode}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		marker: ${9:# Specifies the key to start with when using list mode. Object keys are returned in alphabetical order, starting with key after the marker in order.}
		ignore_nonexistent_bucket: ${10:no}
		overwrite: ${11:always}
		headers: ${12:# Custom headers for PUT operation, as a dictionary of 'key=value' and 'key=value,key=value'.}
		aws_secret_key: ${13:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		src: ${14:# The source file path when performing a PUT operation.}
		aws_access_key: ${15:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		encrypt: ${16:no}
		security_token: ${17:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		rgw: ${18:no}
		region: ${19:# AWS region to create the bucket in. If not set then the value of the AWS_REGION and EC2_REGION environment variables are checked, followed by the aws_region and ec2_region settings in the Boto config file.  If none of those are set the region defaults to the S3 Location: US Standard.  Prior to ansible 1.8 this parameter could be specified but had no effect.}
		retries: ${20:0}
		max_keys: ${21:1000}
		version: ${22:# Version ID of the object inside the bucket. Can be used to get a specific version of a file if versioning is enabled in the target bucket.}
		expiration: ${23:600}
		s3_url: ${24:# S3 URL endpoint for usage with Ceph, Eucalypus, fakes3, etc.  Otherwise assumes AWS}
		metadata: ${25:# Metadata for PUT operation, as a dictionary of 'key=value' and 'key=value,key=value'.}
		validate_certs: ${26:#yes|no}
$0
endsnippet

snippet s3_bucket "Manage S3 buckets in AWS, Ceph, Walrus and FakeS3"
- name:
	s3_bucket:
		name: ${1:# Name of the s3 bucket}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		force: ${5:yes|no}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		tags: ${7:# tags dict to apply to bucket}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		ceph: ${9:# Enable API compatibility with Ceph. It takes into account the S3 API subset working with Ceph in order to provide the same module behaviour where possible.}
		state: ${10:#present|absent}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		policy: ${12:# The JSON policy as a string.}
		s3_url: ${13:# S3 URL endpoint for usage with Ceph, Eucalypus, fakes3, etc. Otherwise assumes AWS}
		validate_certs: ${14:#yes|no}
		requester_pays: ${15:yes|no}
		versioning: ${16:yes|no}
$0
endsnippet

snippet s3_lifecycle "Manage s3 bucket lifecycle rules in AWS"
- name:
	s3_lifecycle:
		name: ${1:# Name of the s3 bucket}
		status: ${2:#enabled|disabled}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		transition_days: ${4:# Indicates when, in days, an object transitions to a different storage class. If transition_date is not specified, this parameter is required.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		expiration_date: ${6:# Indicates the lifetime of the objects that are subject to the rule by the date they will expire. The value must be ISO-8601 format, the time must be midnight and a GMT timezone must be specified.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		prefix: ${8:# Prefix identifying one or more objects to which the rule applies.  If no prefix is specified, the rule will apply to the whole bucket.}
		state: ${9:#present|absent}
		storage_class: ${10:#glacier|standard_ia}
		profile: ${11:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		expiration_days: ${13:# Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.}
		aws_access_key: ${14:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		validate_certs: ${15:#yes|no}
		rule_id: ${16:# Unique identifier for the rule. The value cannot be longer than 255 characters. A unique value for the rule will be generated if no value is provided.}
		transition_date: ${17:# Indicates the lifetime of the objects that are subject to the rule by the date they will transition to a different storage class. The value must be ISO-8601 format, the time must be midnight and a GMT timezone must be specified. If transition_days is not specified, this parameter is required.}
$0
endsnippet

snippet s3_logging "Manage logging facility of an s3 bucket in AWS"
- name:
	s3_logging:
		name: ${1:# Name of the s3 bucket.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${5:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${6:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		target_prefix: ${7:}
		target_bucket: ${8:# The bucket to log to. Required when state=present.}
		state: ${9:#present|absent}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${11:#yes|no}
$0
endsnippet

snippet s3_sync "Efficiently upload multiple files to S3"
- name:
	s3_sync:
		file_root: ${1:# File/directory path for synchronization. This is a local path.}
		bucket: ${2:# Bucket name.}
		mode: ${3:#push}
		aws_secret_key: ${4:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${5:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${6:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		file_change_strategy: ${7:force|checksum|#date_size}
		security_token: ${8:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		permission: ${9:|private|public-read|public-read-write|authenticated-read|aws-exec-read|bucket-owner-read|bucket-owner-full-control}
		region: ${10:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		mime_map: ${11:# Dict entry from extension to MIME type. This will override any default/sniffed MIME type. For example C({".txt": "application/text", ".yml": "appication/text"})}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		exclude: ${13:.*}
		include: ${14:*}
		validate_certs: ${15:#yes|no}
		key_prefix: ${16:# In addition to file path, prepend s3 path with this prefix. Module will add slash at end of prefix if necessary.}
$0
endsnippet

snippet s3_website "Configure an s3 bucket as a website"
- name:
	s3_website:
		name: ${1:# Name of the s3 bucket}
		redirect_all_requests: ${2:# Describes the redirect behavior for every request to this s3 bucket website endpoint}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		suffix: ${5:index.html}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		region: ${7:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		error_key: ${8:# The object key name to use when a 4XX class error occurs. To remove an error key, set to None.}
		state: ${9:#present|absent}
		profile: ${10:# Uses a boto profile. Only works with boto >= 2.24.0.}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${12:#yes|no}
$0
endsnippet

snippet sns_topic "Manages AWS SNS topics and subscriptions"
- name:
	sns_topic:
		name: ${1:# The name or ARN of the SNS topic to converge}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${4:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		display_name: ${5:# Display name of the topic}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		subscriptions: ${7:[]}
		delivery_policy: ${8:# Delivery policy to apply to the SNS topic}
		state: ${9:absent|#present}
		ec2_url: ${10:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		policy: ${11:# Policy to apply to the SNS topic}
		purge_subscriptions: ${12:yes}
		validate_certs: ${13:#yes|no}
$0
endsnippet

snippet sqs_queue "Creates or deletes AWS SQS queues."
- name:
	sqs_queue:
		name: ${1:# Name of the queue.}
		aws_secret_key: ${2:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${3:# Uses a boto profile. Only works with boto >= 2.24.0.}
		message_retention_period: ${4:# The message retention period in seconds.}
		delivery_delay: ${5:# The delivery delay in seconds.}
		default_visibility_timeout: ${6:# The default visibility timeout in seconds.}
		validate_certs: ${7:#yes|no}
		region: ${8:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
		aws_access_key: ${9:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		state: ${10:#present|absent}
		maximum_message_size: ${11:# The maximum message size in bytes.}
		ec2_url: ${12:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		policy: ${13:# The json dict policy to attach to queue}
		security_token: ${14:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		redrive_policy: ${15:# json dict with the redrive_policy (see example)}
		receive_message_wait_time: ${16:# The receive message wait time in seconds.}
$0
endsnippet

snippet sts_assume_role "Assume a role using AWS Security Token Service and obtain temporary credentials"
- name:
	sts_assume_role:
		role_arn: ${1:# The Amazon Resource Name (ARN) of the role that the caller is assuming (http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html#Identifiers_ARNs)}
		role_session_name: ${2:# Name of the role's session - will be used by CloudTrail}
		aws_secret_key: ${3:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${4:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${6:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		duration_seconds: ${7:# The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds.}
		validate_certs: ${8:#yes|no}
		mfa_serial_number: ${9:# he identification number of the MFA device that is associated with the user who is making the AssumeRole call.}
		mfa_token: ${10:# The value provided by the MFA device, if the trust policy of the role being assumed requires MFA.}
		ec2_url: ${11:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		policy: ${12:# Supplemental policy to use in addition to assumed role's policies.}
		external_id: ${13:# A unique identifier that is used by third parties to assume a role in their customers' accounts.}
		region: ${14:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
$0
endsnippet

snippet sts_session_token "Obtain a session token from the AWS Security Token Service"
- name:
	sts_session_token:
		aws_secret_key: ${1:# AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.}
		profile: ${2:# Uses a boto profile. Only works with boto >= 2.24.0.}
		aws_access_key: ${3:# AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.}
		security_token: ${4:# AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.}
		duration_seconds: ${5:# The duration, in seconds, of the session token. See http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html#API_GetSessionToken_RequestParameters for acceptable and default values.}
		mfa_serial_number: ${6:# The identification number of the MFA device that is associated with the user who is making the GetSessionToken call.}
		mfa_token: ${7:# The value provided by the MFA device, if the trust policy of the user requires MFA.}
		ec2_url: ${8:# Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.}
		validate_certs: ${9:#yes|no}
		region: ${10:# The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)}
$0
endsnippet

snippet atomic_host "Manage the atomic host platform"
- name:
	atomic_host:
		revision: ${1:latest}
$0
endsnippet

snippet atomic_image "Manage the container images on the atomic host platform"
- name:
	atomic_image:
		name: ${1:# Name of the container image}
		started: ${2:yes|no}
		state: ${3:present|absent|#latest}
$0
endsnippet

snippet azure "create or terminate a virtual machine in azure"
- name:
	azure:
		image: ${1:# system image for creating the virtual machine (e.g., b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu_DAILY_BUILD-precise-12_04_3-LTS-amd64-server-20131205-en-us-30GB)}
		storage_account: ${2:# the azure storage account in which to store the data disks.}
		name: ${3:# name of the virtual machine and associated cloud service.}
		location: ${4:# the azure location to use (e.g. 'East US')}
		role_size: ${5:Small}
		virtual_network_name: ${6:# Name of virtual network.}
		wait_timeout_redirects: ${7:300}
		wait_timeout: ${8:600}
		user: ${9:# the unix username for the new virtual machine.}
		auto_updates: ${10:yes|#no}
		password: ${11:# the unix password for the new virtual machine.}
		os_type: ${12:windows|#linux}
		wait: ${13:yes|#no}
		management_cert_path: ${14:# path to an azure management certificate associated with the subscription id. Overrides the AZURE_CERT_PATH environment variable.}
		hostname: ${15:# hostname to write /etc/hostname. Defaults to <name>.cloudapp.net.}
		ssh_cert_path: ${16:# path to an X509 certificate containing the public ssh key to install in the virtual machine. See http://www.windowsazure.com/en-us/manage/linux/tutorials/intro-to-linux/ for more details.}
		state: ${17:present}
		subscription_id: ${18:# azure subscription id. Overrides the AZURE_SUBSCRIPTION_ID environment variable.}
		endpoints: ${19:22}
		enable_winrm: ${20:#yes|no}
$0
endsnippet

snippet azure_rm_deployment "Create or destroy Azure Resource Manager template deployments"
- name:
	azure_rm_deployment:
		resource_group_name: ${1:# The resource group name to use or create to host the deployed template}
		profile: ${2:# Security profile found in ~/.azure/credentials file.}
		parameters: ${3:# A hash of all the required template variables for the deployment template. This parameter is mutually exclusive with 'parameters_link'. Either one of them is required if "state" parameter is "present".}
		deployment_name: ${4:ansible-arm}
		wait_for_deployment_polling_period: ${5:10}
		ad_user: ${6:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		wait_for_deployment_completion: ${7:yes|no}
		template_link: ${8:# Uri of file containing the template body. This parameter is mutually exclusive with 'template'. Either one of them is required if "state" parameter is "present".}
		secret: ${9:# Azure client secret. Use when authenticating with a Service Principal.}
		state: ${10:#present|absent}
		client_id: ${11:# Azure client ID. Use when authenticating with a Service Principal.}
		location: ${12:westus}
		template: ${13:# A hash containing the templates inline. This parameter is mutually exclusive with 'template_link'. Either one of them is required if "state" parameter is "present".}
		parameters_link: ${14:# Uri of file containing the parameters body. This parameter is mutually exclusive with 'parameters'. Either one of them is required if "state" parameter is "present".}
		subscription_id: ${15:# Your Azure subscription Id.}
		password: ${16:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		deployment_mode: ${17:complete|#incremental}
		tenant: ${18:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_networkinterface "Manage Azure network interfaces."
- name:
	azure_rm_networkinterface:
		resource_group: ${1:# Name of a resource group where the network interface exists or will be created.}
		name: ${2:# Name of the network interface.}
		profile: ${3:# Security profile found in ~/.azure/credentials file.}
		open_ports: ${4:# When a default security group is created for a Linux host a rule will be added allowing inbound TCP connections to the default SSH port 22, and for a Windows host rules will be added allowing inbound access to RDP ports 3389 and 5986. Override the default ports by providing a list of open ports.}
		virtual_network_name: ${5:# Name of an existing virtual network with which the network interface will be associated. Required when creating a network interface.}
		public_ip_allocation_method: ${6:#Dynamic|Static}
		security_group_name: ${7:# Name of an existing security group with which to associate the network interface. If not provided, a default security group will be created.}
		public_ip: ${8:yes}
		private_ip_allocation_method: ${9:#Dynamic|Static}
		client_id: ${10:# Azure client ID. Use when authenticating with a Service Principal.}
		password: ${11:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		subscription_id: ${12:# Your Azure subscription Id.}
		tenant: ${13:# Azure tenant ID. Use when authenticating with a Service Principal.}
		public_ip_address_name: ${14:# Name of an existing public IP address object to associate with the security group.}
		append_tags: ${15:yes}
		ad_user: ${16:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		state: ${17:absent|#present}
		secret: ${18:# Azure client secret. Use when authenticating with a Service Principal.}
		tags: ${19:# Dictionary of string:string pairs to assign as metadata to the object. Metadata tags on the object will be updated with any provided values. To remove tags set append_tags option to false.
}
		subnet_name: ${20:# Name of an existing subnet within the specified virtual network. Required when creating a network interface}
		location: ${21:resource_group location}
		private_ip_address: ${22:# Valid IPv4 address that falls within the specified subnet.}
		os_type: ${23:Windows|#Linux}
$0
endsnippet

snippet azure_rm_networkinterface_facts "Get network interface facts."
- name:
	azure_rm_networkinterface_facts:
		profile: ${1:# Security profile found in ~/.azure/credentials file.}
		name: ${2:# Only show results for a specific network interface.}
		resource_group: ${3:# Name of the resource group containing the network interface(s). Required when searching by name.}
		tags: ${4:# Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.}
		ad_user: ${5:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${6:# Azure client secret. Use when authenticating with a Service Principal.}
		client_id: ${7:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${8:# Your Azure subscription Id.}
		password: ${9:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${10:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_publicipaddress "Manage Azure Public IP Addresses."
- name:
	azure_rm_publicipaddress:
		name: ${1:# Name of the Public IP.}
		resource_group: ${2:# Name of resource group with which the Public IP is associated.}
		profile: ${3:# Security profile found in ~/.azure/credentials file.}
		tags: ${4:# Dictionary of string:string pairs to assign as metadata to the object. Metadata tags on the object will be updated with any provided values. To remove tags set append_tags option to false.
}
		append_tags: ${5:yes}
		ad_user: ${6:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${7:# Azure client secret. Use when authenticating with a Service Principal.}
		state: ${8:absent|#present}
		domain_name_label: ${9:# The customizable portion of the FQDN assigned to public IP address. This is an explicit setting. If no value is provided, any existing value will be removed on an existing public IP.}
		location: ${10:resource_group location}
		client_id: ${11:# Azure client ID. Use when authenticating with a Service Principal.}
		allocation_method: ${12:#Dynamic|Static}
		subscription_id: ${13:# Your Azure subscription Id.}
		password: ${14:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${15:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_publicipaddress_facts "Get public IP facts."
- name:
	azure_rm_publicipaddress_facts:
		profile: ${1:# Security profile found in ~/.azure/credentials file.}
		name: ${2:# Only show results for a specific Public IP.}
		resource_group: ${3:# Limit results by resource group. Required when using name parameter.}
		tags: ${4:# Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.}
		ad_user: ${5:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${6:# Azure client secret. Use when authenticating with a Service Principal.}
		client_id: ${7:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${8:# Your Azure subscription Id.}
		password: ${9:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${10:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_resourcegroup "Manage Azure resource groups."
- name:
	azure_rm_resourcegroup:
		name: ${1:# Name of the resource group.}
		profile: ${2:# Security profile found in ~/.azure/credentials file.}
		force: ${3:no}
		tags: ${4:# Dictionary of string:string pairs to assign as metadata to the object. Metadata tags on the object will be updated with any provided values. To remove tags set append_tags option to false.
}
		append_tags: ${5:yes}
		ad_user: ${6:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${7:# Azure client secret. Use when authenticating with a Service Principal.}
		state: ${8:absent|#present}
		location: ${9:# Azure location for the resource group. Required when creating a new resource group. Cannot be changed once resource group is created.}
		client_id: ${10:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${11:# Your Azure subscription Id.}
		password: ${12:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${13:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_resourcegroup_facts "Get resource group facts."
- name:
	azure_rm_resourcegroup_facts:
		profile: ${1:# Security profile found in ~/.azure/credentials file.}
		name: ${2:# Limit results to a specific resource group.}
		tags: ${3:# Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.}
		ad_user: ${4:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${5:# Azure client secret. Use when authenticating with a Service Principal.}
		client_id: ${6:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${7:# Your Azure subscription Id.}
		password: ${8:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${9:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_securitygroup "Manage Azure network security groups."
- name:
	azure_rm_securitygroup:
		resource_group: ${1:# Name of the resource group the security group belongs to.}
		profile: ${2:# Security profile found in ~/.azure/credentials file.}
		purge_rules: ${3:no}
		tags: ${4:# Dictionary of string:string pairs to assign as metadata to the object. Metadata tags on the object will be updated with any provided values. To remove tags set append_tags option to false.
}
		rules: ${5:# Set of rules shaping traffic flow to or from a subnet or NIC. Each rule is a dictionary.}
		append_tags: ${6:yes}
		ad_user: ${7:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${8:# Azure client secret. Use when authenticating with a Service Principal.}
		default_rules: ${9:# The set of default rules automatically added to a security group at creation. In general default rules will not be modified. Modify rules to shape the flow of traffic to or from a subnet or NIC. See rules below for the makeup of a rule dict.}
		purge_default_rules: ${10:no}
		state: ${11:absent|#present}
		location: ${12:resource_group location}
		client_id: ${13:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${14:# Your Azure subscription Id.}
		password: ${15:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${16:# Azure tenant ID. Use when authenticating with a Service Principal.}
		name: ${17:# Name of the security group to operate on.}
$0
endsnippet

snippet azure_rm_securitygroup_facts "Get security group facts."
- name:
	azure_rm_securitygroup_facts:
		resource_group: ${1:# Name of the resource group to use.}
		profile: ${2:# Security profile found in ~/.azure/credentials file.}
		name: ${3:# Only show results for a specific security group.}
		tags: ${4:# Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.}
		ad_user: ${5:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${6:# Azure client secret. Use when authenticating with a Service Principal.}
		client_id: ${7:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${8:# Your Azure subscription Id.}
		password: ${9:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${10:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_storageaccount "Manage Azure storage accounts."
- name:
	azure_rm_storageaccount:
		resource_group: ${1:# Name of the resource group to use.}
		profile: ${2:# Security profile found in ~/.azure/credentials file.}
		kind: ${3:#Storage|StorageBlob}
		account_type: ${4:Premium_LRS|Standard_GRS|Standard_LRS|Standard_RAGRS|Standard_ZRS}
		custom_domain: ${5:# User domain assigned to the storage account. Must be a dictionary with 'name' and 'use_sub_domain' keys where 'name' is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.}
		tags: ${6:# Dictionary of string:string pairs to assign as metadata to the object. Metadata tags on the object will be updated with any provided values. To remove tags set append_tags option to false.
}
		append_tags: ${7:yes}
		ad_user: ${8:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${9:# Azure client secret. Use when authenticating with a Service Principal.}
		state: ${10:absent|#present}
		location: ${11:resource_group location}
		client_id: ${12:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${13:# Your Azure subscription Id.}
		password: ${14:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${15:# Azure tenant ID. Use when authenticating with a Service Principal.}
		name: ${16:# Name of the storage account to update or create.}
$0
endsnippet

snippet azure_rm_storageaccount_facts "Get storage account facts."
- name:
	azure_rm_storageaccount_facts:
		profile: ${1:# Security profile found in ~/.azure/credentials file.}
		name: ${2:# Only show results for a specific account.}
		resource_group: ${3:# Limit results to a resource group. Required when filtering by name.}
		tags: ${4:# Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.}
		ad_user: ${5:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${6:# Azure client secret. Use when authenticating with a Service Principal.}
		client_id: ${7:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${8:# Your Azure subscription Id.}
		password: ${9:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${10:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_storageblob "Manage blob containers and blob objects."
- name:
	azure_rm_storageblob:
		resource_group: ${1:# Name of the resource group to use.}
		container: ${2:# Name of a blob container within the storage account.}
		storage_account_name: ${3:# Name of the storage account to use.}
		profile: ${4:# Security profile found in ~/.azure/credentials file.}
		force: ${5:no}
		client_id: ${6:# Azure client ID. Use when authenticating with a Service Principal.}
		tags: ${7:# Dictionary of string:string pairs to assign as metadata to the object. Metadata tags on the object will be updated with any provided values. To remove tags set append_tags option to false.
}
		dest: ${8:# Destination file path. Use with state 'present' to download a blob.}
		content_language: ${9:# Set the blob content-language header.}
		content_type: ${10:# Set the blob content-type header. For example, 'image/png'.}
		public_access: ${11:container|blob}
		password: ${12:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${13:# Azure tenant ID. Use when authenticating with a Service Principal.}
		src: ${14:# Source file path. Use with state 'present' to upload a blob.}
		append_tags: ${15:yes}
		ad_user: ${16:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${17:# Azure client secret. Use when authenticating with a Service Principal.}
		state: ${18:absent|#present}
		blob: ${19:# Name of a blob object within the container.}
		content_md5: ${20:# Set the blob md5 hash value.}
		subscription_id: ${21:# Your Azure subscription Id.}
		content_disposition: ${22:# Set the blob content-disposition header.}
		cache_control: ${23:# Set the blob cache-control header.}
		content_encoding: ${24:# Set the blob encoding header.}
$0
endsnippet

snippet azure_rm_subnet "Manage Azure subnets."
- name:
	azure_rm_subnet:
		name: ${1:# Name of the subnet.}
		resource_group: ${2:# Name of resource group.}
		virtual_network_name: ${3:# Name of an existing virtual network with which the subnet is or will be associated.}
		state: ${4:absent|#present}
		address_prefix_cidr: ${5:# CIDR defining the IPv4 address space of the subnet. Must be valid within the context of the virtual network.}
		profile: ${6:# Security profile found in ~/.azure/credentials file.}
		ad_user: ${7:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${8:# Azure client secret. Use when authenticating with a Service Principal.}
		security_group_name: ${9:# Name of an existing security group with which to associate the subnet.}
		client_id: ${10:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${11:# Your Azure subscription Id.}
		password: ${12:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${13:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_virtualmachine "Manage Azure virtual machines."
- name:
	azure_rm_virtualmachine:
		resource_group: ${1:# Name of the resource group containing the virtual machine.}
		image: ${2:# A dictionary describing the Marketplace image used to build the VM. Will contain keys: publisher, offer, sku and version. NOTE: set image.version to 'latest' to get the most recent version of a given image.}
		name: ${3:# Name of the virtual machine.}
		profile: ${4:# Security profile found in ~/.azure/credentials file.}
		tags: ${5:# Dictionary of string:string pairs to assign as metadata to the object. Metadata tags on the object will be updated with any provided values. To remove tags set append_tags option to false.
}
		virtual_network_name: ${6:# When creating a virtual machine, if a network interface name is not provided, one will be created. The new network interface will be assigned to the first virtual network found in the resource group. Use this parameter to provide a specific virtual network instead.}
		public_ip_allocation_method: ${7:[Dynamic, #Static}
		open_ports: ${8:# If a network interface is created when creating the VM, a security group will be created as well. For Linux hosts a rule will be added to the security group allowing inbound TCP connections to the default SSH port 22, and for Windows hosts ports 3389 and 5986 will be opened. Override the default open ports by providing a list of ports.}
		ssh_public_keys: ${9:# For os_type Linux provide a list of SSH keys. Each item in the list should be a dictionary where the dictionary contains two keys: path and key_data. Set the path to the default location of the authorized_keys files. On an Enterprise Linux host, for example, the path will be /home/<admin username>/.ssh/authorized_keys. Set key_data to the actual value of the public key.}
		storage_container_name: ${10:vhds}
		client_id: ${11:# Azure client ID. Use when authenticating with a Service Principal.}
		allocated: ${12:yes}
		password: ${13:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		ssh_password_enabled: ${14:yes}
		vm_size: ${15:Standard_D1}
		tenant: ${16:# Azure tenant ID. Use when authenticating with a Service Principal.}
		remove_on_absent: ${17:[u'all']}
		restarted: ${18:no}
		append_tags: ${19:yes}
		ad_user: ${20:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${21:# Azure client secret. Use when authenticating with a Service Principal.}
		admin_username: ${22:# Admin username used to access the host after it is created. Required when creating a VM.}
		subscription_id: ${23:# Your Azure subscription Id.}
		short_hostname: ${24:# Name assigned internally to the host. On a linux VM this is the name returned by the `hostname` command. When creating a virtual machine, short_hostname defaults to name.}
		started: ${25:yes}
		state: ${26:absent|#present}
		subnet_name: ${27:# When creating a virtual machine, if a network interface name is not provided, one will be created. The new network interface will be assigned to the first subnet found in the virtual network. Use this parameter to provide a specific subnet instead.}
		location: ${28:# Valid Azure location. Defaults to location of the resource group.}
		os_disk_caching: ${29:#ReadOnly|ReadWrite}
		network_interface_names: ${30:# List of existing network interface names to add to the VM. If a network interface name is not provided when the VM is created, a default network interface will be created. In order for the module to create a network interface, at least one Virtual Network with one Subnet must exist.}
		os_type: ${31:[Windows, #Linux}
		storage_account_name: ${32:# Name of an existing storage account that supports creation of VHD blobs. If not specified for a new VM, a new storage account named <vm name>01 will be created using storage type 'Standard_LRS'.}
		storage_blob_name: ${33:# Name fo the storage blob used to hold the VM's OS disk image. If no name is provided, defaults to the VM name + '.vhd'. If you provide a name, it must end with '.vhd'}
		admin_password: ${34:# Password for the admin username. Not required if the os_type is Linux and SSH password authentication is disabled by setting ssh_password_enabled to false.}
$0
endsnippet

snippet azure_rm_virtualmachineimage_facts "Get virtual machine image facts."
- name:
	azure_rm_virtualmachineimage_facts:
		location: ${1:# Azure location value (ie. westus, eastus, eastus2, northcentralus, etc.). Supplying only a location value will yield a list of available publishers for the location.}
		sku: ${2:# Image offering SKU. Combine with offer to see a list of available versions.}
		publisher: ${3:# Name of an image publisher. List image offerings associated with a particular publisher.}
		name: ${4:# Only show results for a specific security group.}
		offer: ${5:# Name of an image offering. Combine with sku to see a list of available image versions.}
		ad_user: ${6:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${7:# Azure client secret. Use when authenticating with a Service Principal.}
		version: ${8:# Specific version number of an image.}
		profile: ${9:# Security profile found in ~/.azure/credentials file.}
		client_id: ${10:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${11:# Your Azure subscription Id.}
		password: ${12:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${13:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet azure_rm_virtualnetwork "Manage Azure virtual networks."
- name:
	azure_rm_virtualnetwork:
		name: ${1:# name of the virtual network.}
		resource_group: ${2:# name of resource group.}
		profile: ${3:# Security profile found in ~/.azure/credentials file.}
		dns_servers: ${4:# Custom list of DNS servers. Maximum length of two. The first server in the list will be treated as the Primary server. This is an explicit list. Existing DNS servers will be replaced with the specified list. Use the purge_dns_servers option to remove all custom DNS servers and revert to default Azure servers.}
		tags: ${5:# Dictionary of string:string pairs to assign as metadata to the object. Metadata tags on the object will be updated with any provided values. To remove tags set append_tags option to false.
}
		append_tags: ${6:yes}
		ad_user: ${7:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${8:# Azure client secret. Use when authenticating with a Service Principal.}
		state: ${9:absent|#present}
		address_prefixes_cidr: ${10:# List of IPv4 address ranges where each is formatted using CIDR notation. Required when creating a new virtual network or using purge_address_prefixes.}
		client_id: ${11:# Azure client ID. Use when authenticating with a Service Principal.}
		purge_address_prefixes: ${12:no}
		purge_dns_servers: ${13:no}
		subscription_id: ${14:# Your Azure subscription Id.}
		password: ${15:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${16:# Azure tenant ID. Use when authenticating with a Service Principal.}
		location: ${17:resource_group location}
$0
endsnippet

snippet azure_rm_virtualnetwork_facts "Get virtual network facts."
- name:
	azure_rm_virtualnetwork_facts:
		profile: ${1:# Security profile found in ~/.azure/credentials file.}
		name: ${2:# Only show results for a specific security group.}
		resource_group: ${3:# Limit results by resource group. Required when filtering by name.}
		tags: ${4:# Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.}
		ad_user: ${5:# Active Directory username. Use when authenticating with an Active Directory user rather than service principal.}
		secret: ${6:# Azure client secret. Use when authenticating with a Service Principal.}
		client_id: ${7:# Azure client ID. Use when authenticating with a Service Principal.}
		subscription_id: ${8:# Your Azure subscription Id.}
		password: ${9:# Active Directory user password. Use when authenticating with an Active Directory user rather than service principal.}
		tenant: ${10:# Azure tenant ID. Use when authenticating with a Service Principal.}
$0
endsnippet

snippet clc_aa_policy "Create or Delete Anti Affinity Policies at CenturyLink Cloud."
- name:
	clc_aa_policy:
		location: ${1:# Datacenter in which the policy lives/should live.}
		name: ${2:# The name of the Anti Affinity Policy.}
		state: ${3:#present|absent}
		wait: ${4:#True|False}
$0
endsnippet

snippet clc_alert_policy "Create or Delete Alert Policies at CenturyLink Cloud."
- name:
	clc_alert_policy:
		alias: ${1:# The alias of your CLC Account}
		name: ${2:# The name of the alert policy. This is mutually exclusive with id}
		metric: ${3:cpu|memory|disk}
		alert_recipients: ${4:# A list of recipient email ids to notify the alert. This is required for state 'present'}
		state: ${5:#present|absent}
		threshold: ${6:# The threshold that will trigger the alert when the metric equals or exceeds it. This is required for state 'present' This number represents a percentage and must be a value between 5.0 - 95.0 that is a multiple of 5.0}
		id: ${7:# The alert policy id. This is mutually exclusive with name}
		duration: ${8:# The length of time in minutes that the condition must exceed the threshold. This is required for state 'present'}
$0
endsnippet

snippet clc_blueprint_package "deploys a blue print package on a set of servers in CenturyLink Cloud."
- name:
	clc_blueprint_package:
		server_ids: ${1:# A list of server Ids to deploy the blue print package.}
		package_id: ${2:# The package id of the blue print.}
		package_params: ${3:{}}
		state: ${4:#present}
		wait: ${5:#True|False}
$0
endsnippet

snippet clc_firewall_policy "Create/delete/update firewall policies"
- name:
	clc_firewall_policy:
		location: ${1:# Target datacenter for the firewall policy}
		source_account_alias: ${2:# CLC alias for the source account}
		destination_account_alias: ${3:# CLC alias for the destination account}
		destination: ${4:# The list of destination addresses for traffic on the terminating firewall. This is required when state is 'present'}
		enabled: ${5:#True|False}
		source: ${6:# The list  of source addresses for traffic on the originating firewall. This is required when state is 'present"}
		state: ${7:#present|absent}
		firewall_policy_id: ${8:# Id of the firewall policy. This is required to update or delete an existing firewall policy}
		ports: ${9:any|icmp|TCP/123|UDP/123|TCP/123-456|UDP/123-456}
		wait: ${10:#True|False}
$0
endsnippet

snippet clc_group "Create/delete Server Groups at Centurylink Cloud"
- name:
	clc_group:
		name: ${1:# The name of the Server Group}
		state: ${2:#present|absent}
		parent: ${3:# The parent group of the server group. If parent is not provided, it creates the group at top level.}
		wait: ${4:#True|False}
		location: ${5:# Datacenter to create the group in. If location is not provided, the group gets created in the default datacenter associated with the account}
		description: ${6:# A description of the Server Group}
$0
endsnippet

snippet clc_loadbalancer "Create, Delete shared loadbalancers in CenturyLink Cloud."
- name:
	clc_loadbalancer:
		name: ${1:# The name of the loadbalancer}
		alias: ${2:# The alias of your CLC Account}
		location: ${3:# The location of the datacenter where the load balancer resides in}
		status: ${4:#enabled|disabled}
		method: ${5:leastConnection|roundRobin}
		state: ${6:#present|absent|port_absent|nodes_present|nodes_absent}
		nodes: ${7:[]}
		port: ${8:80|443}
		persistence: ${9:standard|sticky}
		description: ${10:# A description for the loadbalancer}
$0
endsnippet

snippet clc_modify_server "modify servers in CenturyLink Cloud."
- name:
	clc_modify_server:
		server_ids: ${1:# A list of server Ids to modify.}
		alert_policy_id: ${2:# The alert policy id to be associated to the server. This is mutually exclusive with 'alert_policy_name'}
		anti_affinity_policy_name: ${3:# The anti affinity policy name to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_id'}
		state: ${4:#present|absent}
		anti_affinity_policy_id: ${5:# The anti affinity policy id to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_name'}
		alert_policy_name: ${6:# The alert policy name to be associated to the server. This is mutually exclusive with 'alert_policy_id'}
		memory: ${7:# Memory (in GB) to set to the server.}
		cpu: ${8:# How many CPUs to update on the server}
		wait: ${9:#True|False}
$0
endsnippet

snippet clc_publicip "Add and Delete public ips on servers in CenturyLink Cloud."
- name:
	clc_publicip:
		server_ids: ${1:# A list of servers to create public ips on.}
		state: ${2:#present|absent}
		protocol: ${3:#TCP|UDP|ICMP}
		ports: ${4:# A list of ports to expose. This is required when state is 'present'}
		wait: ${5:#True|False}
$0
endsnippet

snippet clc_server "Create, Delete, Start and Stop servers in CenturyLink Cloud."
- name:
	clc_server:
		cpu_autoscale_policy_id: ${1:# The autoscale policy to assign to the server.}
		anti_affinity_policy_name: ${2:# The anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_id'.}
		storage_type: ${3:#standard|hyperscale}
		anti_affinity_policy_id: ${4:# The anti-affinity policy to assign to the server. This is mutually exclusive with 'anti_affinity_policy_name'.}
		ttl: ${5:# The time to live for the server in seconds.  The server will be deleted when this time expires.}
		count_group: ${6:# Required when exact_count is specified.  The Server Group use to determine how many severs to deploy.}
		secondary_dns: ${7:# Secondary DNS used by the server.}
		custom_fields: ${8:[]}
		packages: ${9:[]}
		group: ${10:Default Group}
		exact_count: ${11:# Run in idempotent mode.  Will insure that this exact number of servers are running in the provided group, creating and deleting them to reach that count.  Requires count_group to be set.}
		state: ${12:#present|absent|started|stopped}
		location: ${13:# The Datacenter to create servers in.}
		template: ${14:# The template to use for server creation.  Will search for a template if a partial string is provided. This is required when state is 'present'}
		memory: ${15:1}
		server_ids: ${16:[]}
		type: ${17:#standard|hyperscale|bareMetal}
		managed_os: ${18:True|#False}
		additional_disks: ${19:[]}
		description: ${20:# The description to set for the server.}
		add_public_ip: ${21:#False|True}
		alert_policy_id: ${22:# The alert policy to assign to the server. This is mutually exclusive with 'alert_policy_name'.}
		alert_policy_name: ${23:# The alert policy to assign to the server. This is mutually exclusive with 'alert_policy_id'.}
		password: ${24:# Password for the administrator / root user}
		ip_address: ${25:# The IP Address for the server. One is assigned if not provided.}
		public_ip_protocol: ${26:#TCP|UDP|ICMP}
		wait: ${27:#True|False}
		count: ${28:1}
		name: ${29:# A 1 to 6 character identifier to use for the server. This is required when state is 'present'}
		network_id: ${30:# The network UUID on which to create servers.}
		primary_dns: ${31:# Primary DNS used by the server.}
		alias: ${32:# The account alias to provision the servers under.}
		public_ip_ports: ${33:[]}
		source_server_password: ${34:# The password for the source server if a clone is specified.}
		os_type: ${35:redHat6_64Bit|centOS6_64Bit|windows2012R2Standard_64Bit|ubuntu14_64Bit}
		configuration_id: ${36:# Only required for bare metal servers. Specifies the identifier for the specific configuration type of bare metal server to deploy.}
		cpu: ${37:1}
$0
endsnippet

snippet clc_server_snapshot "Create, Delete and Restore server snapshots in CenturyLink Cloud."
- name:
	clc_server_snapshot:
		server_ids: ${1:# The list of CLC server Ids.}
		expiration_days: ${2:7}
		state: ${3:#present|absent|restore}
		wait: ${4:#True|False}
$0
endsnippet

snippet cloudscale_server "Manages servers on the cloudscale.ch IaaS service"
- name:
	cloudscale_server:
		volume_size_gb: ${1:10}
		uuid: ${2:# UUID of the server}
		name: ${3:# Name of the Server}
		use_public_network: ${4:yes}
		state: ${5:#running|stopped|absent}
		image: ${6:# Image used to create the server}
		use_ipv6: ${7:yes}
		user_data: ${8:# Cloud-init configuration (cloud-config) data to use for the server.}
		anti_affinity_with: ${9:# UUID of another server to create an anti-affinity group with}
		use_private_network: ${10:no}
		bulk_volume_size_gb: ${11:null (no bulk storage volume)}
		api_token: ${12:# cloudscale.ch API token.}
		flavor: ${13:# Flavor of the server}
		ssh_keys: ${14:# List of SSH public keys}
$0
endsnippet

snippet cs_account "Manages accounts on Apache CloudStack based clouds."
- name:
	cs_account:
		name: ${1:# Name of account.}
		username: ${2:# Username of the user to be created if account did not exist.}
		first_name: ${3:# First name of the user to be created if account did not exist.}
		last_name: ${4:# Last name of the user to be created if account did not exist.}
		account_type: ${5:#user|root_admin|domain_admin}
		api_http_method: ${6:#get|post}
		password: ${7:# Password of the user to be created if account did not exist.}
		api_timeout: ${8:10}
		domain: ${9:ROOT}
		api_region: ${10:cloudstack}
		api_key: ${11:# API key of the CloudStack API.}
		state: ${12:#present|absent|enabled|disabled|locked|unlocked}
		api_secret: ${13:# Secret key of the CloudStack API.}
		timezone: ${14:# Timezone of the user to be created if account did not exist.}
		poll_async: ${15:yes}
		network_domain: ${16:# Network domain of the account.}
		email: ${17:# Email of the user to be created if account did not exist.}
		api_url: ${18:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_affinitygroup "Manages affinity groups on Apache CloudStack based clouds."
- name:
	cs_affinitygroup:
		name: ${1:# Name of the affinity group.}
		account: ${2:# Account the affinity group is related to.}
		poll_async: ${3:yes}
		api_http_method: ${4:#get|post}
		api_secret: ${5:# Secret key of the CloudStack API.}
		api_timeout: ${6:10}
		affinty_type: ${7:# Type of the affinity group. If not specified, first found affinity type is used.}
		domain: ${8:# Domain the affinity group is related to.}
		api_region: ${9:cloudstack}
		project: ${10:# Name of the project the affinity group is related to.}
		state: ${11:#present|absent}
		api_url: ${12:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		api_key: ${13:# API key of the CloudStack API.}
		description: ${14:# Description of the affinity group.}
$0
endsnippet

snippet cs_cluster "Manages host clusters on Apache CloudStack based clouds."
- name:
	cs_cluster:
		name: ${1:# name of the cluster.}
		username: ${2:# Username for the cluster.}
		guest_vswitch_type: ${3:vmwaresvs|vmwaredvs}
		ovm3_cluster: ${4:# Ovm3 native OCFS2 clustering enabled for cluster.}
		ovm3_pool: ${5:# Ovm3 native pooling enabled for cluster.}
		api_http_method: ${6:#get|post}
		api_secret: ${7:# Secret key of the CloudStack API.}
		api_timeout: ${8:10}
		api_region: ${9:cloudstack}
		api_url: ${10:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		pod: ${11:# Name of the pod in which the cluster belongs to.}
		hypervisor: ${12:KVM|VMware|BareMetal|XenServer|LXC|HyperV|UCS|OVM}
		guest_vswitch_name: ${13:# Name of virtual switch used for guest traffic in the cluster.}
		vms_username: ${14:# Username for the VSM associated with this cluster.}
		password: ${15:# Password for the cluster.}
		public_vswitch_type: ${16:vmwaresvs|vmwaredvs}
		zone: ${17:# Name of the zone in which the cluster belongs to.}
		url: ${18:# URL for the cluster}
		cluster_type: ${19:CloudManaged|ExternalManaged}
		ovm3_vip: ${20:# Ovm3 vip to use for pool (and cluster).}
		vms_ip_address: ${21:# IP address of the VSM associated with this cluster.}
		state: ${22:#present|absent|disabled|enabled}
		public_vswitch_name: ${23:# Name of virtual switch used for public traffic in the cluster.}
		api_key: ${24:# API key of the CloudStack API.}
		vms_password: ${25:# Password for the VSM associated with this cluster.}
$0
endsnippet

snippet cs_configuration "Manages configuration on Apache CloudStack based clouds."
- name:
	cs_configuration:
		name: ${1:# Name of the configuration.}
		value: ${2:# Value of the configuration.}
		domain: ${3:ROOT}
		zone: ${4:# Ensure the value for corresponding zone.}
		api_secret: ${5:# Secret key of the CloudStack API.}
		api_timeout: ${6:10}
		storage: ${7:# Ensure the value for corresponding storage pool.}
		account: ${8:# Ensure the value for corresponding account.}
		api_region: ${9:cloudstack}
		cluster: ${10:# Ensure the value for corresponding cluster.}
		api_http_method: ${11:#get|post}
		api_key: ${12:# API key of the CloudStack API.}
		api_url: ${13:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_domain "Manages domains on Apache CloudStack based clouds."
- name:
	cs_domain:
		path: ${1:# Path of the domain.}
		api_key: ${2:# API key of the CloudStack API.}
		poll_async: ${3:yes}
		api_url: ${4:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		api_http_method: ${5:#get|post}
		api_secret: ${6:# Secret key of the CloudStack API.}
		api_timeout: ${7:10}
		clean_up: ${8:no}
		api_region: ${9:cloudstack}
		state: ${10:#present|absent}
		network_domain: ${11:# Network domain for networks in the domain.}
$0
endsnippet

snippet cs_facts "Gather facts on instances of Apache CloudStack based clouds."
- name:
	cs_facts:
		filter: ${1:cloudstack_service_offering|cloudstack_availability_zone|cloudstack_public_hostname|cloudstack_public_ipv4|cloudstack_local_hostname|cloudstack_local_ipv4|cloudstack_instance_id|cloudstack_user_data}
$0
endsnippet

snippet cs_firewall "Manages firewall rules on Apache CloudStack based clouds."
- name:
	cs_firewall:
		icmp_code: ${1:# Error code for this icmp message. Considered if C(protocol=icmp).}
		domain: ${2:# Domain the firewall rule is related to.}
		api_key: ${3:# API key of the CloudStack API.}
		protocol: ${4:#tcp|udp|icmp|all}
		network: ${5:# Network the egress rule is related to.}
		zone: ${6:# Name of the zone in which the virtual machine is in.}
		type: ${7:#ingress|egress}
		end_port: ${8:# End port for this rule. Considered if C(protocol=tcp) or C(protocol=udp). If not specified, equal C(start_port).}
		account: ${9:# Account the firewall rule is related to.}
		api_region: ${10:cloudstack}
		project: ${11:# Name of the project the firewall rule is related to.}
		state: ${12:#present|absent}
		api_timeout: ${13:10}
		api_http_method: ${14:#get|post}
		api_secret: ${15:# Secret key of the CloudStack API.}
		start_port: ${16:# Start port for this rule. Considered if C(protocol=tcp) or C(protocol=udp).}
		poll_async: ${17:yes}
		cidr: ${18:0.0.0.0/0}
		icmp_type: ${19:# Type of the icmp message being sent. Considered if C(protocol=icmp).}
		ip_address: ${20:# Public IP address the ingress rule is assigned to.}
		api_url: ${21:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_host "Manages hosts on Apache CloudStack based clouds."
- name:
	cs_host:
		name: ${1:# Name of the host.}
		username: ${2:# Username for the host.}
		api_key: ${3:# API key of the CloudStack API.}
		zone: ${4:# Name of the zone in which the host should be deployed.}
		host_tags: ${5:# Tags of the host.}
		hypervisor: ${6:KVM|VMware|BareMetal|XenServer|LXC|HyperV|UCS|OVM|Simulator}
		api_timeout: ${7:10}
		api_region: ${8:cloudstack}
		cluster: ${9:# Name of the cluster.}
		state: ${10:#present|absent}
		api_http_method: ${11:#get|post}
		api_secret: ${12:# Secret key of the CloudStack API.}
		pod: ${13:# Name of the pod.}
		password: ${14:# Password for the host.}
		allocation_state: ${15:enabled|disabled}
		api_url: ${16:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_instance "Manages instances and virtual machines on Apache CloudStack based clouds."
- name:
	cs_instance:
		domain: ${1:# Domain the instance is related to.}
		api_timeout: ${2:10}
		force: ${3:no}
		disk_offering: ${4:# Name of the disk offering to be used.}
		api_http_method: ${5:#get|post}
		tags: ${6:# List of tags. Tags are a list of dictionaries having keys C(key) and C(value).}
		api_secret: ${7:# Secret key of the CloudStack API.}
		keyboard: ${8:de|de-ch|es|fi|fr|fr-be|fr-ch|is|it|jp|nl-be|no|pt|uk|us}
		user_data: ${9:# Optional data (ASCII) that can be sent to the instance upon a successful deployment.}
		root_disk_size: ${10:# Root disk size in GByte required if deploying instance with KVM hypervisor and want resize the root disk size at startup (need CloudStack >= 4.4, cloud-initramfs-growroot installed and enabled in the template)}
		ssh_key: ${11:# Name of the SSH key to be deployed on the new instance.}
		cpu_speed: ${12:# The clock speed/shares allocated to the instance, used with custom service offerings}
		ip6_address: ${13:# IPv6 address for default instance's network.}
		service_offering: ${14:# Name or id of the service offering of the new instance.}
		ip_address: ${15:# IPv4 address for default instance's network during creation.}
		networks: ${16:[]}
		security_groups: ${17:# List of security groups the instance to be applied to.}
		display_name: ${18:# Custom display name of the instances.}
		account: ${19:# Account the instance is related to.}
		api_key: ${20:# API key of the CloudStack API.}
		group: ${21:# Group in where the new instance should be in.}
		name: ${22:# Host name of the instance. C(name) can only contain ASCII letters.}
		zone: ${23:# Name of the zone in which the instance should be deployed.}
		hypervisor: ${24:KVM|VMware|BareMetal|XenServer|LXC|HyperV|UCS|OVM}
		ip_to_networks: ${25:# List of mappings in the form {'network': NetworkName, 'ip': 1.2.3.4}}
		disk_size: ${26:# Disk size in GByte required if deploying instance from ISO.}
		project: ${27:# Name of the project the instance to be deployed in.}
		api_url: ${28:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		state: ${29:deployed|started|stopped|restarted|restored|destroyed|expunged|#present|absent}
		api_region: ${30:cloudstack}
		affinity_groups: ${31:[]}
		template: ${32:# Name or id of the template to be used for creating the new instance.}
		memory: ${33:# The memory allocated to the instance, used with custom service offerings}
		iso: ${34:# Name or id of the ISO to be used for creating the new instance.}
		poll_async: ${35:yes}
		template_filter: ${36:featured|self|selfexecutable|sharedexecutable|#executable|community}
		cpu: ${37:# The number of CPUs to allocate to the instance, used with custom service offerings}
$0
endsnippet

snippet cs_instance_facts "Gathering facts from the API of instances from Apache CloudStack based clouds."
- name:
	cs_instance_facts:
		name: ${1:# Name or display name of the instance.}
		account: ${2:# Account the instance is related to.}
		api_http_method: ${3:#get|post}
		api_secret: ${4:# Secret key of the CloudStack API.}
		api_timeout: ${5:10}
		domain: ${6:# Domain the instance is related to.}
		api_region: ${7:cloudstack}
		project: ${8:# Project the instance is related to.}
		api_key: ${9:# API key of the CloudStack API.}
		api_url: ${10:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_instancegroup "Manages instance groups on Apache CloudStack based clouds."
- name:
	cs_instancegroup:
		name: ${1:# Name of the instance group.}
		account: ${2:# Account the instance group is related to.}
		api_http_method: ${3:#get|post}
		api_secret: ${4:# Secret key of the CloudStack API.}
		api_timeout: ${5:10}
		domain: ${6:# Domain the instance group is related to.}
		api_region: ${7:cloudstack}
		project: ${8:# Project the instance group is related to.}
		state: ${9:#present|absent}
		api_key: ${10:# API key of the CloudStack API.}
		api_url: ${11:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_ip_address "Manages public IP address associations on Apache CloudStack based clouds."
- name:
	cs_ip_address:
		account: ${1:# Account the IP address is related to.}
		api_timeout: ${2:10}
		poll_async: ${3:yes}
		network: ${4:# Network the IP address is related to.}
		zone: ${5:# Name of the zone in which the IP address is in.}
		api_secret: ${6:# Secret key of the CloudStack API.}
		api_http_method: ${7:#get|post}
		domain: ${8:# Domain the IP address is related to.}
		api_region: ${9:cloudstack}
		project: ${10:# Name of the project the IP address is related to.}
		vpc: ${11:# VPC the IP address is related to.}
		api_key: ${12:# API key of the CloudStack API.}
		ip_address: ${13:# Public IP address.}
		api_url: ${14:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_iso "Manages ISO images on Apache CloudStack based clouds."
- name:
	cs_iso:
		name: ${1:# Name of the ISO.}
		is_featured: ${2:no}
		api_http_method: ${3:#get|post}
		api_secret: ${4:# Secret key of the CloudStack API.}
		api_timeout: ${5:10}
		iso_filter: ${6:featured|#self|selfexecutable|sharedexecutable|executable|community}
		api_region: ${7:cloudstack}
		domain: ${8:# Domain the ISO is related to.}
		is_public: ${9:no}
		api_url: ${10:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		account: ${11:# Account the ISO is related to.}
		poll_async: ${12:yes}
		zone: ${13:# Name of the zone you wish the ISO to be registered or deleted from. If not specified, first zone found will be used.}
		url: ${14:# URL where the ISO can be downloaded from. Required if C(state) is present.}
		checksum: ${15:no}
		is_dynamically_scalable: ${16:no}
		project: ${17:# Name of the project the ISO to be registered in.}
		bootable: ${18:yes}
		state: ${19:#present|absent}
		is_ready: ${20:no}
		os_type: ${21:# Name of the OS that best represents the OS of this ISO. If the iso is bootable this parameter needs to be passed. Required if C(state) is present.}
		api_key: ${22:# API key of the CloudStack API.}
$0
endsnippet

snippet cs_loadbalancer_rule "Manages load balancer rules on Apache CloudStack based clouds."
- name:
	cs_loadbalancer_rule:
		name: ${1:# The name of the load balancer rule.}
		public_port: ${2:# The public port from where the network traffic will be load balanced from.}
		state: ${3:#present|absent}
		ip_address: ${4:# Public IP address from where the network traffic will be load balanced from.}
		domain: ${5:# Domain the rule is related to.}
		api_key: ${6:# API key of the CloudStack API.}
		protocol: ${7:# The protocol to be used on the load balancer}
		algorithm: ${8:#source|roundrobin|leastconn}
		open_firewall: ${9:no}
		api_timeout: ${10:10}
		account: ${11:# Account the rule is related to.}
		api_region: ${12:cloudstack}
		project: ${13:# Name of the project the load balancer IP address is related to.}
		private_port: ${14:# The private port of the private ip address/virtual machine where the network traffic will be load balanced to.}
		api_http_method: ${15:#get|post}
		api_secret: ${16:# Secret key of the CloudStack API.}
		api_url: ${17:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		cidr: ${18:# CIDR (full notation) to be used for firewall rule if required.}
		zone: ${19:# Name of the zone in which the rule should be created.}
		description: ${20:# The description of the load balancer rule.}
$0
endsnippet

snippet cs_loadbalancer_rule_member "Manages load balancer rule members on Apache CloudStack based clouds."
- name:
	cs_loadbalancer_rule_member:
		name: ${1:# The name of the load balancer rule.}
		vms: ${2:# List of VMs to assign to or remove from the rule.}
		domain: ${3:# Domain the rule is related to.}
		zone: ${4:# Name of the zone in which the rule should be located.}
		api_secret: ${5:# Secret key of the CloudStack API.}
		api_timeout: ${6:10}
		account: ${7:# Account the rule is related to.}
		api_region: ${8:cloudstack}
		project: ${9:# Name of the project the firewall rule is related to.}
		state: ${10:#present|absent}
		api_http_method: ${11:#get|post}
		api_key: ${12:# API key of the CloudStack API.}
		ip_address: ${13:# Public IP address from where the network traffic will be load balanced from.}
		api_url: ${14:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_network "Manages networks on Apache CloudStack based clouds."
- name:
	cs_network:
		name: ${1:# Name (case sensitive) of the network.}
		domain: ${2:# Domain the network is related to.}
		api_timeout: ${3:10}
		end_ipv6: ${4:# The ending IPv6 address of the network belongs to.}
		api_http_method: ${5:#get|post}
		api_secret: ${6:# Secret key of the CloudStack API.}
		vlan: ${7:# The ID or VID of the network.}
		clean_up: ${8:no}
		netmask: ${9:# The netmask of the network.}
		network_offering: ${10:# Name of the offering for the network.}
		vpc: ${11:# Name of the VPC of the network.}
		start_ip: ${12:# The beginning IPv4 address of the network belongs to.}
		gateway: ${13:# The gateway of the network.}
		gateway_ipv6: ${14:# The gateway of the IPv6 network.}
		api_url: ${15:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		display_text: ${16:# Display text of the network.}
		isolated_pvlan: ${17:# The isolated private VLAN for this network.}
		account: ${18:# Account the network is related to.}
		acl_type: ${19:#account|domain}
		poll_async: ${20:yes}
		zone: ${21:# Name of the zone in which the network should be deployed.}
		api_region: ${22:cloudstack}
		start_ipv6: ${23:# The beginning IPv6 address of the network belongs to.}
		cidr_ipv6: ${24:# CIDR of IPv6 network, must be at least /64.}
		project: ${25:# Name of the project the network to be deployed in.}
		api_key: ${26:# API key of the CloudStack API.}
		state: ${27:#present|absent|restarted}
		end_ip: ${28:# The ending IPv4 address of the network belongs to.}
		network_domain: ${29:# The network domain.}
$0
endsnippet

snippet cs_nic "Manages NICs and secondary IPs of an instance on Apache CloudStack based clouds."
- name:
	cs_nic:
		vm: ${1:# Name of instance.}
		vm_guest_ip: ${2:# Secondary IP address to be added to the instance nic.}
		account: ${3:# Account the instance is related to.}
		api_timeout: ${4:10}
		poll_async: ${5:yes}
		network: ${6:# Name of the network.}
		zone: ${7:# Name of the zone in which the instance is deployed in.}
		api_secret: ${8:# Secret key of the CloudStack API.}
		api_http_method: ${9:#get|post}
		domain: ${10:# Domain the instance is related to.}
		project: ${11:# Name of the project the instance is deployed in.}
		state: ${12:#present|absent}
		api_region: ${13:cloudstack}
		vpc: ${14:# Name of the VPC the C(vm) is related to.}
		api_key: ${15:# API key of the CloudStack API.}
		api_url: ${16:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_pod "Manages pods on Apache CloudStack based clouds."
- name:
	cs_pod:
		name: ${1:# Name of the pod.}
		zone: ${2:# Name of the zone in which the pod belongs to.}
		api_secret: ${3:# Secret key of the CloudStack API.}
		api_timeout: ${4:10}
		netmask: ${5:# Netmask for the Pod.}
		api_region: ${6:cloudstack}
		gateway: ${7:# Gateway for the Pod.}
		state: ${8:#present|enabled|disabled|absent}
		end_ip: ${9:# Ending IP address for the Pod.}
		api_http_method: ${10:#get|post}
		start_ip: ${11:# Starting IP address for the Pod.}
		api_key: ${12:# API key of the CloudStack API.}
		id: ${13:# uuid of the exising pod.}
		api_url: ${14:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_portforward "Manages port forwarding rules on Apache CloudStack based clouds."
- name:
	cs_portforward:
		private_port: ${1:# Start private port for this rule.}
		ip_address: ${2:# Public IP address the rule is assigned to.}
		public_port: ${3:# Start public port for this rule.}
		vm_guest_ip: ${4:no}
		domain: ${5:# Domain the C(vm) is related to.}
		protocol: ${6:#tcp|udp}
		api_http_method: ${7:#get|post}
		api_secret: ${8:# Secret key of the CloudStack API.}
		api_timeout: ${9:10}
		vm: ${10:# Name of virtual machine which we make the port forwarding rule for.}
		vpc: ${11:# Name of the VPC.}
		private_end_port: ${12:# End private port for this rule.}
		api_url: ${13:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		account: ${14:# Account the C(vm) is related to.}
		api_key: ${15:# API key of the CloudStack API.}
		poll_async: ${16:yes}
		network: ${17:# Name of the network.}
		open_firewall: ${18:no}
		api_region: ${19:cloudstack}
		public_end_port: ${20:# End public port for this rule.}
		project: ${21:# Name of the project the C(vm) is located in.}
		state: ${22:#present|absent}
		zone: ${23:# Name of the zone in which the virtual machine is in.}
$0
endsnippet

snippet cs_project "Manages projects on Apache CloudStack based clouds."
- name:
	cs_project:
		name: ${1:# Name of the project.}
		display_text: ${2:# Display text of the project.}
		account: ${3:# Account the project is related to.}
		poll_async: ${4:yes}
		api_http_method: ${5:#get|post}
		tags: ${6:# List of tags. Tags are a list of dictionaries having keys C(key) and C(value).}
		api_secret: ${7:# Secret key of the CloudStack API.}
		api_timeout: ${8:10}
		domain: ${9:# Domain the project is related to.}
		api_region: ${10:cloudstack}
		state: ${11:#present|absent|active|suspended}
		api_key: ${12:# API key of the CloudStack API.}
		api_url: ${13:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_region "Manages regions on Apache CloudStack based clouds."
- name:
	cs_region:
		id: ${1:# ID of the region.}
		endpoint: ${2:# Endpoint URL of the region.}
		name: ${3:# Name of the region.}
		api_http_method: ${4:#get|post}
		api_secret: ${5:# Secret key of the CloudStack API.}
		api_timeout: ${6:10}
		api_region: ${7:cloudstack}
		state: ${8:#present|absent}
		api_key: ${9:# API key of the CloudStack API.}
		api_url: ${10:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_resourcelimit "Manages resource limits on Apache CloudStack based clouds."
- name:
	cs_resourcelimit:
		resource_type: ${1:instance|ip_address|volume|snapshot|template|network|vpc|cpu|memory|primary_storage|secondary_storage}
		domain: ${2:# Domain the resource is related to.}
		api_url: ${3:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		api_http_method: ${4:#get|post}
		api_secret: ${5:# Secret key of the CloudStack API.}
		api_timeout: ${6:10}
		account: ${7:# Account the resource is related to.}
		api_region: ${8:cloudstack}
		project: ${9:# Name of the project the resource is related to.}
		limit: ${10:-1}
		api_key: ${11:# API key of the CloudStack API.}
$0
endsnippet

snippet cs_role "Manages user roles on Apache CloudStack based clouds."
- name:
	cs_role:
		name: ${1:# Name of the role.}
		description: ${2:# Description of the role.}
		api_http_method: ${3:#get|post}
		api_secret: ${4:# Secret key of the CloudStack API.}
		api_timeout: ${5:10}
		api_region: ${6:cloudstack}
		state: ${7:#present|absent}
		api_url: ${8:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		api_key: ${9:# API key of the CloudStack API.}
		id: ${10:# ID of the role.}
		role_type: ${11:#User|DomainAdmin|ResourceAdmin|Admin}
$0
endsnippet

snippet cs_router "Manages routers on Apache CloudStack based clouds."
- name:
	cs_router:
		name: ${1:# Name of the router.}
		account: ${2:# Account the router is related to.}
		api_http_method: ${3:#get|post}
		api_secret: ${4:# Secret key of the CloudStack API.}
		api_timeout: ${5:10}
		domain: ${6:# Domain the router is related to.}
		api_region: ${7:cloudstack}
		project: ${8:# Name of the project the router is related to.}
		state: ${9:#present|absent|started|stopped|restarted}
		service_offering: ${10:# Name or id of the service offering of the router.}
		api_key: ${11:# API key of the CloudStack API.}
		api_url: ${12:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_securitygroup "Manages security groups on Apache CloudStack based clouds."
- name:
	cs_securitygroup:
		name: ${1:# Name of the security group.}
		account: ${2:# Account the security group is related to.}
		api_http_method: ${3:#get|post}
		api_secret: ${4:# Secret key of the CloudStack API.}
		api_timeout: ${5:10}
		domain: ${6:# Domain the security group is related to.}
		api_region: ${7:cloudstack}
		project: ${8:# Name of the project the security group to be created in.}
		state: ${9:#present|absent}
		api_url: ${10:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		api_key: ${11:# API key of the CloudStack API.}
		description: ${12:# Description of the security group.}
$0
endsnippet

snippet cs_securitygroup_rule "Manages security group rules on Apache CloudStack based clouds."
- name:
	cs_securitygroup_rule:
		security_group: ${1:# Name of the security group the rule is related to. The security group must be existing.}
		icmp_code: ${2:# Error code for this icmp message. Required if C(protocol=icmp).}
		api_key: ${3:# API key of the CloudStack API.}
		protocol: ${4:#tcp|udp|icmp|ah|esp|gre}
		api_url: ${5:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		api_http_method: ${6:#get|post}
		start_port: ${7:# Start port for this rule. Required if C(protocol=tcp) or C(protocol=udp).}
		user_security_group: ${8:# Security group this rule is based of.}
		end_port: ${9:# End port for this rule. Required if C(protocol=tcp) or C(protocol=udp), but C(start_port) will be used if not set.}
		api_region: ${10:cloudstack}
		project: ${11:# Name of the project the security group to be created in.}
		state: ${12:#present|absent}
		api_timeout: ${13:10}
		api_secret: ${14:# Secret key of the CloudStack API.}
		poll_async: ${15:yes}
		cidr: ${16:0.0.0.0/0}
		icmp_type: ${17:# Type of the icmp message being sent. Required if C(protocol=icmp).}
		type: ${18:#ingress|egress}
$0
endsnippet

snippet cs_snapshot_policy "Manages volume snapshot policies on Apache CloudStack based clouds."
- name:
	cs_snapshot_policy:
		volume: ${1:# Name of the volume.}
		domain: ${2:# Domain the volume is related to.}
		api_timeout: ${3:10}
		api_url: ${4:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		api_http_method: ${5:#get|post}
		schedule: ${6:# Time the snapshot is scheduled. Required if C(state=present).}
		api_secret: ${7:# Secret key of the CloudStack API.}
		interval_type: ${8:hourly|#daily|weekly|monthly}
		vm: ${9:# Name of the instance to select the volume from.}
		volume_type: ${10:DATADISK|ROOT}
		time_zone: ${11:UTC}
		project: ${12:# Name of the project the volume is related to.}
		state: ${13:#present|absent}
		api_region: ${14:cloudstack}
		vpc: ${15:# Name of the vpc the instance is deployed in.}
		account: ${16:# Account the volume is related to.}
		max_snaps: ${17:8}
		api_key: ${18:# API key of the CloudStack API.}
		device_id: ${19:# ID of the device on a VM the volume is attached to.}
$0
endsnippet

snippet cs_sshkeypair "Manages SSH keys on Apache CloudStack based clouds."
- name:
	cs_sshkeypair:
		name: ${1:# Name of public key.}
		public_key: ${2:# String of the public key.}
		account: ${3:# Account the public key is related to.}
		api_http_method: ${4:#get|post}
		api_secret: ${5:# Secret key of the CloudStack API.}
		api_timeout: ${6:10}
		domain: ${7:# Domain the public key is related to.}
		api_region: ${8:cloudstack}
		project: ${9:# Name of the project the public key to be registered in.}
		state: ${10:#present|absent}
		api_key: ${11:# API key of the CloudStack API.}
		api_url: ${12:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_staticnat "Manages static NATs on Apache CloudStack based clouds."
- name:
	cs_staticnat:
		ip_address: ${1:# Public IP address the static NAT is assigned to.}
		vm_guest_ip: ${2:no}
		domain: ${3:# Domain the static NAT is related to.}
		api_timeout: ${4:10}
		poll_async: ${5:yes}
		network: ${6:# Network the IP address is related to.}
		zone: ${7:# Name of the zone in which the virtual machine is in.}
		api_secret: ${8:# Secret key of the CloudStack API.}
		api_http_method: ${9:#get|post}
		vm: ${10:# Name of virtual machine which we make the static NAT for.}
		api_region: ${11:cloudstack}
		project: ${12:# Name of the project the static NAT is related to.}
		state: ${13:#present|absent}
		vpc: ${14:# VPC the network related to.}
		account: ${15:# Account the static NAT is related to.}
		api_key: ${16:# API key of the CloudStack API.}
		api_url: ${17:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_template "Manages templates on Apache CloudStack based clouds."
- name:
	cs_template:
		name: ${1:# Name of the template.}
		is_featured: ${2:no}
		api_http_method: ${3:#get|post}
		format: ${4:QCOW2|RAW|VHD|OVA}
		api_secret: ${5:# Secret key of the CloudStack API.}
		api_timeout: ${6:10}
		vm: ${7:# VM name the template will be created from its volume or alternatively from a snapshot.}
		api_region: ${8:cloudstack}
		domain: ${9:# Domain the template, snapshot or VM is related to.}
		is_extractable: ${10:no}
		is_public: ${11:no}
		checksum: ${12:no}
		requires_hvm: ${13:no}
		display_text: ${14:# Display text of the template.}
		account: ${15:# Account the template, snapshot or VM is related to.}
		api_key: ${16:# API key of the CloudStack API.}
		poll_async: ${17:yes}
		password_enabled: ${18:no}
		zone: ${19:# Name of the zone you wish the template to be registered or deleted from.}
		url: ${20:# URL of where the template is hosted on C(state=present).}
		bits: ${21:64}
		sshkey_enabled: ${22:no}
		is_dynamically_scalable: ${23:no}
		cross_zones: ${24:no}
		project: ${25:# Name of the project the template to be registered in.}
		api_url: ${26:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		state: ${27:#present|absent|extacted}
		is_ready: ${28:no}
		details: ${29:# Template details in key/value pairs.}
		hypervisor: ${30:KVM|VMware|BareMetal|XenServer|LXC|HyperV|UCS|OVM}
		is_routing: ${31:no}
		os_type: ${32:# OS type that best represents the OS of this template.}
		template_tag: ${33:# the tag for this template.}
		template_filter: ${34:featured|#self|selfexecutable|sharedexecutable|executable|community}
		snapshot: ${35:# Name of the snapshot, created from the VM ROOT volume, the template will be created from.}
		mode: ${36:#http_download|ftp_upload}
$0
endsnippet

snippet cs_user "Manages users on Apache CloudStack based clouds."
- name:
	cs_user:
		username: ${1:# Username of the user.}
		account: ${2:# Account the user will be created under.}
		last_name: ${3:# Last name of the user.}
		poll_async: ${4:yes}
		api_url: ${5:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		api_http_method: ${6:#get|post}
		api_secret: ${7:# Secret key of the CloudStack API.}
		api_timeout: ${8:10}
		first_name: ${9:# First name of the user.}
		api_region: ${10:cloudstack}
		api_key: ${11:# API key of the CloudStack API.}
		state: ${12:#present|absent|enabled|disabled|locked|unlocked}
		domain: ${13:ROOT}
		timezone: ${14:# Timezone of the user.}
		password: ${15:# Password of the user to be created.}
		email: ${16:# Email of the user.}
$0
endsnippet

snippet cs_vmsnapshot "Manages VM snapshots on Apache CloudStack based clouds."
- name:
	cs_vmsnapshot:
		vm: ${1:# Name of the virtual machine.}
		name: ${2:# Unique Name of the snapshot. In CloudStack terms display name.}
		snapshot_memory: ${3:no}
		domain: ${4:# Domain the VM snapshot is related to.}
		poll_async: ${5:yes}
		description: ${6:# Description of the snapshot.}
		zone: ${7:# Name of the zone in which the VM is in. If not set, default zone is used.}
		api_secret: ${8:# Secret key of the CloudStack API.}
		api_timeout: ${9:10}
		api_region: ${10:cloudstack}
		project: ${11:# Name of the project the VM is assigned to.}
		state: ${12:#present|absent|revert}
		api_http_method: ${13:#get|post}
		account: ${14:# Account the VM snapshot is related to.}
		api_url: ${15:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		api_key: ${16:# API key of the CloudStack API.}
$0
endsnippet

snippet cs_volume "Manages volumes on Apache CloudStack based clouds."
- name:
	cs_volume:
		name: ${1:# Name of the volume.}
		domain: ${2:# Name of the domain the volume to be deployed in.}
		force: ${3:no}
		disk_offering: ${4:# Name of the disk offering to be used.}
		api_http_method: ${5:#get|post}
		api_secret: ${6:# Secret key of the CloudStack API.}
		api_timeout: ${7:10}
		account: ${8:# Account the volume is related to.}
		shrink_ok: ${9:no}
		display_volume: ${10:yes}
		api_url: ${11:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		min_iops: ${12:# Min iops}
		size: ${13:# Size of disk in GB}
		custom_id: ${14:# Custom id to the resource.}
		poll_async: ${15:yes}
		zone: ${16:# Name of the zone in which the volume should be deployed.}
		max_iops: ${17:# Max iops}
		project: ${18:# Name of the project the volume to be deployed in.}
		state: ${19:#present|absent|attached|detached}
		api_region: ${20:cloudstack}
		snapshot: ${21:# The snapshot name for the disk volume.}
		vm: ${22:# Name of the virtual machine to attach the volume to.}
		api_key: ${23:# API key of the CloudStack API.}
$0
endsnippet

snippet cs_vpc "Manages VPCs on Apache CloudStack based clouds."
- name:
	cs_vpc:
		name: ${1:# Name of the VPC.}
		display_text: ${2:# Display text of the VPC.}
		vpc_offering: ${3:# Name of the VPC offering.}
		api_key: ${4:# API key of the CloudStack API.}
		poll_async: ${5:yes}
		zone: ${6:# Name of the zone.}
		tags: ${7:# List of tags. Tags are a list of dictionaries having keys C(key) and C(value).}
		api_secret: ${8:# Secret key of the CloudStack API.}
		api_timeout: ${9:10}
		domain: ${10:# Domain the VPC is related to.}
		api_region: ${11:cloudstack}
		project: ${12:# Name of the project the VPC is related to.}
		state: ${13:#present|absent|restarted}
		api_http_method: ${14:#get|post}
		account: ${15:# Account the VPC is related to.}
		cidr: ${16:# CIDR of the VPC, e.g. 10.1.0.0/16}
		network_domain: ${17:# Network domain for the VPC.}
		api_url: ${18:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet cs_zone "Manages zones on Apache CloudStack based clouds."
- name:
	cs_zone:
		name: ${1:# Name of the zone.}
		internal_dns1: ${2:# First internal DNS for the zone.}
		domain: ${3:# Domain the zone is related to.}
		api_key: ${4:# API key of the CloudStack API.}
		api_http_method: ${5:#get|post}
		state: ${6:#present|enabled|disabled|absent}
		dns2: ${7:# Second DNS for the zone.}
		dns1: ${8:# First DNS for the zone.}
		api_timeout: ${9:10}
		internal_dns2: ${10:# Second internal DNS for the zone.}
		network_type: ${11:#basic|advanced}
		guest_cidr_address: ${12:# Guest CIDR address for the zone.}
		api_region: ${13:cloudstack}
		api_secret: ${14:# Secret key of the CloudStack API.}
		api_url: ${15:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
		dhcp_provider: ${16:# DHCP provider for the Zone.}
		network_domain: ${17:# Network domain for the zone.}
		dns2_ipv6: ${18:# Second DNS for IPv6 for the zone.}
		id: ${19:# uuid of the exising zone.}
		dns1_ipv6: ${20:# First DNS for IPv6 for the zone.}
$0
endsnippet

snippet cs_zone_facts "Gathering facts of zones from Apache CloudStack based clouds."
- name:
	cs_zone_facts:
		name: ${1:# Name of the zone.}
		api_timeout: ${2:10}
		api_http_method: ${3:#get|post}
		api_secret: ${4:# Secret key of the CloudStack API.}
		api_key: ${5:# API key of the CloudStack API.}
		api_region: ${6:cloudstack}
		api_url: ${7:# URL of the CloudStack API e.g. https://cloud.example.com/client/api.}
$0
endsnippet

snippet digital_ocean "Create/delete a droplet/SSH_key in DigitalOcean"
- name:
	digital_ocean:
		unique_name: ${1:yes|#no}
		virtio: ${2:#yes|no}
		region_id: ${3:# This is the slug of the region you would like your server to be created in.}
		backups_enabled: ${4:yes|#no}
		user_data: ${5:# opaque blob of data which is made available to the droplet}
		image_id: ${6:# This is the slug of the image you would like the droplet created with.}
		wait_timeout: ${7:300}
		api_token: ${8:# DigitalOcean api token.}
		ssh_pub_key: ${9:# The public SSH key you want to add to your account.}
		wait: ${10:#yes|no}
		name: ${11:# String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key.}
		size_id: ${12:# This is the slug of the size you would like the droplet created with.}
		id: ${13:# Numeric, the droplet id you want to operate on.}
		state: ${14:#present|active|absent|deleted}
		command: ${15:#droplet|ssh}
		ssh_key_ids: ${16:# Optional, array of SSH key (numeric) ID that you would like to be added to the server.}
		ipv6: ${17:yes|#no}
		private_networking: ${18:yes|#no}
$0
endsnippet

snippet digital_ocean_block_storage "Create/destroy or attach/detach Block Storage volumes in DigitalOcean"
- name:
	digital_ocean_block_storage:
		region: ${1:# The slug of the region where your Block Storage volume should be located in.}
		volume_name: ${2:# The name of the Block Storage volume.}
		state: ${3:present|absent}
		command: ${4:create|attach}
		api_token: ${5:# DigitalOcean api token.}
		droplet_id: ${6:# The droplet id you want to operate on. Required when command=attach.}
		description: ${7:# Description of the Block Storage volume.}
		timeout: ${8:10}
		block_size: ${9:# The size of the Block Storage volume in gigabytes. Required when command=create and state=present.}
$0
endsnippet

snippet digital_ocean_domain "Create/delete a DNS record in DigitalOcean"
- name:
	digital_ocean_domain:
		ip: ${1:# The IP address to point a domain at.}
		state: ${2:#present|absent}
		api_token: ${3:# DigitalOcean api token.}
		id: ${4:# Numeric, the droplet id you want to operate on.}
		name: ${5:# String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key, or the name of a domain.}
$0
endsnippet

snippet digital_ocean_sshkey "Create/delete an SSH key in DigitalOcean"
- name:
	digital_ocean_sshkey:
		state: ${1:#present|absent}
		name: ${2:# String, this is the name of an SSH key to create or destroy.}
		client_id: ${3:# DigitalOcean manager id.}
		api_key: ${4:# DigitalOcean api key.}
		id: ${5:# Numeric, the SSH key id you want to operate on.}
		ssh_pub_key: ${6:# The public SSH key you want to add to your account.}
$0
endsnippet

snippet digital_ocean_tag "Create and remove tag(s) to DigitalOcean resource."
- name:
	digital_ocean_tag:
		name: ${1:# The name of the tag. The supported characters for names include alphanumeric characters, dashes, and underscores.}
		state: ${2:#present|absent}
		resource_id: ${3:# The ID of the resource to operate on.}
		resource_type: ${4:#droplet}
		api_token: ${5:# DigitalOcean api token.}
$0
endsnippet

snippet dimensiondata_network "Create, update, and delete MCP 1.0 & 2.0 networks"
- name:
	dimensiondata_network:
		name: ${1:# The name of the network domain to create.}
		location: ${2:# The target datacenter.}
		service_plan: ${3:#ESSENTIALS|ADVANCED}
		mcp_user: ${4:# The username used to authenticate to the CloudControl API.}
		mcp_password: ${5:# The password used to authenticate to the CloudControl API.}
		region: ${6:Regions are defined in Apache libcloud project [libcloud/common/dimensiondata.py]|They are also listed in U(https://libcloud.readthedocs.io/en/latest/compute/drivers/dimensiondata.html)|Note that the default value "na" stands for "North America".|The module prepends 'dd-' to the region choice.}
		wait_time: ${7:600}
		state: ${8:#present|absent}
		wait_poll_interval: ${9:2}
		wait: ${10:no}
		validate_certs: ${11:yes}
		description: ${12:# Additional description of the network domain.}
$0
endsnippet

snippet docker_container "manage docker containers"
- name:
	docker_container:
		name: ${1:# Assign a name to a new container or match an existing container.}
		tty: ${2:no}
		dns_servers: ${3:# List of custom DNS servers.}
		image: ${4:# Repository path and tag used to create the container. If an image is not found or pull is true, the image will be pulled from the registry. If no tag is included, 'latest' will be used.}
		labels: ${5:# Dictionary of key value pairs.}
		docker_host: ${6:unix://var/run/docker.sock}
		cpuset_cpus: ${7:# CPUs in which to allow execution C(1,3) or C(1-3).}
		force_kill: ${8:no}
		pid_mode: ${9:# Set the PID namespace mode for the container. Currently only supports 'host'.}
		networks: ${10:# List of networks the container belongs to.}
		cpu_period: ${11:0}
		capabilities: ${12:# List of capabilities to add to the container.}
		memory_swap: ${13:0}
		mac_address: ${14:# Container MAC address (e.g. 92:d0:c6:0a:29:33)}
		volumes_from: ${15:# List of container names or Ids to get volumes from.}
		log_options: ${16:# Dictionary of options specific to the chosen log_driver. See https://docs.docker.com/engine/admin/logging/overview/ for details.}
		recreate: ${17:no}
		memory: ${18:0}
		memory_swappiness: ${19:0}
		network_mode: ${20:bridge|container:<name|id>|host|none}
		detach: ${21:yes}
		published_ports: ${22:# List of ports to publish from the container to the host.}
		restart: ${23:no}
		pull: ${24:no}
		stop_signal: ${25:# Override default signal used to stop the container.}
		devices: ${26:# List of host device bindings to add to the container. Each binding is a mapping expressed in the format: <path_on_host>:<path_in_container>:<cgroup_permissions>}
		uts: ${27:# Set the UTS namespace mode for the container.}
		blkio_weight: ${28:# Block IO (relative weight), between 10 and 1000.}
		timeout: ${29:60}
		stop_timeout: ${30:# Number of seconds to wait for the container to stop before sending SIGKILL.}
		ulimits: ${31:# List of ulimit options. A ulimit is specified as C(nofile:262144:262144)}
		interactive: ${32:no}
		links: ${33:# List of name aliases for linked containers in the format C(container_name:alias)}
		oom_score_adj: ${34:0}
		ssl_version: ${35:1.0}
		command: ${36:# Command to execute when the container starts.}
		paused: ${37:no}
		tls_verify: ${38:no}
		dns_search_domains: ${39:# List of custom DNS search domains.}
		security_opts: ${40:# List of security options in the form of C("label:user:User")}
		env_file: ${41:# Path to a file containing environment variables I(FOO=BAR).}
		cpu_quota: ${42:0}
		read_only: ${43:no}
		cpuset_mems: ${44:# Memory nodes (MEMs) in which to allow execution C(0-3) or C(0,1)}
		hostname: ${45:# Container hostname.}
		state: ${46:absent|present|stopped|#started}
		cleanup: ${47:no}
		entrypoint: ${48:# Command that overwrites the default ENTRYPOINT of the image.}
		key_path: ${49:# Path to the client's TLS key file.}
		env: ${50:# Dictionary of key,value pairs.}
		keep_volumes: ${51:yes}
		ipc_mode: ${52:# Set the IPC mode for the container. Can be one of 'container:<name|id>' to reuse another container's IPC namespace or 'host' to use the host's IPC namespace within the container.}
		privileged: ${53:no}
		api_version: ${54:default provided by docker-py}
		exposed_ports: ${55:# List of additional container ports which informs Docker that the container listens on the specified network ports at runtime. If the port is already exposed using EXPOSE in a Dockerfile, it does not need to be exposed again.}
		trust_image_content: ${56:no}
		cacert_path: ${57:# Use a CA certificate when performing server verification by providing the path to a CA certificate file.}
		log_driver: ${58:none|json-file|syslog|journald|gelf|fluentd|awslogs|splunk}
		oom_killer: ${59:no}
		shm_size: ${60:# Size of `/dev/shm`. The format is `<number><unit>`. `number` must be greater than `0`. Unit is optional and can be `b` (bytes), `k` (kilobytes), `m` (megabytes), or `g` (gigabytes).}
		kill_signal: ${61:# Override default signal used to kill a running container.}
		tls_hostname: ${62:localhost}
		volume_driver: ${63:none}
		user: ${64:# Sets the username or UID used and optionally the groupname or GID for the specified command.}
		groups: ${65:# List of additional group names and/or IDs that the container process will run as.}
		cert_path: ${66:# Path to the client's TLS certificate file.}
		purge_networks: ${67:no}
		tls: ${68:no}
		ignore_image: ${69:no}
		restart_policy: ${70:always|False|#on-failure|unless-stopped}
		kernel_memory: ${71:0}
		etc_hosts: ${72:# Dict of host-to-IP mappings, where each host name is a key in the dictionary. Each host name will be added to the container's /etc/hosts file.}
		memory_reservation: ${73:0}
		volumes: ${74:# List of volumes to mount within the container.}
		cpu_shares: ${75:# CPU shares (relative weight).}
		restart_retries: ${76:0}
$0
endsnippet

snippet docker_image "Manage docker images."
- name:
	docker_image:
		name: ${1:# Image name. Name format will be one of: name, repository/name, registry_server:port/name. When pushing or pulling an image the name can optionally include the tag by appending ':tag_name'.}
		archive_path: ${2:# Use with state C(present) to archive an image to a .tar file.}
		cacert_path: ${3:# Use a CA certificate when performing server verification by providing the path to a CA certificate file.}
		force: ${4:no}
		timeout: ${5:60}
		repository: ${6:# Full path to a repository. Use with state C(present) to tag the image into the repository. Expects format I(repository:tag). If no tag is provided, will use the value of the C(tag) parameter or I(latest).}
		tls_hostname: ${7:localhost}
		docker_host: ${8:unix://var/run/docker.sock}
		tag: ${9:latest}
		cert_path: ${10:# Path to the client's TLS certificate file.}
		path: ${11:# Use with state 'present' to build an image. Will be the path to a directory containing the context and Dockerfile for building an image.}
		tls: ${12:no}
		pull: ${13:yes}
		nocache: ${14:no}
		container_limits: ${15:# A dictionary of limits applied to each container created by the build process.}
		http_timeout: ${16:# Timeout for HTTP requests during the image build operation. Provide a positive integer value for the number of seconds.}
		ssl_version: ${17:1.0}
		load_path: ${18:# Use with state C(present) to load an image from a .tar file.}
		use_tls: ${19:#False|encrypt|verify}
		state: ${20:absent|#present|build}
		tls_verify: ${21:no}
		key_path: ${22:# Path to the client's TLS key file.}
		buildargs: ${23:# Provide a dictionary of C(key:value) build arguments that map to Dockerfile ARG directive.}
		push: ${24:no}
		rm: ${25:yes}
		dockerfile: ${26:Dockerfile}
		api_version: ${27:default provided by docker-py}
$0
endsnippet

snippet docker_image_facts "Inspect docker images"
- name:
	docker_image_facts:
		name: ${1:# An image name or a list of image names. Name format will be name[:tag] or repository/name[:tag], where tag is optional. If a tag is not provided, 'latest' will be used.}
		tls: ${2:no}
		cacert_path: ${3:# Use a CA certificate when performing server verification by providing the path to a CA certificate file.}
		ssl_version: ${4:1.0}
		tls_hostname: ${5:localhost}
		docker_host: ${6:unix://var/run/docker.sock}
		tls_verify: ${7:no}
		key_path: ${8:# Path to the client's TLS key file.}
		timeout: ${9:60}
		cert_path: ${10:# Path to the client's TLS certificate file.}
		api_version: ${11:default provided by docker-py}
$0
endsnippet

snippet docker_login "Log into a Docker registry."
- name:
	docker_login:
		username: ${1:# The username for the registry account}
		password: ${2:# The plaintext password for the registry account}
		cacert_path: ${3:# Use a CA certificate when performing server verification by providing the path to a CA certificate file.}
		tls_hostname: ${4:localhost}
		docker_host: ${5:unix://var/run/docker.sock}
		tls_verify: ${6:no}
		cert_path: ${7:# Path to the client's TLS certificate file.}
		tls: ${8:no}
		config_path: ${9:~/.docker/config.json}
		ssl_version: ${10:1.0}
		state: ${11:#present|absent}
		key_path: ${12:# Path to the client's TLS key file.}
		timeout: ${13:60}
		registry_url: ${14:https://index.docker.io/v1/}
		email: ${15:# The email address for the registry account. NOTE: private registries may not require this, but Docker Hub requires it.}
		api_version: ${16:default provided by docker-py}
		reauthorize: ${17:yes|no}
$0
endsnippet

snippet docker_network "Manage Docker networks"
- name:
	docker_network:
		name: ${1:# Name of the network to operate on.}
		tls: ${2:no}
		cacert_path: ${3:# Use a CA certificate when performing server verification by providing the path to a CA certificate file.}
		force: ${4:no}
		tls_verify: ${5:no}
		ssl_version: ${6:1.0}
		driver: ${7:bridge}
		docker_host: ${8:unix://var/run/docker.sock}
		ipam_options: ${9:# Dictionary of IPAM options.}
		tls_hostname: ${10:localhost}
		state: ${11:absent|#present}
		driver_options: ${12:# Dictionary of network settings. Consult docker docs for valid options and values.}
		connected: ${13:# List of container names or container IDs to connect to a network.}
		key_path: ${14:# Path to the client's TLS key file.}
		timeout: ${15:60}
		cert_path: ${16:# Path to the client's TLS certificate file.}
		ipam_driver: ${17:# Specify an IPAM driver.}
		appends: ${18:no}
		api_version: ${19:default provided by docker-py}
$0
endsnippet

snippet docker_service "Manage docker services and containers."
- name:
	docker_service:
		files: ${1:# List of file names relative to C(project_src). Overrides docker-compose.yml or docker-compose.yaml.}
		project_name: ${2:# Provide a project name. If not provided, the project name is taken from the basename of C(project_src).}
		project_src: ${3:# Path to a directory containing a docker-compose.yml or docker-compose.yaml file.}
		hostname_check: ${4:no}
		recreate: ${5:always|never|#smart}
		tls_hostname: ${6:localhost}
		docker_host: ${7:unix://var/run/docker.sock}
		dependencies: ${8:yes}
		remove_images: ${9:# Use with state I(absent) to remove the all images or only local images.}
		services: ${10:# When C(state) is I(present) run I(docker-compose up) on a subset of services.}
		cert_path: ${11:# Path to the client's TLS certificate file.}
		pull: ${12:no}
		tls: ${13:no}
		definition: ${14:# Provide docker-compose yaml describing one or more services, networks and volumes.}
		scale: ${15:# When C(state) is I(present) scale services. Provide a dictionary of key/value pairs where the key is the name of the service and the value is an integer count for the number of containers.}
		nocache: ${16:no}
		restarted: ${17:no}
		ssl_version: ${18:1.0}
		state: ${19:absent|#present}
		api_version: ${20:default provided by docker-py}
		remove_volumes: ${21:no}
		tls_verify: ${22:no}
		stopped: ${23:no}
		build: ${24:no}
		timeout: ${25:60}
		debug: ${26:no}
		cacert_path: ${27:# Use a CA certificate when performing server verification by providing the path to a CA certificate file.}
		key_path: ${28:# Path to the client's TLS key file.}
$0
endsnippet

snippet gc_storage "This module manages objects/buckets in Google Cloud Storage."
- name:
	gc_storage:
		gs_access_key: ${1:# GS access key. If not set then the value of the GS_ACCESS_KEY_ID environment variable is used.}
		bucket: ${2:# Bucket name.}
		mode: ${3:get|put|get_url|get_str|delete|create}
		gs_secret_key: ${4:# GS secret key. If not set then the value of the GS_SECRET_ACCESS_KEY environment variable is used.}
		src: ${5:# The source file path when performing a PUT operation.}
		force: ${6:yes}
		permission: ${7:private}
		dest: ${8:# The destination file path when downloading an object/key with a GET operation.}
		object: ${9:# Keyname of the object inside the bucket. Can be also be used to create "virtual directories" (see examples).}
		expiration: ${10:# Time limit (in seconds) for the URL generated and returned by GCA when performing a mode=put or mode=get_url operation. This url is only available when public-read is the acl for the object.}
		headers: ${11:{}}
$0
endsnippet

snippet gcdns_record "Creates or removes resource records in Google Cloud DNS"
- name:
	gcdns_record:
		record: ${1:# The fully-qualified domain name of the resource record.}
		type: ${2:A|AAAA|CNAME|SRV|TXT|SOA|NS|MX|SPF|PTR}
		zone_id: ${3:# The Google Cloud ID of the zone (e.g., example-com).}
		zone: ${4:# The DNS domain name of the zone (e.g., example.com).}
		service_account_email: ${5:# The e-mail address for a service account with access to Google Cloud DNS.}
		ttl: ${6:300}
		pem_file: ${7:# The path to the PEM file associated with the service account email.}
		record_data: ${8:# The record_data to use for the resource record.}
		state: ${9:#present|absent}
		credentials_file: ${10:# The path to the JSON file associated with the service account email.}
		project_id: ${11:# The Google Cloud Platform project ID to use.}
		overwrite: ${12:True|#False}
$0
endsnippet

snippet gcdns_zone "Creates or removes zones in Google Cloud DNS"
- name:
	gcdns_zone:
		zone: ${1:# The DNS domain name of the zone.}
		state: ${2:#present|absent}
		description: ${3:}
		credentials_file: ${4:# The path to the JSON file associated with the service account email.}
		service_account_email: ${5:# The e-mail address for a service account with access to Google Cloud DNS.}
		project_id: ${6:# The Google Cloud Platform project ID to use.}
		pem_file: ${7:# The path to the PEM file associated with the service account email.}
$0
endsnippet

snippet gce "create or terminate GCE instances"
- name:
	gce:
		zone: ${1:us-central1-a}
		disks: ${2:# a list of persistent disks to attach to the instance; a string value gives the name of the disk; alternatively, a dictionary value can define 'name' and 'mode' ('READ_ONLY' or 'READ_WRITE'). The first entry will be the boot disk (which must be READ_WRITE).}
		num_instances: ${3:# can be used with 'name', specifies the number of nodes to provision using 'name' as a base name}
		ip_forward: ${4:false}
		image: ${5:debian-8}
		service_account_permissions: ${6:bigquery|cloud-platform|compute-ro|compute-rw|useraccounts-ro|useraccounts-rw|datastore|logging-write|monitoring|sql-admin|storage-full|storage-ro|storage-rw|taskqueue|userinfo-email}
		pem_file: ${7:# path to the pem file associated with the service account email This option is deprecated. Use 'credentials_file'.}
		instance_names: ${8:# a comma-separated list of instance names to create or destroy}
		machine_type: ${9:n1-standard-1}
		name: ${10:# either a name of a single instance or when used with 'num_instances', the base name of a cluster of nodes}
		disk_size: ${11:10}
		network: ${12:default}
		external_ip: ${13:ephemeral}
		service_account_email: ${14:# service account email}
		tags: ${15:# a comma-separated list of tags to associate with the instance}
		persistent_boot_disk: ${16:false}
		disk_auto_delete: ${17:true}
		state: ${18:active|#present|absent|deleted|started|stopped|terminated}
		credentials_file: ${19:# path to the JSON file associated with the service account email}
		subnetwork: ${20:# name of the subnetwork in which the instance should be created}
		project_id: ${21:# your GCE project ID}
		preemptible: ${22:false}
		metadata: ${23:# a hash/dictionary of custom data for the instance; '{"key":"value", ...}'}
$0
endsnippet

snippet gce_eip "Create or Destroy Global or Regional External IP addresses."
- name:
	gce_eip:
		region: ${1:# Region to create the address in. Set to 'global' to create a global address.}
		name: ${2:# Name of Address.}
		state: ${3:#present|absent}
$0
endsnippet

snippet gce_img "utilize GCE image resources"
- name:
	gce_img:
		name: ${1:# the name of the image to create or delete}
		project_id: ${2:# your GCE project ID}
		family: ${3:# an optional family name}
		service_account_email: ${4:# service account email}
		pem_file: ${5:# path to the pem file associated with the service account email}
		source: ${6:# the source disk or the Google Cloud Storage URI to create the image from}
		state: ${7:#present|absent}
		timeout: ${8:180}
		zone: ${9:us-central1-a}
		description: ${10:# an optional description}
$0
endsnippet

snippet gce_instance_template "create or destroy intance templates of Compute Engine of GCP."
- name:
	gce_instance_template:
		name: ${1:# The name of the GCE instance template.}
		description: ${2:# description of instance template}
		tags: ${3:# a comma-separated list of tags to associate with the instance}
		automatic_restart: ${4:# Defines whether the instance should be automatically restarted when it is terminated by Compute Engine.}
		image: ${5:# The image to use to create the instance. Cannot specify both both I(image) and I(source).}
		service_account_permissions: ${6:bigquery|cloud-platform|compute-ro|compute-rw|useraccounts-ro|useraccounts-rw|datastore|logging-write|monitoring|sql-admin|storage-full|storage-ro|storage-rw|taskqueue|userinfo-email}
		pem_file: ${7:# path to the pem file associated with the service account email This option is deprecated. Use 'credentials_file'.}
		can_ip_forward: ${8:no}
		disk_type: ${9:pd-standard}
		size: ${10:f1-micro}
		network: ${11:default}
		external_ip: ${12:ephemeral}
		service_account_email: ${13:# service account email}
		disks: ${14:# a list of persistent disks to attach to the instance; a string value gives the name of the disk; alternatively, a dictionary value can define 'name' and 'mode' ('READ_ONLY' or 'READ_WRITE'). The first entry will be the boot disk (which must be READ_WRITE).}
		nic_gce_struct: ${15:# Support passing in the GCE-specific formatted networkInterfaces[] structure.}
		disk_auto_delete: ${16:yes}
		source: ${17:# A source disk to attach to the instance. Cannot specify both I(image) and I(source).}
		state: ${18:#present|absent}
		credentials_file: ${19:# path to the JSON file associated with the service account email}
		image_family: ${20:# The image family to use to create the instance. If I(image) has been used I(image_family) is ignored. Cannot specify both I(image) and I(source).}
		subnetwork: ${21:# The Subnetwork resource name for this instance.}
		project_id: ${22:# your GCE project ID}
		preemptible: ${23:# Defines whether the instance is preemptible.}
		metadata: ${24:# a hash/dictionary of custom data for the instance; '{"key":"value", ...}'}
$0
endsnippet

snippet gce_lb "create/destroy GCE load-balancer resources"
- name:
	gce_lb:
		httphealthcheck_host: ${1:# host header to pass through on HTTP check requests}
		protocol: ${2:#tcp|udp}
		pem_file: ${3:# path to the pem file associated with the service account email This option is deprecated. Use 'credentials_file'.}
		members: ${4:# a list of zone/nodename pairs, e.g ['us-central1-a/www-a', ...]}
		httphealthcheck_port: ${5:80}
		httphealthcheck_name: ${6:# the name identifier for the HTTP health check}
		name: ${7:# name of the load-balancer resource}
		external_ip: ${8:# the external static IPv4 (or auto-assigned) address for the LB}
		service_account_email: ${9:# service account email}
		region: ${10:# the GCE region where the load-balancer is defined}
		httphealthcheck_unhealthy_count: ${11:2}
		httphealthcheck_healthy_count: ${12:2}
		httphealthcheck_path: ${13:/}
		port_range: ${14:# the port (range) to forward, e.g. 80 or 8000-8888 defaults to all ports}
		state: ${15:active|#present|absent|deleted}
		httphealthcheck_timeout: ${16:5}
		credentials_file: ${17:# path to the JSON file associated with the service account email}
		project_id: ${18:# your GCE project ID}
		httphealthcheck_interval: ${19:5}
$0
endsnippet

snippet gce_mig "Create, Update or Destroy a Managed Instance Group (MIG)."
- name:
	gce_mig:
		name: ${1:# Name of the Managed Instance Group.}
		zone: ${2:# The GCE zone to use for this Managed Instance Group.}
		service_account_email: ${3:# service account email}
		autoscaling: ${4:# A dictionary of configuration for the autoscaler. 'enabled (bool)', 'name (str)' and policy.max_instances (int) are required fields if autoscaling is used. See U(https://cloud.google.com/compute/docs/reference/beta/autoscalers) for more information on Autoscaling.}
		named_ports: ${5:# Define named ports that backend services can forward data to.  Format is a a list of name:port dictionaries.}
		state: ${6:absent|#present}
		template: ${7:# Instance Template to be used in creating the VMs.  See U(https://cloud.google.com/compute/docs/instance-templates) to learn more about Instance Templates.  Required for creating MIGs.}
		credentials_file: ${8:# Path to the JSON file associated with the service account email}
		project_id: ${9:# GCE project ID}
		size: ${10:# Size of Managed Instance Group.  If MIG already exists, it will be resized to the number provided here.  Required for creating MIGs.}
$0
endsnippet

snippet gce_net "create/destroy GCE networks and firewall rules"
- name:
	gce_net:
		src_tags: ${1:# the source instance tags for creating a firewall rule}
		subnet_region: ${2:# region of subnet to create}
		ipv4_range: ${3:# the IPv4 address range in CIDR notation for the network this parameter is not mandatory when you specified existing network in name parameter, but when you create new network, this parameter is mandatory}
		pem_file: ${4:# path to the pem file associated with the service account email This option is deprecated. Use 'credentials_file'.}
		target_tags: ${5:# the target instance tags for creating a firewall rule}
		allowed: ${6:# the protocol:ports to allow ('tcp:80' or 'tcp:80,443' or 'tcp:80-800;udp:1-25') this parameter is mandatory when creating or updating a firewall rule}
		fwname: ${7:# name of the firewall rule}
		name: ${8:# name of the network}
		src_range: ${9:# the source IPv4 address range in CIDR notation}
		state: ${10:active|#present|absent|deleted}
		subnet_name: ${11:# name of subnet to create}
		mode: ${12:#legacy|auto|custom}
		credentials_file: ${13:# path to the JSON file associated with the service account email}
		service_account_email: ${14:# service account email}
		project_id: ${15:# your GCE project ID}
		subnet_desc: ${16:# description of subnet to create}
$0
endsnippet

snippet gce_pd "utilize GCE persistent disk resources"
- name:
	gce_pd:
		name: ${1:# name of the disk}
		size_gb: ${2:10}
		project_id: ${3:# your GCE project ID}
		zone: ${4:us-central1-b}
		service_account_email: ${5:# service account email}
		image: ${6:# the source image to use for the disk}
		pem_file: ${7:# path to the pem file associated with the service account email This option is deprecated. Use 'credentials_file'.}
		instance_name: ${8:# instance name if you wish to attach or detach the disk}
		state: ${9:active|#present|absent|deleted}
		snapshot: ${10:# the source snapshot to use for the disk}
		detach_only: ${11:yes|#no}
		credentials_file: ${12:# path to the JSON file associated with the service account email}
		disk_type: ${13:#pd-standard|pd-ssd}
		delete_on_termination: ${14:yes|no}
		mode: ${15:READ_WRITE|#READ_ONLY}
$0
endsnippet

snippet gce_snapshot "Create or destroy snapshots for GCE storage volumes"
- name:
	gce_snapshot:
		instance_name: ${1:# The GCE instance to snapshot}
		project_id: ${2:# The GCP project ID to use}
		credentials_file: ${3:# The path to the credentials file associated with the service account}
		service_account_email: ${4:# GCP service account email for the project where the instance resides}
		state: ${5:#present|absent}
		snapshot_name: ${6:# The name of the snapshot to manage}
		disks: ${7:all}
$0
endsnippet

snippet gce_tag "add or remove tag(s) to/from GCE instances"
- name:
	gce_tag:
		tags: ${1:# comma-separated list of tags to add or remove}
		zone: ${2:us-central1-a}
		service_account_email: ${3:# service account email}
		pem_file: ${4:# path to the pem file associated with the service account email}
		instance_name: ${5:# The name of the GCE instance to add/remove tags.  Required if instance_pattern is not specified.}
		state: ${6:#present|absent}
		instance_pattern: ${7:# The pattern of GCE instance names to match for adding/removing tags.  Full-Python regex is supported. See U(https://docs.python.org/2/library/re.html) for details. If instance_name is not specified, this field is required.}
		project_id: ${8:# your GCE project ID}
$0
endsnippet

snippet gcpubsub "Create and Delete Topics/Subscriptions, Publish and pull messages on PubSub."
- name:
	gcpubsub:
		topic: ${1:# GCP pubsub topic name.  Only the name, not the full path, is required.}
		pull: ${2:# S}
		ack_deadline: ${3:# S}
		name: ${4:# S}
		publish: ${5:# L}
		state: ${6:present}
		push_endpoint: ${7:# S}
		subscription: ${8:# Dictionary containing a subscripton name associated with a topic (required), along with optional ack_deadline, push_endpoint and pull. For pulling from a subscription, message_ack (bool), max_messages (int) and return_immediate are available as subfields.  See subfields name, push_endpoint and ack_deadline for more information.}
$0
endsnippet

snippet gcpubsub_facts "List Topics/Subscriptions and Messages from Google PubSub."
- name:
	gcpubsub_facts:
		view: ${1:# Choices are 'topics' or 'subscriptions'}
		topic: ${2:# GCP pubsub topic name.  Only the name, not the full path, is required.}
		state: ${3:# list is the only valid option.}
$0
endsnippet

snippet gcspanner "Create and Delete Instances/Databases on Spanner."
- name:
	gcspanner:
		instance_id: ${1:# GCP spanner instance name.}
		configuration: ${2:# Configuration the instance should use. Examples are us-central1, asia-east1 and europe-west1.}
		state: ${3:present}
		instance_display_name: ${4:# Name of Instance to display.  If not specified, instance_id will be used instead.}
		database_name: ${5:# Name of database contained on the instance.}
		force_instance_delete: ${6:no}
		node_count: ${7:# Number of nodes in the instance.  If not specified while creating an instance, node_count will be set to 1.}
$0
endsnippet

snippet linode "create / delete / stop / restart an instance in Linode Public Cloud"
- name:
	linode:
		alert_diskio_enabled: ${1:#True|False}
		additional_disks: ${2:# L}
		alert_bwin_enabled: ${3:#True|False}
		payment_term: ${4:#1|12|24}
		alert_bwout_threshold: ${5:# Set threshold in MB of bandwidth out alerts.}
		alert_bwin_threshold: ${6:# Set threshold in MB of bandwidth in alerts.}
		alert_cpu_enabled: ${7:#True|False}
		alert_bwquota_enabled: ${8:#True|False}
		linode_id: ${9:# Unique ID of a linode server}
		alert_diskio_threshold: ${10:# Set threshold for average IO ops/sec over 2 hour period.}
		wait_timeout: ${11:300}
		private_ip: ${12:yes|#no}
		watchdog: ${13:#True|False}
		password: ${14:# root password to apply to a new server (auto generated if missing)}
		ssh_pub_key: ${15:# SSH public key applied to root user}
		wait: ${16:yes|#no}
		datacenter: ${17:# datacenter to create an instance in (Linode Datacenter)}
		alert_bwquota_threshold: ${18:# Set threshold in MB of bandwidth quota alerts.}
		backupweeklyday: ${19:# Integer value for what day of the week to store weekly backups.}
		name: ${20:# Name to give the instance (alphanumeric, dashes, underscore)}
		displaygroup: ${21:# Add the instance to a Display Group in Linode Manager}
		alert_cpu_threshold: ${22:# Set percentage threshold for receiving CPU usage alerts. Each CPU core adds 100% to total.}
		alert_bwout_enabled: ${23:#True|False}
		state: ${24:#present|active|started|absent|deleted|stopped|restarted}
		swap: ${25:512}
		distribution: ${26:# distribution to use for the instance (Linode Distribution)}
		api_key: ${27:# Linode API key}
		plan: ${28:# plan to use for the instance (Linode plan)}
$0
endsnippet

snippet lxc_container "Manage LXC Containers"
- name:
	lxc_container:
		name: ${1:# Name of a container.}
		archive_path: ${2:# Path the save the archived container. If the path does not exist the archive method will attempt to create it.}
		zfs_root: ${3:# Create zfs under given zfsroot.}
		container_log_level: ${4:#INFO|ERROR|DEBUG}
		template_options: ${5:# Template options when building the container.}
		container_command: ${6:# Run a command within a container.}
		clone_name: ${7:no}
		lxc_path: ${8:# Place container under PATH}
		container_config: ${9:# list of 'key=value' options to use when configuring a container.}
		fs_type: ${10:ext4}
		archive: ${11:True|#False}
		vg_name: ${12:lxc}
		clone_snapshot: ${13:True|#False}
		container_log: ${14:True|#False}
		lv_name: ${15:$CONTAINER_NAME}
		fs_size: ${16:5G}
		archive_compression: ${17:#gzip|bzip2|none}
		backing_store: ${18:#dir|lvm|loop|btrfs|overlayfs|zfs}
		state: ${19:#started|stopped|restarted|absent|frozen}
		thinpool: ${20:# Use LVM thin pool called TP.}
		template: ${21:ubuntu}
		directory: ${22:# Place rootfs directory under DIR.}
		config: ${23:# Path to the LXC configuration file.}
$0
endsnippet

snippet lxd_container "Manage LXD Containers"
- name:
	lxd_container:
		name: ${1:# Name of a container.}
		source: ${2:# The source for the container (e.g. { "type": "image", "mode": "pull", "server": "https://images.linuxcontainers.org", "protocol": "lxd", "alias": "ubuntu/xenial/amd64" }). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)}
		url: ${3:unix:/var/lib/lxd/unix.socket}
		config: ${4:# The config for the container (e.g. {"limits.cpu": "2"}). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)}
		cert_file: ${5:"{}/.config/lxc/client.crt" .format(os.environ["HOME"])}
		ephemeral: ${6:# Whether or not the container is ephemeral (e.g. true or false). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)}
		devices: ${7:# The devices for the container (e.g. { "rootfs": { "path": "/dev/kvm", "type": "unix-char" }). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)}
		wait_for_ipv4_addresses: ${8:no}
		state: ${9:#started|stopped|restarted|absent|frozen}
		architecture: ${10:# The architecture for the container (e.g. "x86_64" or "i686"). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1)}
		timeout: ${11:30}
		key_file: ${12:"{}/.config/lxc/client.key" .format(os.environ["HOME"])}
		trust_password: ${13:# The client trusted password.}
		force_stop: ${14:no}
$0
endsnippet

snippet lxd_profile "Manage LXD profiles"
- name:
	lxd_profile:
		name: ${1:# Name of a profile.}
		new_name: ${2:# A new name of a profile.}
		url: ${3:unix:/var/lib/lxd/unix.socket}
		config: ${4:# The config for the container (e.g. {"limits.memory": "4GB"}). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#patch-3)}
		cert_file: ${5:"{}/.config/lxc/client.crt" .format(os.environ["HOME"])}
		devices: ${6:# The devices for the profile (e.g. {"rootfs": {"path": "/dev/kvm", "type": "unix-char"}). See U(https://github.com/lxc/lxd/blob/master/doc/rest-api.md#patch-3)}
		state: ${7:#present|absent}
		key_file: ${8:"{}/.config/lxc/client.key" .format(os.environ["HOME"])}
		trust_password: ${9:# The client trusted password.}
$0
endsnippet

snippet ovirt "oVirt/RHEV platform management"
- name:
	ovirt:
		user: ${1:# the user to authenticate with}
		password: ${2:# password of the user to authenticate with}
		url: ${3:# the url of the oVirt instance}
		instance_name: ${4:# the name of the instance to use}
		instance_mem: ${5:# the instance's amount of memory in MB}
		instance_cores: ${6:1}
		instance_cpus: ${7:1}
		image: ${8:# template to use for the instance}
		instance_hostname: ${9:# define the instance's Hostname}
		instance_disksize: ${10:# size of the instance's disk in GB}
		instance_nic: ${11:# name of the network interface in oVirt/RHEV}
		instance_network: ${12:rhevm}
		instance_type: ${13:#server|desktop}
		sdomain: ${14:# the Storage Domain where you want to create the instance's disk on.}
		instance_os: ${15:# type of Operating System}
		instance_ip: ${16:# define the instance's IP}
		zone: ${17:# deploy the image to this oVirt cluster}
		disk_alloc: ${18:#thin|preallocated}
		region: ${19:# the oVirt/RHEV datacenter where you want to deploy to}
		instance_dns: ${20:# define the instance's Primary DNS server}
		instance_netmask: ${21:# define the instance's Netmask}
		state: ${22:#present|absent|shutdown|started|restarted}
		instance_key: ${23:# define the instance's Authorized key}
		instance_domain: ${24:# define the instance's Domain}
		instance_rootpw: ${25:# define the instance's Root password}
		resource_type: ${26:new|template}
		disk_int: ${27:#virtio|ide}
$0
endsnippet

snippet proxmox "management of instances in Proxmox VE cluster"
- name:
	proxmox:
		api_host: ${1:# the host of the Proxmox VE cluster}
		api_user: ${2:# the user to authenticate with}
		node: ${3:# Proxmox VE node, when new VM will be created}
		force: ${4:no}
		cpuunits: ${5:1000}
		vmid: ${6:# the instance id}
		api_password: ${7:# the password to authenticate with}
		cpus: ${8:1}
		ostemplate: ${9:# the template for VM creating}
		unprivileged: ${10:no}
		disk: ${11:3}
		ip_address: ${12:# specifies the address the container will be assigned}
		pool: ${13:# Proxmox VE resource pool}
		password: ${14:# the instance root password}
		searchdomain: ${15:# sets DNS search domain for a container}
		netif: ${16:# specifies network interfaces for the container. As a hash/dictionary defining interfaces.}
		validate_certs: ${17:no}
		hostname: ${18:# the instance hostname}
		storage: ${19:local}
		state: ${20:#present|started|absent|stopped|restarted}
		swap: ${21:0}
		timeout: ${22:30}
		memory: ${23:512}
		mounts: ${24:# specifies additional mounts (separate disks) for the container. As a hash/dictionary defining mount points}
		nameserver: ${25:# sets DNS server IP address for a container}
		pubkey: ${26:# Public key to add to /root/.ssh/authorized_keys. This was added on Proxmox 4.2, it is ignored for earlier versions}
		onboot: ${27:no}
$0
endsnippet

snippet proxmox_kvm "Management of Qemu(KVM) Virtual Machines in Proxmox VE cluster."
- name:
	proxmox_kvm:
		api_host: ${1:# Specify the target host of the Proxmox VE cluster.}
		api_user: ${2:# Specify the user to authenticate with.}
		revert: ${3:# Revert a pending change.}
		boot: ${4:cnd}
		migrate_speed: ${5:# Sets maximum speed (in MB/s) for migrations.}
		vga: ${6:#std|cirrus|vmware|qxl|serial0|serial1|serial2|serial3|qxl2|qxl3|qxl4}
		keyboard: ${7:# Sets the keyboard layout for VNC server.}
		watchdog: ${8:# Creates a virtual hardware watchdog device.}
		sockets: ${9:1}
		digest: ${10:# Specify if to prevent changes if current configuration file has different SHA1 digest.}
		tablet: ${11:yes|#no}
		bios: ${12:seabios|ovmf}
		hostpci: ${13:# Specify a hash/dictionary of map host pci devices into guest. C(hostpci='{"key":"value", "key":"value"}').}
		autostart: ${14:yes|#no}
		memory: ${15:512}
		migrate_downtime: ${16:# Sets maximum tolerated downtime (in seconds) for migrations.}
		localtime: ${17:yes|no}
		virtio: ${18:# A hash/dictionary of volume used as VIRTIO hard disk. C(virtio='{"key":"value", "key":"value"}').}
		format: ${19:cloop|cow|qcow|#qcow2|qed|raw|vmdk}
		snapname: ${20:# The name of the snapshot. Used only with clone.}
		hotplug: ${21:# Selectively enable hotplug features.}
		name: ${22:# Specifies the VM name. Only used on the configuration web interface.}
		target: ${23:# Target node. Only allowed if the original VM is on shared storage.}
		vmid: ${24:# Specifies the VM ID. Instead use I(name) parameter.}
		bootdisk: ${25:# Enable booting from specified disk. C((ide|sata|scsi|virtio)\d+)}
		vcpus: ${26:# Sets number of hotplugged vcpus.}
		newid: ${27:# VMID for the clone. Used only with clone.}
		timeout: ${28:30}
		skiplock: ${29:# Ignore locks}
		validate_certs: ${30:yes|#no}
		onboot: ${31:#yes|no}
		delete: ${32:# Specify a list of settings you want to delete.}
		force: ${33:yes|no}
		lock: ${34:migrate|backup|snapshot|rollback}
		startup: ${35:# Startup and shutdown behavior. C([[order=]\d+] [,up=\d+] [,down=\d+]).}
		agent: ${36:yes|no}
		freeze: ${37:yes|no}
		serial: ${38:# A hash/dictionary of serial device to create inside the VM. C('{"key":"value", "key":"value"}').}
		startdate: ${39:# Sets the initial date of the real time clock.}
		balloon: ${40:0}
		cpuunits: ${41:1000}
		storage: ${42:# Target storage for full clone.}
		reboot: ${43:yes|no}
		shares: ${44:# Rets amount of memory shares for auto-ballooning. (0 - 50000).}
		machine: ${45:# Specifies the Qemu machine type.}
		sata: ${46:# A hash/dictionary of volume used as sata hard disk or CD-ROM. C(sata='{"key":"value", "key":"value"}').}
		state: ${47:#present|started|absent|stopped|restarted|current}
		template: ${48:yes|#no}
		net: ${49:# A hash/dictionary of network interfaces for the VM. C(net='{"key":"value", "key":"value"}').}
		acpi: ${50:#yes|no}
		node: ${51:# Proxmox VE node, where the new VM will be created.}
		full: ${52:yes|no}
		description: ${53:# Specify the description for the VM. Only used on the configuration web interface.}
		scsihw: ${54:lsi|lsi53c810|virtio-scsi-pci|virtio-scsi-single|megasas|pvscsi}
		clone: ${55:# Name of VM to be cloned. If C(vmid) is setted, C(clone) can take arbitrary value but required for intiating the clone.}
		args: ${56:-serial unix:/var/run/qemu-server/VMID.serial,server,nowait}
		api_password: ${57:# Specify the password to authenticate with.}
		tdf: ${58:yes|no}
		update: ${59:yes|#no}
		kvm: ${60:#yes|no}
		ostype: ${61:other|wxp|w2k|w2k3|w2k8|wvista|win7|win8|l24|#l26|solaris}
		protection: ${62:yes|no}
		numa: ${63:# A hash/dictionaries of NUMA topology. C(numa='{"key":"value", "key":"value"}').}
		parallel: ${64:# A hash/dictionary of map host parallel devices. C(parallel='{"key":"value", "key":"value"}').}
		pool: ${65:# Add the new VM to the specified pool.}
		cpulimit: ${66:# Specify if CPU usage will be limited. Value 0 indicates no CPU limit.}
		hugepages: ${67:any|2|1024}
		smbios: ${68:# Specifies SMBIOS type 1 fields.}
		cores: ${69:1}
		scsi: ${70:# A hash/dictionary of volume used as SCSI hard disk or CD-ROM. C(scsi='{"key":"value", "key":"value"}').}
		ide: ${71:# A hash/dictionary of volume used as IDE hard disk or CD-ROM. C(ide='{"key":"value", "key":"value"}').}
		cpu: ${72:kvm64}
$0
endsnippet

snippet proxmox_template "management of OS templates in Proxmox VE cluster"
- name:
	proxmox_template:
		node: ${1:# Proxmox VE node, when you will operate with template}
		api_host: ${2:# the host of the Proxmox VE cluster}
		api_user: ${3:# the user to authenticate with}
		src: ${4:# path to uploaded file}
		force: ${5:no}
		api_password: ${6:# the password to authenticate with}
		storage: ${7:local}
		state: ${8:#present|absent}
		content_type: ${9:#vztmpl|iso}
		timeout: ${10:30}
		validate_certs: ${11:no}
		template: ${12:# the template name}
$0
endsnippet

snippet rhevm "RHEV/oVirt automation"
- name:
	rhevm:
		vmhost: ${1:# The host you wish your VM to run on.}
		vmmem: ${2:1}
		cd_drive: ${3:# The CD you wish to have mounted on the VM when I(state = 'CD').}
		image: ${4:# The template to use for the VM.}
		cpu_share: ${5:0}
		insecure_api: ${6:no}
		cluster: ${7:# The rhev/ovirt cluster in which you want you VM to start.}
		user: ${8:admin@internal}
		port: ${9:443}
		vm_ha: ${10:yes}
		disks: ${11:# This option uses complex arguments and is a list of disks with the options name, size and domain.}
		datacenter: ${12:Default}
		name: ${13:# The name of the VM.}
		ifaces: ${14:# This option uses complex arguments and is a list of interfaces with the options name and vlan.}
		server: ${15:127.0.0.1}
		state: ${16:ping|#present|absent|up|down|restarted|cd|info}
		osver: ${17:rhel_6x64}
		mempol: ${18:1}
		timeout: ${19:# The timeout you wish to define for power actions.}
		del_prot: ${20:yes}
		boot_order: ${21:[u'network', u'hd']}
		type: ${22:#server|desktop|host}
		vmcpu: ${23:2}
$0
endsnippet

snippet serverless "Manages a Serverless Framework project"
- name:
	serverless:
		service_path: ${1:# The path to the root of the Serverless Service to be operated on.}
		region: ${2:us-east-1}
		functions: ${3:[]}
		state: ${4:#present|absent}
		deploy: ${5:yes}
$0
endsnippet

snippet virt "Manages virtual machines supported by libvirt"
- name:
	virt:
		name: ${1:# name of the guest VM being managed. Note that VM must be previously defined with xml.}
		xml: ${2:# XML document used with the define command}
		state: ${3:running|shutdown|destroyed|paused}
		command: ${4:create|status|start|stop|pause|unpause|shutdown|undefine|destroy|get_xml|freemem|list_vms|info|nodeinfo|virttype|define}
		autostart: ${5:True|False}
		uri: ${6:qemu:///system}
$0
endsnippet

snippet virt_net "Manage libvirt network configuration"
- name:
	virt_net:
		name: ${1:# name of the network being managed. Note that network must be previously defined with xml.}
		xml: ${2:# XML document used with the define command.}
		state: ${3:active|inactive|present|absent}
		command: ${4:define|create|start|stop|destroy|undefine|get_xml|list_nets|facts|info|status|modify}
		autostart: ${5:yes|no}
		uri: ${6:qemu:///system}
$0
endsnippet

snippet virt_pool "Manage libvirt storage pools"
- name:
	virt_pool:
		xml: ${1:# XML document used with the define command.}
		state: ${2:active|inactive|present|absent|undefined|deleted}
		command: ${3:define|build|create|start|stop|destroy|delete|undefine|get_xml|list_pools|facts|info|status}
		name: ${4:# name of the storage pool being managed. Note that pool must be previously defined with xml.}
		autostart: ${5:yes|no}
		uri: ${6:qemu:///system}
		mode: ${7:new|repair|resize|no_overwrite|overwrite|normal|zeroed}
$0
endsnippet

snippet xenserver_facts "get facts reported on xenserver"
- name:
	xenserver_facts:
$0
endsnippet

snippet os_auth "Retrieve an auth token"
- name:
	os_auth:
		auth_type: ${1:password}
		region_name: ${2:# Name of the region.}
		availability_zone: ${3:# Ignored. Present for backwards compatability}
		api_timeout: ${4:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${5:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${6:# A path to a client key to use as part of the SSL transaction.}
		cert: ${7:# A path to a client certificate to use as part of the SSL transaction.}
		endpoint_type: ${8:#public|internal|admin}
		timeout: ${9:180}
		cacert: ${10:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		validate_certs: ${11:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${12:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${13:#yes|no}
$0
endsnippet

snippet os_client_config "Get OpenStack Client config"
- name:
	os_client_config:
		clouds: ${1:[]}
$0
endsnippet

snippet os_flavor_facts "Retrieve facts about one or more flavors"
- name:
	os_flavor_facts:
		auth_type: ${1:password}
		api_timeout: ${2:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		region_name: ${3:# Name of the region.}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		ram: ${5:no}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${10:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${11:#yes|no}
		name: ${12:# A flavor name. Cannot be used with I(ram) or I(vcpus) or I(ephemeral).}
		ephemeral: ${13:no}
		cert: ${14:# A path to a client certificate to use as part of the SSL transaction.}
		vcpus: ${15:no}
		limit: ${16:# Limits the number of flavors returned. All matching flavors are returned by default.}
		timeout: ${17:180}
		validate_certs: ${18:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_floating_ip "Add/Remove floating IP from an instance"
- name:
	os_floating_ip:
		server: ${1:# The name or ID of the instance to which the IP address should be assigned.}
		auth_type: ${2:password}
		reuse: ${3:no}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		floating_ip_address: ${8:# A floating IP address to attach or to detach. Required only if I(state) is absent. When I(state) is present can be used to specify a IP address to attach.}
		key: ${9:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${10:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${12:#yes|no}
		fixed_address: ${13:# To which fixed IP of server the floating IP address should be attached to.}
		network: ${14:# The name or ID of a neutron external network or a nova pool name.}
		region_name: ${15:# Name of the region.}
		cert: ${16:# A path to a client certificate to use as part of the SSL transaction.}
		nat_destination: ${17:# The name or id of a neutron private network that the fixed IP to attach floating IP is on}
		purge: ${18:no}
		state: ${19:#present|absent}
		timeout: ${20:180}
		validate_certs: ${21:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_group "Manage OpenStack Identity Groups"
- name:
	os_group:
		name: ${1:# Group name}
		auth_type: ${2:password}
		description: ${3:# Group description}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		domain_id: ${10:# Domain id to create the group in if the cloud supports domains.}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		region_name: ${12:# Name of the region.}
		cert: ${13:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${14:#present|absent}
		timeout: ${15:180}
		wait: ${16:#yes|no}
		validate_certs: ${17:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_image "Add/Delete images from OpenStack Cloud"
- name:
	os_image:
		name: ${1:# Name that has to be given to the image}
		ramdisk: ${2:# The name of an existing ramdisk image that will be associated with this image}
		kernel: ${3:# The name of an existing kernel image that will be associated with this image}
		region_name: ${4:# Name of the region.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		container_format: ${6:bare}
		min_ram: ${7:# The minimum ram (in MB) required to boot this image}
		api_timeout: ${8:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${9:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		min_disk: ${10:# The minimum disk space (in GB) required to boot this image}
		endpoint_type: ${11:#public|internal|admin}
		key: ${12:# A path to a client key to use as part of the SSL transaction.}
		owner: ${13:# The owner of the image}
		is_public: ${14:yes}
		properties: ${15:{}}
		cloud: ${16:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${17:#yes|no}
		cacert: ${18:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		disk_format: ${19:qcow2}
		cert: ${20:# A path to a client certificate to use as part of the SSL transaction.}
		auth_type: ${21:password}
		filename: ${22:# The path to the file which has to be uploaded}
		state: ${23:#present|absent}
		timeout: ${24:180}
		validate_certs: ${25:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_image_facts "Retrieve facts about an image within OpenStack."
- name:
	os_image_facts:
		image: ${1:# Name or ID of the image}
		auth_type: ${2:password}
		region_name: ${3:# Name of the region.}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${7:# A path to a client key to use as part of the SSL transaction.}
		cert: ${8:# A path to a client certificate to use as part of the SSL transaction.}
		endpoint_type: ${9:#public|internal|admin}
		timeout: ${10:180}
		cacert: ${11:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		validate_certs: ${12:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${13:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${14:#yes|no}
$0
endsnippet

snippet os_ironic "Create/Delete Bare Metal Resources from OpenStack"
- name:
	os_ironic:
		driver: ${1:# The name of the Ironic Driver to use with this node.}
		nics: ${2:# A list of network interface cards, eg, " - mac: aa:bb:cc:aa:bb:cc"}
		auth_type: ${3:password}
		region_name: ${4:# Name of the region.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${8:#public|internal|admin}
		key: ${9:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${10:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		properties: ${11:# Definition of the physical characteristics of this server, used for scheduling purposes}
		cloud: ${12:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		name: ${13:# unique name identifier to be given to the resource.}
		timeout: ${14:180}
		cert: ${15:# A path to a client certificate to use as part of the SSL transaction.}
		uuid: ${16:# globally unique identifier (UUID) to be given to the resource. Will be auto-generated if not specified, and name is specified.}
		driver_info: ${17:# Information for this server's driver. Will vary based on which driver is in use. Any sub-field which is populated will be validated during creation.}
		ironic_url: ${18:# If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with "auth" and "auth_type" settings set to None.}
		validate_certs: ${19:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		state: ${20:#present|absent}
		chassis_uuid: ${21:# Associate the node with a pre-defined chassis.}
		wait: ${22:#yes|no}
		skip_update_of_driver_password: ${23:no}
$0
endsnippet

snippet os_ironic_inspect "Explicitly triggers baremetal node introspection in ironic."
- name:
	os_ironic_inspect:
		auth_type: ${1:password}
		region_name: ${2:# Name of the region.}
		availability_zone: ${3:# Ignored. Present for backwards compatability}
		api_timeout: ${4:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${5:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		mac: ${6:# unique mac address that is used to attempt to identify the host.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${10:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		name: ${11:# unique name identifier to identify the host in Ironic.}
		uuid: ${12:# globally unique identifier (UUID) to identify the host.}
		cert: ${13:# A path to a client certificate to use as part of the SSL transaction.}
		ironic_url: ${14:# If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API. Use with "auth" and "auth_type" settings set to None.}
		timeout: ${15:180}
		wait: ${16:#yes|no}
		validate_certs: ${17:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_ironic_node "Activate/Deactivate Bare Metal Resources from OpenStack"
- name:
	os_ironic_node:
		auth_type: ${1:password}
		timeout: ${2:180}
		power: ${3:#present|absent}
		deploy: ${4:true|false}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		maintenance_reason: ${6:# A string expression regarding the reason a node is in a maintenance mode.}
		endpoint_type: ${7:#public|internal|admin}
		auth: ${8:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${9:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${10:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${12:#yes|no}
		uuid: ${13:# globally unique identifier (UUID) to be given to the resource.}
		region_name: ${14:# Name of the region.}
		cert: ${15:# A path to a client certificate to use as part of the SSL transaction.}
		availability_zone: ${16:# Ignored. Present for backwards compatability}
		ironic_url: ${17:# If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with "auth" and "auth_type" settings set to None.}
		state: ${18:#present|absent}
		maintenance: ${19:no}
		validate_certs: ${20:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		instance_info: ${21:# Definition of the instance information which is used to deploy the node.  This information is only required when an instance is set to present.}
		config_drive: ${22:# A configdrive file or HTTP(S) URL that will be passed along to the node.}
$0
endsnippet

snippet os_keypair "Add/Delete a keypair from OpenStack"
- name:
	os_keypair:
		name: ${1:# Name that has to be given to the key pair}
		auth_type: ${2:password}
		region_name: ${3:# Name of the region.}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		public_key_file: ${10:# Path to local file containing ssh public key. Mutually exclusive with public_key.}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${12:#yes|no}
		public_key: ${13:# The public key that would be uploaded to nova and injected into VMs upon creation.}
		cert: ${14:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${15:#present|absent}
		timeout: ${16:180}
		validate_certs: ${17:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_keystone_domain "Manage OpenStack Identity Domains"
- name:
	os_keystone_domain:
		name: ${1:# Name that has to be given to the instance}
		auth_type: ${2:password}
		description: ${3:# Description of the domain}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${10:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		region_name: ${11:# Name of the region.}
		enabled: ${12:yes}
		cert: ${13:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${14:#present|absent}
		timeout: ${15:180}
		wait: ${16:#yes|no}
		validate_certs: ${17:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_keystone_domain_facts "Retrieve facts about one or more OpenStack domains"
- name:
	os_keystone_domain_facts:
		name: ${1:# Name or ID of the domain}
		auth_type: ${2:password}
		availability_zone: ${3:# Ignored. Present for backwards compatability}
		api_timeout: ${4:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		timeout: ${5:180}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${7:# A path to a client key to use as part of the SSL transaction.}
		cert: ${8:# A path to a client certificate to use as part of the SSL transaction.}
		endpoint_type: ${9:#public|internal|admin}
		filters: ${10:# A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.}
		cacert: ${11:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		wait: ${12:#yes|no}
		validate_certs: ${13:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${14:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		region_name: ${15:# Name of the region.}
$0
endsnippet

snippet os_keystone_role "Manage OpenStack Identity Roles"
- name:
	os_keystone_role:
		name: ${1:# Role Name}
		auth_type: ${2:password}
		availability_zone: ${3:# Ignored. Present for backwards compatability}
		api_timeout: ${4:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		cert: ${5:# A path to a client certificate to use as part of the SSL transaction.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${7:# A path to a client key to use as part of the SSL transaction.}
		state: ${8:#present|absent}
		endpoint_type: ${9:#public|internal|admin}
		timeout: ${10:180}
		cacert: ${11:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		wait: ${12:#yes|no}
		validate_certs: ${13:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${14:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		region_name: ${15:# Name of the region.}
$0
endsnippet

snippet os_keystone_service "Manage OpenStack Identity services"
- name:
	os_keystone_service:
		name: ${1:# Name of the service}
		service_type: ${2:# The type of service}
		auth_type: ${3:password}
		description: ${4:# Description of the service}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${8:#public|internal|admin}
		key: ${9:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${10:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		region_name: ${12:# Name of the region.}
		enabled: ${13:yes}
		cert: ${14:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${15:#present|absent}
		timeout: ${16:180}
		wait: ${17:#yes|no}
		validate_certs: ${18:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_network "Creates/removes networks from OpenStack"
- name:
	os_network:
		name: ${1:# Name to be assigned to the network.}
		auth_type: ${2:password}
		region_name: ${3:# Name of the region.}
		provider_network_type: ${4:# The type of physical network that maps to this network resource.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		provider_physical_network: ${8:# The physical network where this network object is implemented.}
		endpoint_type: ${9:#public|internal|admin}
		external: ${10:no}
		key: ${11:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${12:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${13:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${14:#yes|no}
		admin_state_up: ${15:yes}
		cert: ${16:# A path to a client certificate to use as part of the SSL transaction.}
		project: ${17:# Project name or ID containing the network (name admin-only)}
		state: ${18:#present|absent}
		provider_segmentation_id: ${19:# An isolated segment on the physical network. The I(network_type) attribute defines the segmentation model. For example, if the I(network_type) value is vlan, this ID is a vlan identifier. If the I(network_type) value is gre, this ID is a gre key.}
		timeout: ${20:180}
		shared: ${21:no}
		validate_certs: ${22:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_networks_facts "Retrieve facts about one or more OpenStack networks."
- name:
	os_networks_facts:
		auth_type: ${1:password}
		name: ${2:# Name or ID of the Network}
		availability_zone: ${3:# Ignored. Present for backwards compatability}
		api_timeout: ${4:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		timeout: ${5:180}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${7:# A path to a client key to use as part of the SSL transaction.}
		cert: ${8:# A path to a client certificate to use as part of the SSL transaction.}
		endpoint_type: ${9:#public|internal|admin}
		filters: ${10:# A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.}
		cacert: ${11:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		wait: ${12:#yes|no}
		validate_certs: ${13:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${14:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		region_name: ${15:# Name of the region.}
$0
endsnippet

snippet os_nova_flavor "Manage OpenStack compute flavors"
- name:
	os_nova_flavor:
		name: ${1:# Flavor name.}
		auth_type: ${2:password}
		api_timeout: ${3:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		region_name: ${4:# Name of the region.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		ram: ${6:# Amount of memory, in MB.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${8:#public|internal|admin}
		extra_specs: ${9:# Metadata dictionary}
		key: ${10:# A path to a client key to use as part of the SSL transaction.}
		rxtx_factor: ${11:1.0}
		cacert: ${12:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		is_public: ${13:yes}
		disk: ${14:# Size of local disk, in GB.}
		cloud: ${15:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${16:#yes|no}
		flavorid: ${17:auto}
		cert: ${18:# A path to a client certificate to use as part of the SSL transaction.}
		ephemeral: ${19:0}
		vcpus: ${20:# Number of virtual CPUs.}
		state: ${21:#present|absent}
		swap: ${22:0}
		timeout: ${23:180}
		validate_certs: ${24:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_nova_host_aggregate "Manage OpenStack host aggregates"
- name:
	os_nova_host_aggregate:
		name: ${1:# N}
		auth_type: ${2:password}
		region_name: ${3:# Name of the region.}
		availability_zone: ${4:# A}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${10:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${11:#yes|no}
		cert: ${12:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${13:#present|absent}
		hosts: ${14:# L}
		timeout: ${15:180}
		validate_certs: ${16:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		metadata: ${17:# M}
$0
endsnippet

snippet os_object "Create or Delete objects and containers from OpenStack"
- name:
	os_object:
		container: ${1:# The name of the container in which to create the object}
		auth_type: ${2:password}
		region_name: ${3:# Name of the region.}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${10:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${11:#yes|no}
		name: ${12:# Name to be give to the object. If omitted, operations will be on the entire container}
		cert: ${13:# A path to a client certificate to use as part of the SSL transaction.}
		filename: ${14:# Path to local file to be uploaded.}
		state: ${15:#present|absent}
		timeout: ${16:180}
		validate_certs: ${17:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		container_access: ${18:#private|public}
$0
endsnippet

snippet os_port "Add/Update/Delete ports from an OpenStack cloud."
- name:
	os_port:
		network: ${1:# Network ID or name this port belongs to.}
		auth_type: ${2:password}
		region_name: ${3:# Name of the region.}
		allowed_address_pairs: ${4:# Allowed address pairs list.  Allowed address pairs are supported with dictionary structure. e.g.  allowed_address_pairs: - ip_address: 10.1.0.12 mac_address: ab:cd:ef:12:34:56 - ip_address: ...}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		extra_dhcp_opts: ${6:# Extra dhcp options to be assigned to this port.  Extra options are supported with dictionary structure. e.g.  extra_dhcp_opts: - opt_name: opt name1 opt_value: value1 - opt_name: ...}
		api_timeout: ${7:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${8:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		device_owner: ${9:# The ID of the entity that uses this port.}
		endpoint_type: ${10:#public|internal|admin}
		key: ${11:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${12:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		fixed_ips: ${13:# Desired IP and/or subnet for this port.  Subnet is referenced by subnet_id and IP is referenced by ip_address.}
		security_groups: ${14:# Security group(s) ID(s) or name(s) associated with the port (comma separated string or YAML list)}
		name: ${15:# Name that has to be given to the port.}
		admin_state_up: ${16:# Sets admin state.}
		cert: ${17:# A path to a client certificate to use as part of the SSL transaction.}
		wait: ${18:#yes|no}
		state: ${19:#present|absent}
		no_security_groups: ${20:no}
		cloud: ${21:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		timeout: ${22:180}
		mac_address: ${23:# MAC address of this port.}
		device_id: ${24:# Device ID of device using this port.}
		validate_certs: ${25:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_port_facts "Retrieve facts about ports within OpenStack."
- name:
	os_port_facts:
		auth_type: ${1:password}
		region_name: ${2:# Name of the region.}
		availability_zone: ${3:# Ignored. Present for backwards compatability}
		api_timeout: ${4:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		timeout: ${5:180}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${7:# A path to a client key to use as part of the SSL transaction.}
		cert: ${8:# A path to a client certificate to use as part of the SSL transaction.}
		endpoint_type: ${9:#public|internal|admin}
		filters: ${10:# A dictionary of meta data to use for further filtering. Elements of this dictionary will be matched against the returned port dictionaries. Matching is currently limited to strings within the port dictionary, or strings within nested dictionaries.}
		cacert: ${11:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		validate_certs: ${12:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		port: ${13:# Unique name or ID of a port.}
		cloud: ${14:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${15:#yes|no}
$0
endsnippet

snippet os_project "Manage OpenStack Projects"
- name:
	os_project:
		name: ${1:# Name for the project}
		auth_type: ${2:password}
		description: ${3:# Description for the project}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		domain_id: ${10:# Domain id to create the project in if the cloud supports domains. The domain_id parameter requires shade >= 1.8.0}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		region_name: ${12:# Name of the region.}
		enabled: ${13:yes}
		cert: ${14:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${15:#present|absent}
		timeout: ${16:180}
		wait: ${17:#yes|no}
		validate_certs: ${18:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_project_facts "Retrieve facts about one or more OpenStack projects"
- name:
	os_project_facts:
		name: ${1:# Name or ID of the project}
		auth_type: ${2:password}
		domain: ${3:# Name or ID of the domain containing the project if the cloud supports domains}
		region_name: ${4:# Name of the region.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		endpoint_type: ${9:#public|internal|admin}
		filters: ${10:# A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.}
		cacert: ${11:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${12:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${13:#yes|no}
		cert: ${14:# A path to a client certificate to use as part of the SSL transaction.}
		timeout: ${15:180}
		validate_certs: ${16:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_quota "Manage OpenStack Quotas"
- name:
	os_quota:
		name: ${1:# Name of the OpenStack Project to manage.}
		snapshots_lvm: ${2:# N}
		server_groups: ${3:# N}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		ram: ${5:# M}
		snapshots: ${6:# N}
		instances: ${7:# M}
		backups: ${8:# M}
		fixed_ips: ${9:# N}
		port: ${10:# N}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		subnet: ${12:# N}
		per_volume_gigabytes: ${13:# M}
		network: ${14:# N}
		floatingip: ${15:# N}
		volumes_lvm: ${16:# N}
		floating_ips: ${17:# N}
		auth_type: ${18:password}
		security_group_rule: ${19:# N}
		state: ${20:present}
		injected_files: ${21:# N}
		rbac_policy: ${22:# N}
		wait: ${23:#yes|no}
		api_timeout: ${24:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		injected_path_size: ${25:# M}
		region_name: ${26:# Name of the region.}
		gigabytes: ${27:# M}
		backup_gigabytes: ${28:# M}
		subnetpool: ${29:# N}
		key_pairs: ${30:# N}
		endpoint_type: ${31:#public|internal|admin}
		injected_file_size: ${32:# M}
		key: ${33:# A path to a client key to use as part of the SSL transaction.}
		router: ${34:# N}
		cacert: ${35:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		properties: ${36:# N}
		server_group_members: ${37:# N}
		validate_certs: ${38:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		timeout: ${39:180}
		cert: ${40:# A path to a client certificate to use as part of the SSL transaction.}
		volumes: ${41:# N}
		gigabytes_lvm: ${42:# M}
		security_group: ${43:# N}
		cores: ${44:# M}
		auth: ${45:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
$0
endsnippet

snippet os_recordset "Manage OpenStack DNS recordsets"
- name:
	os_recordset:
		name: ${1:# Name of the recordset}
		zone: ${2:# Zone managing the recordset}
		records: ${3:# List of recordset definitions}
		recordset_type: ${4:# Recordset type}
		auth_type: ${5:password}
		availability_zone: ${6:# Ignored. Present for backwards compatability}
		api_timeout: ${7:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		cert: ${8:# A path to a client certificate to use as part of the SSL transaction.}
		auth: ${9:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${10:# A path to a client key to use as part of the SSL transaction.}
		state: ${11:#present|absent}
		endpoint_type: ${12:#public|internal|admin}
		region_name: ${13:# Name of the region.}
		timeout: ${14:180}
		ttl: ${15:# TTL (Time To Live) value in seconds}
		cacert: ${16:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		wait: ${17:#yes|no}
		validate_certs: ${18:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${19:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		description: ${20:# Description of the recordset}
$0
endsnippet

snippet os_router "Create or delete routers from OpenStack"
- name:
	os_router:
		name: ${1:# Name to be give to the router}
		auth_type: ${2:password}
		key: ${3:# A path to a client key to use as part of the SSL transaction.}
		enable_snat: ${4:yes}
		network: ${5:# Unique name or ID of the external gateway network.}
		region_name: ${6:# Name of the region.}
		admin_state_up: ${7:yes}
		cert: ${8:# A path to a client certificate to use as part of the SSL transaction.}
		interfaces: ${9:# List of subnets to attach to the router internal interface.}
		availability_zone: ${10:# Ignored. Present for backwards compatability}
		timeout: ${11:180}
		auth: ${12:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		project: ${13:# Unique name or ID of the project.}
		state: ${14:#present|absent}
		endpoint_type: ${15:#public|internal|admin}
		api_timeout: ${16:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		cacert: ${17:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		wait: ${18:#yes|no}
		validate_certs: ${19:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${20:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		external_fixed_ips: ${21:# The IP address parameters for the external gateway network. Each is a dictionary with the subnet name or ID (subnet) and the IP address to assign on the subnet (ip). If no IP is specified, one is automatically assigned from that subnet.}
$0
endsnippet

snippet os_security_group "Add/Delete security groups from an OpenStack cloud."
- name:
	os_security_group:
		name: ${1:# Name that has to be given to the security group. This module requires that security group names be unique.}
		auth_type: ${2:password}
		description: ${3:# Long description of the purpose of the security group}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${10:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		region_name: ${11:# Name of the region.}
		cert: ${12:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${13:#present|absent}
		timeout: ${14:180}
		wait: ${15:#yes|no}
		validate_certs: ${16:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_security_group_rule "Add/Delete rule from an existing security group"
- name:
	os_security_group_rule:
		security_group: ${1:# Name or ID of the security group}
		auth_type: ${2:password}
		direction: ${3:egress|#ingress}
		protocol: ${4:tcp|udp|icmp|112|#None}
		region_name: ${5:# Name of the region.}
		availability_zone: ${6:# Ignored. Present for backwards compatability}
		port_range_max: ${7:# Ending port}
		api_timeout: ${8:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${9:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${10:#public|internal|admin}
		key: ${11:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${12:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${13:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${14:#yes|no}
		remote_ip_prefix: ${15:# Source IP address(es) in CIDR notation (exclusive with remote_group)}
		remote_group: ${16:# Name or ID of the Security group to link (exclusive with remote_ip_prefix)}
		cert: ${17:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${18:#present|absent}
		port_range_min: ${19:# Starting port}
		timeout: ${20:180}
		ethertype: ${21:#IPv4|IPv6}
		validate_certs: ${22:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_server "Create/Delete Compute Instances from OpenStack"
- name:
	os_server:
		name: ${1:# Name that has to be given to the instance}
		image: ${2:# The name or id of the base image to boot.}
		auth_type: ${3:password}
		volumes: ${4:[]}
		availability_zone: ${5:# Availability zone in which to create the server.}
		key_name: ${6:# The key pair name to be used when creating a instance}
		api_timeout: ${7:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		image_exclude: ${8:# Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the common identifying portions. image_exclude is a negative match filter - it is text that may not exist in the image name. Defaults to "(deprecated)"}
		boot_volume: ${9:# Volume name or id to use as the volume to boot from. Implies boot_from_volume. Mutually exclusive with image and boot_from_volume.}
		flavor_include: ${10:# Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have the same ram count. flavor_include is a positive match filter - it must exist in the flavor name.}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		meta: ${12:# A list of key value pairs that should be provided as a metadata to the new instance or a string containing a list of key-value pairs. Eg:  meta: "key1=value1,key2=value2"}
		auth: ${13:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${14:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${15:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		terminate_volume: ${16:no}
		flavor: ${17:1}
		delete_fip: ${18:no}
		security_groups: ${19:# Names of the security groups to which the instance should be added. This may be a YAML list or a comma separated string.}
		scheduler_hints: ${20:# Arbitrary key/value pairs to the scheduler for custom use}
		boot_from_volume: ${21:no}
		userdata: ${22:# Opaque blob of data which is made available to the instance}
		cert: ${23:# A path to a client certificate to use as part of the SSL transaction.}
		network: ${24:# Name or ID of a network to attach this instance to. A simpler version of the nics parameter, only one of network or nics should be supplied.}
		region_name: ${25:# Name of the region.}
		nics: ${26:# A list of networks to which the instance's interface should be attached. Networks may be referenced by net-id/net-name/port-id or port-name.}
		floating_ips: ${27:# list of valid floating IPs that pre-exist to assign to this node}
		flavor_ram: ${28:1}
		volume_size: ${29:# The size of the volume to create in GB if booting from volume based on an image.}
		state: ${30:#present|absent}
		endpoint_type: ${31:#public|internal|admin}
		auto_ip: ${32:yes}
		config_drive: ${33:no}
		timeout: ${34:180}
		wait: ${35:#yes|no}
		validate_certs: ${36:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		reuse_ips: ${37:yes}
		floating_ip_pools: ${38:# Name of floating IP pool from which to choose a floating IP}
$0
endsnippet

snippet os_server_actions "Perform actions on Compute Instances from OpenStack"
- name:
	os_server_actions:
		server: ${1:# Name or ID of the instance}
		auth_type: ${2:password}
		region_name: ${3:# Name of the region.}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		image: ${5:# Image the server should be rebuilt with}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${8:#public|internal|admin}
		key: ${9:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${10:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${12:#yes|no}
		cert: ${13:# A path to a client certificate to use as part of the SSL transaction.}
		timeout: ${14:180}
		action: ${15:stop|start|pause|unpause|lock|unlock|suspend|resume|rebuild}
		validate_certs: ${16:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_server_facts "Retrieve facts about one or more compute instances"
- name:
	os_server_facts:
		detailed: ${1:no}
		auth_type: ${2:password}
		region_name: ${3:# Name of the region.}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		server: ${7:# restrict results to servers with names or UUID matching this glob expression (e.g., C<web*>).}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cert: ${9:# A path to a client certificate to use as part of the SSL transaction.}
		endpoint_type: ${10:#public|internal|admin}
		timeout: ${11:180}
		cacert: ${12:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		validate_certs: ${13:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${14:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${15:#yes|no}
$0
endsnippet

snippet os_server_group "Manage OpenStack server groups"
- name:
	os_server_group:
		name: ${1:# Server group name.}
		auth_type: ${2:password}
		region_name: ${3:# Name of the region.}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${6:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${7:#public|internal|admin}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${9:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${10:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${11:#yes|no}
		cert: ${12:# A path to a client certificate to use as part of the SSL transaction.}
		timeout: ${13:180}
		state: ${14:#present|absent}
		policies: ${15:# A list of one or more policy names to associate with the server group. The list must contain at least one policy name. The current valid policy names are anti-affinity, affinity, soft-anti-affinity and soft-affinity.}
		validate_certs: ${16:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_server_volume "Attach/Detach Volumes from OpenStack VM's"
- name:
	os_server_volume:
		volume: ${1:# Name or id of volume you want to attach to a server}
		server: ${2:# Name or ID of server you want to attach a volume to}
		auth_type: ${3:password}
		region_name: ${4:# Name of the region.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		cacert: ${8:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		endpoint_type: ${9:#public|internal|admin}
		key: ${10:# A path to a client key to use as part of the SSL transaction.}
		device: ${11:# Device you want to attach. Defaults to auto finding a device name.}
		cloud: ${12:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${13:#yes|no}
		cert: ${14:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${15:#present|absent}
		timeout: ${16:180}
		validate_certs: ${17:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_stack "Add/Remove Heat Stack"
- name:
	os_stack:
		name: ${1:# Name of the stack that should be created, name could be char and digit, no space}
		auth_type: ${2:password}
		key: ${3:# A path to a client key to use as part of the SSL transaction.}
		rollback: ${4:no}
		parameters: ${5:# Dictionary of parameters for the stack creation}
		availability_zone: ${6:# Ignored. Present for backwards compatability}
		api_timeout: ${7:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		cert: ${8:# A path to a client certificate to use as part of the SSL transaction.}
		auth: ${9:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		environment: ${10:# List of environment files that should be used for the stack creation}
		state: ${11:#present|absent}
		endpoint_type: ${12:#public|internal|admin}
		region_name: ${13:# Name of the region.}
		timeout: ${14:180}
		cacert: ${15:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		wait: ${16:#yes|no}
		validate_certs: ${17:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${18:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		template: ${19:# Path of the template file to use for the stack creation}
$0
endsnippet

snippet os_subnet "Add/Remove subnet to an OpenStack network"
- name:
	os_subnet:
		name: ${1:# The name of the subnet that should be created. Although Neutron allows for non-unique subnet names, this module enforces subnet name uniqueness.}
		auth_type: ${2:password}
		no_gateway_ip: ${3:no}
		use_default_subnetpool: ${4:no}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		ipv6_ra_mode: ${8:dhcpv6-stateful|dhcpv6-stateless|slaac}
		endpoint_type: ${9:#public|internal|admin}
		host_routes: ${10:# A list of host route dictionaries for the subnet.}
		key: ${11:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${12:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		ipv6_address_mode: ${13:dhcpv6-stateful|dhcpv6-stateless|slaac}
		cidr: ${14:# The CIDR representation of the subnet that should be assigned to the subnet. Required when I(state) is 'present' and a subnetpool is not specified.}
		network_name: ${15:# Name of the network to which the subnet should be attached}
		allocation_pool_end: ${16:# From the subnet pool the last IP that should be assigned to the virtual machines.}
		region_name: ${17:# Name of the region.}
		enable_dhcp: ${18:yes}
		dns_nameservers: ${19:# List of DNS nameservers for this subnet.}
		cert: ${20:# A path to a client certificate to use as part of the SSL transaction.}
		project: ${21:# Project name or ID containing the subnet (name admin-only)}
		state: ${22:#present|absent}
		allocation_pool_start: ${23:# From the subnet pool the starting address from which the IP should be allocated.}
		gateway_ip: ${24:# The ip that would be assigned to the gateway for this subnet}
		cloud: ${25:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		timeout: ${26:180}
		ip_version: ${27:4}
		wait: ${28:#yes|no}
		validate_certs: ${29:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_subnets_facts "Retrieve facts about one or more OpenStack subnets."
- name:
	os_subnets_facts:
		auth_type: ${1:password}
		subnet: ${2:# Name or ID of the subnet}
		region_name: ${3:# Name of the region.}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		api_timeout: ${5:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		timeout: ${6:180}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		cert: ${9:# A path to a client certificate to use as part of the SSL transaction.}
		endpoint_type: ${10:#public|internal|admin}
		filters: ${11:# A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.}
		cacert: ${12:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		validate_certs: ${13:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		cloud: ${14:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${15:#yes|no}
$0
endsnippet

snippet os_user "Manage OpenStack Identity Users"
- name:
	os_user:
		name: ${1:# Username for the user}
		auth_type: ${2:password}
		domain: ${3:# Domain to create the user in if the cloud supports domains}
		availability_zone: ${4:# Ignored. Present for backwards compatability}
		cert: ${5:# A path to a client certificate to use as part of the SSL transaction.}
		update_password: ${6:#always|on_create}
		api_timeout: ${7:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		enabled: ${8:yes}
		default_project: ${9:# Project name or ID that the user should be associated with by default}
		auth: ${10:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${11:# A path to a client key to use as part of the SSL transaction.}
		state: ${12:#present|absent}
		endpoint_type: ${13:#public|internal|admin}
		timeout: ${14:180}
		cacert: ${15:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		wait: ${16:#yes|no}
		password: ${17:# Password for the user}
		validate_certs: ${18:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		email: ${19:# Email address for the user}
		cloud: ${20:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		region_name: ${21:# Name of the region.}
$0
endsnippet

snippet os_user_facts "Retrieve facts about one or more OpenStack users"
- name:
	os_user_facts:
		name: ${1:# Name or ID of the user}
		auth_type: ${2:password}
		domain: ${3:# Name or ID of the domain containing the user if the cloud supports domains}
		region_name: ${4:# Name of the region.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${8:# A path to a client key to use as part of the SSL transaction.}
		endpoint_type: ${9:#public|internal|admin}
		filters: ${10:# A dictionary of meta data to use for further filtering.  Elements of this dictionary may be additional dictionaries.}
		cacert: ${11:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${12:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${13:#yes|no}
		cert: ${14:# A path to a client certificate to use as part of the SSL transaction.}
		timeout: ${15:180}
		validate_certs: ${16:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_user_group "Associate OpenStack Identity users and groups"
- name:
	os_user_group:
		user: ${1:# Name or id for the user}
		group: ${2:# Name or id for the group.}
		auth_type: ${3:password}
		region_name: ${4:# Name of the region.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${8:#public|internal|admin}
		key: ${9:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${10:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${11:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${12:#yes|no}
		cert: ${13:# A path to a client certificate to use as part of the SSL transaction.}
		state: ${14:#present|absent}
		timeout: ${15:180}
		validate_certs: ${16:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_user_role "Associate OpenStack Identity users and roles"
- name:
	os_user_role:
		role: ${1:# Name or ID for the role.}
		auth_type: ${2:password}
		domain: ${3:# ID of the domain to scope the role association to. Valid only with keystone version 3, and required if I(project) is not specified.}
		region_name: ${4:# Name of the region.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		api_timeout: ${6:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		auth: ${7:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		endpoint_type: ${8:#public|internal|admin}
		user: ${9:# Name or ID for the user. If I(user) is not specified, then I(group) is required. Both may not be specified.}
		key: ${10:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${11:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		cloud: ${12:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		wait: ${13:#yes|no}
		group: ${14:# Name or ID for the group. Valid only with keystone version 3. If I(group) is not specified, then I(user) is required. Both may not be specified.}
		cert: ${15:# A path to a client certificate to use as part of the SSL transaction.}
		project: ${16:# Name or ID of the project to scope the role association to. If you are using keystone version 2, then this value is required.}
		state: ${17:#present|absent}
		timeout: ${18:180}
		validate_certs: ${19:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
$0
endsnippet

snippet os_volume "Create/Delete Cinder Volumes"
- name:
	os_volume:
		display_name: ${1:# Name of volume}
		auth_type: ${2:password}
		key: ${3:# A path to a client key to use as part of the SSL transaction.}
		region_name: ${4:# Name of the region.}
		availability_zone: ${5:# Ignored. Present for backwards compatability}
		validate_certs: ${6:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		image: ${7:# Image name or id for boot from volume}
		api_timeout: ${8:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		cert: ${9:# A path to a client certificate to use as part of the SSL transaction.}
		volume_type: ${10:# Volume type for volume}
		volume: ${11:# Volume name or id to create from}
		state: ${12:#present|absent}
		endpoint_type: ${13:#public|internal|admin}
		display_description: ${14:# String describing the volume}
		timeout: ${15:180}
		snapshot_id: ${16:# Volume snapshot id to create from}
		cacert: ${17:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		wait: ${18:#yes|no}
		auth: ${19:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		cloud: ${20:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
		size: ${21:# Size of volume in GB. This parameter is required when the I(state) parameter is 'present'.}
$0
endsnippet

snippet os_zone "Manage OpenStack DNS zones"
- name:
	os_zone:
		name: ${1:# Zone name}
		auth_type: ${2:password}
		masters: ${3:# Master nameservers (only applies if zone_type is secondary)}
		description: ${4:# Zone description}
		region_name: ${5:# Name of the region.}
		availability_zone: ${6:# Ignored. Present for backwards compatability}
		api_timeout: ${7:# How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library.}
		cert: ${8:# A path to a client certificate to use as part of the SSL transaction.}
		auth: ${9:# Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present.}
		key: ${10:# A path to a client key to use as part of the SSL transaction.}
		cacert: ${11:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests.}
		state: ${12:#present|absent}
		endpoint_type: ${13:#public|internal|admin}
		timeout: ${14:180}
		ttl: ${15:# TTL (Time To Live) value in seconds}
		zone_type: ${16:primary|secondary}
		wait: ${17:#yes|no}
		validate_certs: ${18:# Whether or not SSL API requests should be verified. Before 2.3 this defaulted to True.}
		email: ${19:# Email of the zone owner (only applies if zone_type is primary)}
		cloud: ${20:# Named cloud to operate against. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present.}
$0
endsnippet

snippet ovh_ip_loadbalancing_backend "Manage OVH IP LoadBalancing backends"
- name:
	ovh_ip_loadbalancing_backend:
		endpoint: ${1:# The endpoint to use ( for instance ovh-eu)}
		name: ${2:# Name of the LoadBalancing internal name (ip-X.X.X.X)}
		application_key: ${3:# The applicationKey to use}
		application_secret: ${4:# The application secret to use}
		consumer_key: ${5:# The consumer key to use}
		backend: ${6:# The IP address of the backend to update / modify / delete}
		weight: ${7:8}
		probe: ${8:#none|http|icmp|oco}
		state: ${9:#present|absent}
		timeout: ${10:120}
$0
endsnippet

snippet ovirt_affinity_groups "Module to manage affinity groups in oVirt"
- name:
	ovirt_affinity_groups:
		name: ${1:# Name of the the affinity group to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		vm_enforcing: ${3:# If I(true) VM cannot start if it does not satisfy the C(vm_rule).}
		host_rule: ${4:positive|negative}
		poll_interval: ${5:3}
		fetch_nested: ${6:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${7:# Specifies list of the attributes which should be fetched from the API.}
		cluster: ${8:# Name of the cluster of the affinity group.}
		state: ${9:#present|absent}
		hosts: ${10:# List of the hosts names, which should have assigned this affinity group.}
		timeout: ${11:180}
		vm_rule: ${12:positive|negative|disabled}
		host_enforcing: ${13:# If I(true) VM cannot start on host if it does not satisfy the C(host_rule).}
		wait: ${14:# I(True) if the module should wait for the entity to get into desired state.}
		vms: ${15:# List of the VMs names, which should have assigned this affinity group.}
		description: ${16:# Description of the affinity group.}
$0
endsnippet

snippet ovirt_affinity_labels "Module to manage affinity labels in oVirt"
- name:
	ovirt_affinity_labels:
		name: ${1:# Name of the the affinity label to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		poll_interval: ${3:3}
		fetch_nested: ${4:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${5:# Specifies list of the attributes which should be fetched from the API.}
		cluster: ${6:# Name of the cluster where vms and hosts resides.}
		state: ${7:#present|absent}
		hosts: ${8:# List of the hosts names, which should have assigned this affinity label.}
		timeout: ${9:180}
		vms: ${10:# List of the VMs names, which should have assigned this affinity label.}
		wait: ${11:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_affinity_labels_facts "Retrieve facts about one or more oVirt affinity labels"
- name:
	ovirt_affinity_labels_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		fetch_nested: ${2:# If I(True) the module will fetch additional data from the API.}
		host: ${3:# Name of the host, which affinity labels should be listed.}
		name: ${4:# Name of the affinity labels which should be listed.}
		vm: ${5:# Name of the VM, which affinity labels should be listed.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_auth "Module to manage authentication to oVirt"
- name:
	ovirt_auth:
		username: ${1:# The name of the user. For example: I(admin@internal).}
		url: ${2:# A string containing the base URL of the server. For example: I(https://server.example.com/ovirt-engine/api).}
		password: ${3:# The password of the user.}
		ca_file: ${4:# A PEM file containing the trusted CA certificates. The certificate presented by the server will be verified using these CA certificates. If C(ca_file) parameter is not set, system wide CA certificate store is used.}
		insecure: ${5:# A boolean flag that indicates if the server TLS certificate and host name should be checked.}
		kerberos: ${6:# A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.}
		compress: ${7:# A boolean flag indicating if the SDK should ask the server to send compressed responses. The default is I(True). Note that this is a hint for the server, and that it may return uncompressed data even when this parameter is set to I(True).}
		state: ${8:#present|absent}
		timeout: ${9:# The maximum total time to wait for the response, in seconds. A value of zero (the default) means wait forever. If the timeout expires before the response is received an exception will be raised.}
$0
endsnippet

snippet ovirt_clusters "Module to manage clusters in oVirt"
- name:
	ovirt_clusters:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		name: ${2:# Name of the the cluster to manage.}
		comment: ${3:# Comment of the cluster.}
		ha_reservation: ${4:# If I(True) enable the oVirt to monitor cluster capacity for highly available virtual machines.}
		fence_skip_if_connectivity_broken: ${5:# If I(True) fencing will be temporarily disabled if the percentage of hosts in the cluster that are experiencing connectivity issues is greater than or equal to the defined threshold.}
		virt: ${6:# If I(True), hosts in this cluster will be used to run virtual machines.}
		threads_as_cores: ${7:# If I(True) the exposed host threads would be treated as cores which can be utilized by virtual machines.}
		gluster: ${8:# If I(True), hosts in this cluster will be used as Gluster Storage server nodes, and not for running virtual machines.}
		vm_reason: ${9:# If I(True) enable an optional reason field when a virtual machine is shut down from the Manager, allowing the administrator to provide an explanation for the maintenance.}
		fetch_nested: ${10:# If I(True) the module will fetch additional data from the API.}
		migration_bandwidth_limit: ${11:# Set the I(custom) migration bandwidth limit.}
		switch_type: ${12:legacy|ovs}
		data_center: ${13:# Datacenter name where cluster reside.}
		ksm_numa: ${14:# If I(True) enables KSM C(ksm) for best berformance inside NUMA nodes.}
		description: ${15:# Description of the cluster.}
		cpu_arch: ${16:x86_64|ppc64|undefined}
		rng_sources: ${17:# List that specify the random number generator devices that all hosts in the cluster will use.}
		network: ${18:# Management network of cluster to access cluster hosts.}
		state: ${19:#present|absent}
		ksm: ${20:# I I(True) MoM enables to run Kernel Same-page Merging I(KSM) when necessary and when it can yield a memory saving benefit that outweighs its CPU cost.}
		migration_compressed: ${21:true|false|inherit}
		ballooning: ${22:# If I(True) enable memory balloon optimization. Memory balloon is used to re-distribute / reclaim the host memory based on VM needs in a dynamic way.}
		migration_auto_converge: ${23:true|false|inherit}
		fence_enabled: ${24:# If I(True) enables fencing on the cluster.}
		migration_policy: ${25:legacy|minimal_downtime|suspend_workload}
		nested_attributes: ${26:# Specifies list of the attributes which should be fetched from the API.}
		resilience_policy: ${27:do_not_migrate|migrate|migrate_highly_available}
		fence_connectivity_threshold: ${28:# The threshold used by C(fence_skip_if_connectivity_broken).}
		spice_proxy: ${29:# The proxy by which the SPICE client will connect to virtual machines.}
		memory_policy: ${30:disabled|server|desktop}
		migration_bandwidth: ${31:auto|hypervisor_default|custom}
		fence_skip_if_sd_active: ${32:# If I(True) any hosts in the cluster that are Non Responsive and still connected to storage will not be fenced.}
		scheduling_policy: ${33:# Name of the scheduling policy to be used for cluster.}
		wait: ${34:# I(True) if the module should wait for the entity to get into desired state.}
		compatibility_version: ${35:# The compatibility version of the cluster. All hosts in this cluster must support at least this compatibility version.}
		serial_policy_value: ${36:# Allows you to specify a custom serial number.}
		host_reason: ${37:# If I(True) enable an optional reason field when a host is placed into maintenance mode from the Manager, allowing the administrator to provide an explanation for the maintenance.}
		poll_interval: ${38:3}
		cpu_type: ${39:# CPU codename. For example I(Intel SandyBridge Family).}
		timeout: ${40:180}
		serial_policy: ${41:# Specify a serial number policy for the virtual machines in the cluster.}
		trusted_service: ${42:# If (True) enable integration with an OpenAttestation server.}
$0
endsnippet

snippet ovirt_clusters_facts "Retrieve facts about one or more oVirt clusters"
- name:
	ovirt_clusters_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		pattern: ${2:# Search term which is accepted by oVirt search backend.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_datacenters "Module to manage data centers in oVirt"
- name:
	ovirt_datacenters:
		name: ${1:# Name of the the data center to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		comment: ${3:# Comment of the data center.}
		compatibility_version: ${4:# Compatibility version of the data center.}
		mac_pool: ${5:# MAC pool to be used by this datacenter.}
		local: ${6:# I(True) if the data center should be local, I(False) if should be shared.}
		poll_interval: ${7:3}
		fetch_nested: ${8:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${9:# Specifies list of the attributes which should be fetched from the API.}
		state: ${10:#present|absent}
		timeout: ${11:180}
		wait: ${12:# I(True) if the module should wait for the entity to get into desired state.}
		quota_mode: ${13:disabled|audit|enabled}
		description: ${14:# Description of the data center.}
$0
endsnippet

snippet ovirt_datacenters_facts "Retrieve facts about one or more oVirt datacenters"
- name:
	ovirt_datacenters_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		pattern: ${2:# Search term which is accepted by oVirt search backend.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_disks "Module to manage Virtual Machine and floating disks in oVirt"
- name:
	ovirt_disks:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		vm_name: ${2:# Name of the Virtual Machine to manage. Either C(vm_id) or C(vm_name) is required if C(state) is I(attached) or I(detached).}
		profile: ${3:# Disk profile name to be attached to disk. By default profile is chosen by oVirt engine.}
		storage_domains: ${4:# Storage domain names where disk should be copied.}
		force: ${5:# Please take a look at C(image_path) documentation to see the correct usage of this parameter.}
		format: ${6:raw|cow}
		poll_interval: ${7:3}
		logical_unit: ${8:# Dictionary which describes LUN to be directly attached to VM:}
		nested_attributes: ${9:# Specifies list of the attributes which should be fetched from the API.}
		fetch_nested: ${10:# If I(True) the module will fetch additional data from the API.}
		download_image_path: ${11:# Path on a file system where disk should be downloaded.}
		interface: ${12:#virtio|ide|virtio_scsi}
		vm_id: ${13:# ID of the Virtual Machine to manage. Either C(vm_id) or C(vm_name) is required if C(state) is I(attached) or I(detached).}
		id: ${14:# ID of the disk to manage. Either C(id) or C(name) is required.}
		size: ${15:# Size of the disk. Size should be specified using IEC standard units. For example 10GiB, 1024MiB, etc.}
		storage_domain: ${16:# Storage domain name where disk should be created. By default storage is chosen by oVirt engine.}
		name: ${17:# Name of the disk to manage. Either C(id) or C(name)/C(alias) is required.}
		bootable: ${18:# I(True) if the disk should be bootable. By default when disk is created it isn't bootable.}
		upload_image_path: ${19:# Path to disk image, which should be uploaded.}
		state: ${20:#present|absent|attached|detached}
		shareable: ${21:# I(True) if the disk should be shareable. By default when disk is created it isn't shareable.}
		timeout: ${22:180}
		wait: ${23:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_external_providers "Module to manage external providers in oVirt"
- name:
	ovirt_external_providers:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		username: ${2:# Username to be used for login to external provider.}
		read_only: ${3:# Specify if the network should be read only.}
		name: ${4:# Name of the the external provider to manage.}
		url: ${5:# URL where external provider is hosted.}
		tenant_name: ${6:# Name of the tenant.}
		poll_interval: ${7:3}
		fetch_nested: ${8:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${9:# Specifies list of the attributes which should be fetched from the API.}
		state: ${10:#present|absent}
		authentication_url: ${11:# Keystone authentication URL of the openstack provider.}
		timeout: ${12:180}
		data_center: ${13:# Name of the data center where provider should be attached.}
		wait: ${14:# I(True) if the module should wait for the entity to get into desired state.}
		password: ${15:# Password of the user specified in C(username) parameter.}
		type: ${16:os_image|network|os_volume|foreman}
		network_type: ${17:[#external, neutron}
		description: ${18:# Description of the external provider.}
$0
endsnippet

snippet ovirt_external_providers_facts "Retrieve facts about one or more oVirt external providers"
- name:
	ovirt_external_providers_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		type: ${2:os_image|os_network|os_volume|foreman}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		name: ${4:# Name of the external provider, can be used as glob expression.}
		nested_attributes: ${5:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_groups "Module to manage groups in oVirt"
- name:
	ovirt_groups:
		name: ${1:# Name of the the group to manage.}
		authz_name: ${2:# Authorization provider of the group. In previous versions of oVirt known as domain.}
		auth: ${3:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		namespace: ${4:# Namespace of the authorization provider, where group resides.}
		fetch_nested: ${5:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
		poll_interval: ${7:3}
		state: ${8:#present|absent}
		timeout: ${9:180}
		wait: ${10:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_groups_facts "Retrieve facts about one or more oVirt groups"
- name:
	ovirt_groups_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		pattern: ${2:# Search term which is accepted by oVirt search backend.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_host_networks "Module to manage host networks in oVirt"
- name:
	ovirt_host_networks:
		name: ${1:# Name of the the host to manage networks for.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		labels: ${3:# List of names of the network label to be assigned to bond or interface.}
		poll_interval: ${4:3}
		fetch_nested: ${5:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
		networks: ${7:# List of dictionary describing networks to be attached to interface or bond:}
		state: ${8:#present|absent}
		timeout: ${9:180}
		interface: ${10:# Name of the network interface where logical network should be attached.}
		wait: ${11:# I(True) if the module should wait for the entity to get into desired state.}
		save: ${12:# If I(true) network configuration will be persistent, by default they are temporary.}
		check: ${13:# If I(true) verify connectivity between host and engine.}
		bond: ${14:# Dictionary describing network bond:}
$0
endsnippet

snippet ovirt_host_pm "Module to manage power management of hosts in oVirt"
- name:
	ovirt_host_pm:
		name: ${1:# Name of the the host to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		username: ${3:# Username to be used to connect to power management interface.}
		slot: ${4:# Power management slot.}
		password: ${5:# Password of the user specified in C(username) parameter.}
		poll_interval: ${6:3}
		fetch_nested: ${7:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${8:# Specifies list of the attributes which should be fetched from the API.}
		order: ${9:# Integer value specifying, by default it's added at the end.}
		port: ${10:# Power management interface port.}
		state: ${11:#present|absent}
		timeout: ${12:180}
		address: ${13:# Address of the power management interface.}
		encrypt_options: ${14:# If (true) options will be encrypted when send to agent.}
		type: ${15:# Type of the power management. oVirt predefined values are I(drac5), I(ipmilan), I(rsa), I(bladecenter), I(alom), I(apc), I(apc_snmp), I(eps), I(wti), I(rsb), I(cisco_ucs), I(drac7), I(hpblade), I(ilo), I(ilo2), I(ilo3), I(ilo4), I(ilo_ssh), but user can have defined custom type.}
		options: ${16:# Dictionary of additional fence agent options.}
		wait: ${17:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_hosts "Module to manage hosts in oVirt"
- name:
	ovirt_hosts:
		name: ${1:# Name of the the host to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		comment: ${3:# Description of the host.}
		public_key: ${4:no}
		password: ${5:# Password of the root. It's required in case C(public_key) is set to I(False).}
		force: ${6:no}
		cluster: ${7:# Name of the cluster, where host should be created.}
		spm_priority: ${8:# SPM priority of the host. Integer value from 1 to 10, where higher number means higher priority.}
		address: ${9:# Host address. It can be either FQDN (preferred) or IP address.}
		poll_interval: ${10:3}
		fetch_nested: ${11:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${12:# Specifies list of the attributes which should be fetched from the API.}
		kernel_params: ${13:# List of kernel boot parameters.}
		state: ${14:#present|absent|maintenance|upgraded|started|restarted|stopped|reinstalled}
		timeout: ${15:180}
		hosted_engine: ${16:# If I(deploy) it means this host should deploy also hosted engine components.}
		wait: ${17:# I(True) if the module should wait for the entity to get into desired state.}
		override_iptables: ${18:# If True host iptables will be overridden by host deploy script.}
		kdump_integration: ${19:#enabled|disabled}
		override_display: ${20:# Override the display address of all VMs on this host with specified address.}
$0
endsnippet

snippet ovirt_hosts_facts "Retrieve facts about one or more oVirt hosts"
- name:
	ovirt_hosts_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		pattern: ${2:# Search term which is accepted by oVirt search backend.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_mac_pools "Module to manage MAC pools in oVirt"
- name:
	ovirt_mac_pools:
		name: ${1:# Name of the the MAC pool to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		ranges: ${3:# List of MAC ranges. The from and to should be splitted by comma.}
		poll_interval: ${4:3}
		fetch_nested: ${5:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
		allow_duplicates: ${7:# If (true) allow a MAC address to be used multiple times in a pool.}
		state: ${8:#present|absent}
		timeout: ${9:180}
		wait: ${10:# I(True) if the module should wait for the entity to get into desired state.}
		description: ${11:# Description of the MAC pool.}
$0
endsnippet

snippet ovirt_networks "Module to manage logical networks in oVirt"
- name:
	ovirt_networks:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		name: ${2:# Name of the the network to manage.}
		comment: ${3:# Comment of the network.}
		timeout: ${4:180}
		description: ${5:# Description of the network.}
		poll_interval: ${6:3}
		fetch_nested: ${7:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${8:# Specifies list of the attributes which should be fetched from the API.}
		mtu: ${9:# Maximum transmission unit (MTU) of the network.}
		state: ${10:#present|absent}
		vm_network: ${11:# If I(True) network will be marked as network for VM.}
		data_center: ${12:# Datacenter name where network reside.}
		clusters: ${13:# List of dictionaries describing how the network is managed in specific cluster.}
		vlan_tag: ${14:# Specify VLAN tag.}
		wait: ${15:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_networks_facts "Retrieve facts about one or more oVirt networks"
- name:
	ovirt_networks_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		pattern: ${2:# Search term which is accepted by oVirt search backend.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_nics "Module to manage network interfaces of Virtual Machines in oVirt"
- name:
	ovirt_nics:
		vm: ${1:# Name of the Virtual Machine to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		name: ${3:# Name of the network interface to manage.}
		profile: ${4:# Virtual network interface profile to be attached to VM network interface.}
		fetch_nested: ${5:# If I(True) the module will fetch additional data from the API.}
		network: ${6:# Logical network to which the VM network interface should use, by default Empty network is used if network is not specified.}
		poll_interval: ${7:3}
		nested_attributes: ${8:# Specifies list of the attributes which should be fetched from the API.}
		state: ${9:#present|absent|plugged|unplugged}
		timeout: ${10:180}
		mac_address: ${11:# Custom MAC address of the network interface, by default it's obtained from MAC pool.}
		interface: ${12:#virtio|e1000|rtl8139|pci_passthrough|rtl8139_virtio|spapr_vlan}
		wait: ${13:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_nics_facts "Retrieve facts about one or more oVirt virtual machine network interfaces"
- name:
	ovirt_nics_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		vm: ${2:# Name of the VM where NIC is attached.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
		name: ${5:# Name of the NIC, can be used as glob expression.}
$0
endsnippet

snippet ovirt_permissions "Module to manage permissions of users/groups in oVirt"
- name:
	ovirt_permissions:
		authz_name: ${1:# Authorization provider of the user/group. In previous versions of oVirt known as domain.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		poll_interval: ${3:3}
		fetch_nested: ${4:# If I(True) the module will fetch additional data from the API.}
		object_type: ${5:data_center|cluster|host|storage_domain|network|disk|#vm|vm_pool|template|cpu_profile|disk_profile|vnic_profile|system}
		namespace: ${6:# Namespace of the authorization provider, where user/group resides.}
		state: ${7:#present|absent}
		object_id: ${8:# ID of the object where the permissions should be managed.}
		group_name: ${9:# Name of the the group to manage.}
		object_name: ${10:# Name of the object where the permissions should be managed.}
		role: ${11:UserRole}
		nested_attributes: ${12:# Specifies list of the attributes which should be fetched from the API.}
		timeout: ${13:180}
		user_name: ${14:# Username of the the user to manage. In most LDAPs it's I(uid) of the user, but in Active Directory you must specify I(UPN) of the user.}
		wait: ${15:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_permissions_facts "Retrieve facts about one or more oVirt permissions"
- name:
	ovirt_permissions_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		authz_name: ${2:# Authorization provider of the user/group. In previous versions of oVirt known as domain.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		user_name: ${4:# Username of the the user to manage. In most LDAPs it's I(uid) of the user, but in Active Directory you must specify I(UPN) of the user.}
		namespace: ${5:# Namespace of the authorization provider, where user/group resides.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
		group_name: ${7:# Name of the the group to manage.}
$0
endsnippet

snippet ovirt_quotas "Module to manage datacenter quotas in oVirt"
- name:
	ovirt_quotas:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		data_center: ${2:# Name of the datacenter where quota should be managed.}
		name: ${3:# Name of the the quota to manage.}
		timeout: ${4:180}
		description: ${5:# Description of the the quota to manage.}
		cluster_grace: ${6:# Cluster grace(hard limit) defined in percentage (1-100).}
		cluster_threshold: ${7:# Cluster threshold(soft limit) defined in percentage (0-100).}
		poll_interval: ${8:3}
		fetch_nested: ${9:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${10:# Specifies list of the attributes which should be fetched from the API.}
		state: ${11:#present|absent}
		storage_grace: ${12:# Storage grace(hard limit) defined in percentage (1-100).}
		storage_threshold: ${13:# Storage threshold(soft limit) defined in percentage (0-100).}
		clusters: ${14:# List of dictionary of cluster limits, which is valid to specific cluster.}
		storages: ${15:# List of dictionary of storage limits, which is valid to specific storage.}
		wait: ${16:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_quotas_facts "Retrieve facts about one or more oVirt quotas"
- name:
	ovirt_quotas_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		data_center: ${2:# Name of the datacenter where quota resides.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		name: ${4:# Name of the quota, can be used as glob expression.}
		nested_attributes: ${5:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_snapshots "Module to manage Virtual Machine Snapshots in oVirt"
- name:
	ovirt_snapshots:
		vm_name: ${1:# Name of the Virtual Machine to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		description: ${3:# Description of the snapshot.}
		use_memory: ${4:# If I(true) and C(state) is I(present) save memory of the Virtual Machine if it's running.}
		poll_interval: ${5:3}
		fetch_nested: ${6:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${7:# Specifies list of the attributes which should be fetched from the API.}
		state: ${8:restore|#present|absent}
		timeout: ${9:180}
		snapshot_id: ${10:# ID of the snapshot to manage.}
		wait: ${11:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_snapshots_facts "Retrieve facts about one or more oVirt virtual machine snapshots"
- name:
	ovirt_snapshots_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		vm: ${2:# Name of the VM with snapshot.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		description: ${4:# Description of the snapshot, can be used as glob expression.}
		snapshot_id: ${5:# Id of the snaphost we want to retrieve facts about.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_storage_domains "Module to manage storage domains in oVirt"
- name:
	ovirt_storage_domains:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		comment: ${2:# Comment of the storage domain.}
		domain_function: ${3:#data|iso|export}
		fetch_nested: ${4:# If I(True) the module will fetch additional data from the API.}
		fcp: ${5:# Dictionary with values for fibre channel storage type:}
		name: ${6:# Name of the the storage domain to manage.}
		format: ${7:# If I(True) storage domain will be formatted after removing it from oVirt.}
		iscsi: ${8:# Dictionary with values for iSCSI storage type:}
		posixfs: ${9:# Dictionary with values for PosixFS storage type:}
		poll_interval: ${10:3}
		host: ${11:# Host to be used to mount storage.}
		nested_attributes: ${12:# Specifies list of the attributes which should be fetched from the API.}
		glusterfs: ${13:# Dictionary with values for GlusterFS storage type:}
		state: ${14:#present|absent|maintenance|unattached}
		nfs: ${15:# Dictionary with values for NFS storage type:}
		timeout: ${16:180}
		data_center: ${17:# Data center name where storage domain should be attached.}
		destroy: ${18:# Logical remove of the storage domain. If I(true) retains the storage domain's data for import.}
		wait: ${19:# I(True) if the module should wait for the entity to get into desired state.}
		description: ${20:# Description of the storage domain.}
$0
endsnippet

snippet ovirt_storage_domains_facts "Retrieve facts about one or more oVirt storage domains"
- name:
	ovirt_storage_domains_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		pattern: ${2:# Search term which is accepted by oVirt search backend.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_tags "Module to manage tags in oVirt"
- name:
	ovirt_tags:
		name: ${1:# Name of the the tag to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		parent: ${3:# Name of the parent tag.}
		poll_interval: ${4:3}
		fetch_nested: ${5:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
		state: ${7:#present|absent}
		hosts: ${8:# List of the hosts names, which should have assigned this tag.}
		timeout: ${9:180}
		wait: ${10:# I(True) if the module should wait for the entity to get into desired state.}
		vms: ${11:# List of the VMs names, which should have assigned this tag.}
		description: ${12:# Description of the the tag to manage.}
$0
endsnippet

snippet ovirt_tags_facts "Retrieve facts about one or more oVirt tags"
- name:
	ovirt_tags_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		fetch_nested: ${2:# If I(True) the module will fetch additional data from the API.}
		name: ${3:# Name of the tag which should be listed.}
		poll_interval: ${4:3}
		vm: ${5:# Name of the VM, which tags should be listed.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
		host: ${7:# Name of the host, which tags should be listed.}
		timeout: ${8:180}
		wait: ${9:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_templates "Module to manage virtual machine templates in oVirt"
- name:
	ovirt_templates:
		name: ${1:# Name of the the template to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		exclusive: ${3:# When C(state) is I(exported) this parameter indicates if the existing templates with the same name should be overwritten.}
		fetch_nested: ${4:# If I(True) the module will fetch additional data from the API.}
		cpu_profile: ${5:# CPU profile to be set to template.}
		storage_domain: ${6:# When C(state) is I(imported) this parameter specifies the name of the destination data storage domain.}
		description: ${7:# Description of the template.}
		export_domain: ${8:# When C(state) is I(exported) or I(imported) this parameter specifies the name of the export storage domain.}
		image_disk: ${9:# When C(state) is I(imported) and C(image_provider) is used this parameter specifies the name of disk to be imported as template.}
		poll_interval: ${10:3}
		vm: ${11:# Name of the VM, which will be used to create template.}
		nested_attributes: ${12:# Specifies list of the attributes which should be fetched from the API.}
		cluster: ${13:# Name of the cluster, where template should be created/imported.}
		state: ${14:#present|absent|exported|imported}
		timeout: ${15:180}
		wait: ${16:# I(True) if the module should wait for the entity to get into desired state.}
		clone_permissions: ${17:no}
		image_provider: ${18:# When C(state) is I(imported) this parameter specifies the name of the image provider to be used.}
$0
endsnippet

snippet ovirt_templates_facts "Retrieve facts about one or more oVirt templates"
- name:
	ovirt_templates_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		pattern: ${2:# Search term which is accepted by oVirt search backend.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_users "Module to manage users in oVirt"
- name:
	ovirt_users:
		name: ${1:# Name of the the user to manage. In most LDAPs it's I(uid) of the user, but in Active Directory you must specify I(UPN) of the user.}
		authz_name: ${2:# Authorization provider of the user. In previous versions of oVirt known as domain.}
		auth: ${3:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		poll_interval: ${4:3}
		fetch_nested: ${5:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
		state: ${7:#present|absent}
		timeout: ${8:180}
		wait: ${9:# I(True) if the module should wait for the entity to get into desired state.}
$0
endsnippet

snippet ovirt_users_facts "Retrieve facts about one or more oVirt users"
- name:
	ovirt_users_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		pattern: ${2:# Search term which is accepted by oVirt search backend.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_vmpools "Module to manage VM pools in oVirt"
- name:
	ovirt_vmpools:
		name: ${1:# Name of the the VM pool to manage.}
		auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		timeout: ${3:180}
		description: ${4:# Description of the VM pool.}
		poll_interval: ${5:3}
		fetch_nested: ${6:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${7:# Specifies list of the attributes which should be fetched from the API.}
		vm_per_user: ${8:# Maximum number of VMs a single user can attach to from this pool.}
		cluster: ${9:# Name of the cluster, where VM pool should be created.}
		state: ${10:#present|absent}
		prestarted: ${11:# Number of pre-started VMs defines the number of VMs in run state, that are waiting to be attached to Users.}
		template: ${12:# Name of the template, which will be used to create VM pool.}
		wait: ${13:# I(True) if the module should wait for the entity to get into desired state.}
		type: ${14:manual|automatic}
		vm_count: ${15:# Number of VMs in the pool.}
$0
endsnippet

snippet ovirt_vmpools_facts "Retrieve facts about one or more oVirt vmpools"
- name:
	ovirt_vmpools_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		pattern: ${2:# Search term which is accepted by oVirt search backend.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		nested_attributes: ${4:# Specifies list of the attributes which should be fetched from the API.}
$0
endsnippet

snippet ovirt_vms "Module to manage Virtual Machines in oVirt"
- name:
	ovirt_vms:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		comment: ${2:# Comment of the Virtual Machine.}
		disks: ${3:# List of disks, which should be attached to Virtual Machine. Disk is described by following dictionary:}
		force: ${4:no}
		cloud_init_nics: ${5:# List of dictionaries representing network interafaces to be setup by cloud init.}
		cluster: ${6:# Name of the cluster, where Virtual Machine should be created. Required if creating VM.}
		fetch_nested: ${7:# If I(True) the module will fetch additional data from the API.}
		timezone: ${8:# Sets time zone offset of the guest hardware clock.}
		id: ${9:# ID of the the Virtual Machine to manage.}
		cpu_sockets: ${10:# Number of virtual CPUs sockets of the Virtual Machine. Default value is set by oVirt engine.}
		high_availability: ${11:# If I(True) Virtual Machine will be set as highly available.}
		kernel_params: ${12:# Kernel command line parameters (formatted as string) to be used with the kernel specified by C(kernel_path) option.}
		nics: ${13:# List of NICs, which should be attached to Virtual Machine. NIC is described by following dictionary:}
		sysprep: ${14:# Dictionary with values for Windows Virtual Machine initialization using sysprep:}
		cpu_cores: ${15:# Number of virtual CPUs cores of the Virtual Machine. Default value is set by oVirt engine.}
		state: ${16:running|stopped|#present|absent|suspended|next_run}
		memory_guaranteed: ${17:# Amount of minimal guaranteed memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).}
		delete_protected: ${18:# If I(True) Virtual Machine will be set as delete protected.}
		memory: ${19:# Amount of memory of the Virtual Machine. Prefix uses IEC 60027-2 standard (for example 1GiB, 1024MiB).}
		cd_iso: ${20:# ISO file from ISO storage domain which should be attached to Virtual Machine.}
		clone_permissions: ${21:no}
		type: ${22:server|desktop}
		initrd_path: ${23:# Path to an initial ramdisk to be used with the kernel specified by C(kernel_path) option.}
		description: ${24:# Description of the Virtual Machine.}
		clone: ${25:no}
		boot_devices: ${26:# List of boot devices which should be used to boot. Choices I(network), I(hd) and I(cdrom).}
		template: ${27:# Name of the template, which should be used to create Virtual Machine. Required if creating VM.}
		host: ${28:# Specify host where Virtual Machine should be running. By default the host is chosen by engine scheduler.}
		serial_policy: ${29:# Specify a serial number policy for the Virtual Machine.}
		nested_attributes: ${30:# Specifies list of the attributes which should be fetched from the API.}
		wait: ${31:# I(True) if the module should wait for the entity to get into desired state.}
		use_latest_template_version: ${32:# Specify if latest template version should be used, when running a stateless VM.}
		stateless: ${33:# If I(True) Virtual Machine will be set as stateless.}
		operating_system: ${34:rhel_6_ppc64|other|freebsd|windows_2003x64|windows_10|rhel_6x64|rhel_4x64|windows_2008x64|windows_2008R2x64|debian_7|windows_2012x64|ubuntu_14_04|ubuntu_12_04|ubuntu_13_10|windows_8x64|other_linux_ppc64|windows_2003|other_linux|windows_10x64|windows_2008|rhel_3|rhel_5|rhel_4|other_ppc64|sles_11|rhel_6|windows_xp|rhel_7x64|freebsdx64|rhel_7_ppc64|windows_7|rhel_5x64|ubuntu_14_04_ppc64|sles_11_ppc64|windows_8|windows_2012R2x64|windows_2008r2x64|ubuntu_13_04|ubuntu_12_10|windows_7x64}
		serial_policy_value: ${35:# Allows you to specify a custom serial number.}
		name: ${36:# Name of the the Virtual Machine to manage. If VM don't exists C(name) is required. Otherwise C(id) or C(name) can be used.}
		kernel_path: ${37:# Path to a kernel image used to boot the virtual machine.}
		cloud_init: ${38:# Dictionary with values for Unix-like Virtual Machine initialization using cloud init:}
		template_version: ${39:# Version number of the template to be used for VM.}
		poll_interval: ${40:3}
		instance_type: ${41:# Name of virtual machine's hardware configuration.}
		timeout: ${42:180}
		cpu_shares: ${43:# Set a CPU shares for this Virtual Machine. Default value is set by oVirt engine.}
$0
endsnippet

snippet ovirt_vms_facts "Retrieve facts about one or more oVirt virtual machines"
- name:
	ovirt_vms_facts:
		auth: ${1:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
		all_content: ${2:# If I(true) all the attributes of the virtual machines should be included in the response.}
		fetch_nested: ${3:# If I(True) the module will fetch additional data from the API.}
		max: ${4:# The maximum number of results to return.}
		pattern: ${5:# Search term which is accepted by oVirt search backend.}
		nested_attributes: ${6:# Specifies list of the attributes which should be fetched from the API.}
		case_sensitive: ${7:# If I(true) performed search will take case into account.}
$0
endsnippet

snippet packet_device "create, destroy, start, stop, and reboot a Packet Host machine."
- name:
	packet_device:
		project_id: ${1:# ID of project of the device.}
		count: ${2:# The number of devices to create. Count number can be included in hostname via the %d string formatter.}
		operating_system: ${3:# OS slug for device creation. See Packet docs or API for current list.}
		features: ${4:# Dict with "features" for device creation. See Packet API docs for details.}
		facility: ${5:# Facility slug for device creation. As of 2016, it should be one of [ewr1, sjc1, ams1, nrt1].}
		lock: ${6:no}
		auth_token: ${7:# Packet api token. You can also supply it in env var C(PACKET_API_TOKEN).}
		device_ids: ${8:# List of device IDs on which to operate.}
		count_offset: ${9:# From which number to start the count.}
		user_data: ${10:# Userdata blob made available to the machine}
		state: ${11:#present|absent|active|inactive|rebooted}
		hostnames: ${12:# A hostname of a device, or a list of hostnames.}
		plan: ${13:# Plan slug for device creation. See Packet docs or API for current list.}
		wait_timeout: ${14:60}
		wait: ${15:no}
$0
endsnippet

snippet packet_sshkey "Create/delete an SSH key in Packet host."
- name:
	packet_sshkey:
		state: ${1:#present|absent}
		key: ${2:# Public Key string ({type} {base64 encoded key} {description}).}
		fingerprint: ${3:# Fingerprint of the key which you want to remove.}
		id: ${4:# UUID of the key which you want to remove.}
		auth_token: ${5:# Packet api token. You can also supply it in env var C(PACKET_API_TOKEN).}
		key_file: ${6:# File with the public key.}
		label: ${7:# Label for the key. If you keep it empty, it will be read from key string.}
$0
endsnippet

snippet profitbricks "Create, destroy, start, stop, and reboot a ProfitBricks virtual machine."
- name:
	profitbricks:
		image: ${1:# The system image ID for creating the virtual machine, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8.}
		name: ${2:# The name of the virtual machine.}
		lan: ${3:1}
		image_password: ${4:# Password set for the administrative user.}
		bus: ${5:IDE|#VIRTIO}
		ram: ${6:2048}
		instance_ids: ${7:# list of instance ids, currently only used when state='absent' to remove instances.}
		subscription_password: ${8:# THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.}
		wait_timeout: ${9:600}
		assign_public_ip: ${10:no}
		wait: ${11:#yes|no}
		count: ${12:1}
		datacenter: ${13:# The datacenter to provision this virtual machine.}
		remove_boot_volume: ${14:#yes|no}
		ssh_keys: ${15:# Public SSH keys allowing access to the virtual machine.}
		subscription_user: ${16:# The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.}
		cpu_family: ${17:#AMD_OPTERON|INTEL_XEON}
		volume_size: ${18:10}
		state: ${19:running|stopped|absent|#present}
		location: ${20:#us/las|de/fra|de/fkb}
		auto_increment: ${21:yes|no}
		cores: ${22:2}
$0
endsnippet

snippet profitbricks_datacenter "Create or destroy a ProfitBricks Virtual Datacenter."
- name:
	profitbricks_datacenter:
		name: ${1:# The name of the virtual datacenter.}
		subscription_user: ${2:# The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.}
		subscription_password: ${3:# THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.}
		state: ${4:#present|absent}
		wait_timeout: ${5:600}
		location: ${6:#us/las|de/fra|de/fkb}
		wait: ${7:#yes|no}
		description: ${8:# The description of the virtual datacenter.}
$0
endsnippet

snippet profitbricks_nic "Create or Remove a NIC."
- name:
	profitbricks_nic:
		datacenter: ${1:# The datacenter in which to operate.}
		lan: ${2:# The LAN to place the NIC on. You can pass a LAN that doesn't exist and it will be created. Required on create.}
		name: ${3:# The name or ID of the NIC. This is only required on deletes, but not on create.}
		server: ${4:# The server name or ID.}
		subscription_user: ${5:# The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.}
		subscription_password: ${6:# THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.}
		state: ${7:#present|absent}
		wait_timeout: ${8:600}
		wait: ${9:#yes|no}
$0
endsnippet

snippet profitbricks_volume "Create or destroy a volume."
- name:
	profitbricks_volume:
		image: ${1:# The system image ID for the volume, e.g. a3eae284-a2fe-11e4-b187-5f1f641608c8. This can also be a snapshot image ID.}
		datacenter: ${2:# The datacenter in which to create the volumes.}
		name: ${3:# The name of the volumes. You can enumerate the names using auto_increment.}
		image_password: ${4:# Password set for the administrative user.}
		licence_type: ${5:LINUX|WINDOWS|#UNKNOWN|OTHER}
		bus: ${6:IDE|#VIRTIO}
		instance_ids: ${7:# list of instance ids, currently only used when state='absent' to remove instances.}
		subscription_password: ${8:# THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.}
		wait_timeout: ${9:600}
		disk_type: ${10:#HDD|SSD}
		wait: ${11:#yes|no}
		count: ${12:1}
		subscription_user: ${13:# The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.}
		state: ${14:#present|absent}
		auto_increment: ${15:yes|no}
		size: ${16:10}
		ssh_keys: ${17:# Public SSH keys allowing access to the virtual machine.}
$0
endsnippet

snippet profitbricks_volume_attachments "Attach or detach a volume."
- name:
	profitbricks_volume_attachments:
		datacenter: ${1:# The datacenter in which to operate.}
		server: ${2:# The name of the server you wish to detach or attach the volume.}
		volume: ${3:# The volume name or ID.}
		subscription_user: ${4:# The ProfitBricks username. Overrides the PB_SUBSCRIPTION_ID environment variable.}
		state: ${5:#present|absent}
		wait_timeout: ${6:600}
		subscription_password: ${7:# THe ProfitBricks password. Overrides the PB_PASSWORD environment variable.}
		wait: ${8:#yes|no}
$0
endsnippet

snippet pubnub_blocks "PubNub blocks management module."
- name:
	pubnub_blocks:
		name: ${1:# Name of managed block which will be later visible on admin.pubnub.com.}
		keyset: ${2:# Name of application's keys set which is bound to managed blocks.}
		application: ${3:# Name of target PubNub application for which blocks configuration on specific C(keyset) will be done.}
		changes: ${4:{}}
		cache: ${5:{}}
		state: ${6:#started|stopped|present|absent}
		password: ${7:# Password which match to account to which specified C(email) belong.}
		validate_certs: ${8:yes}
		email: ${9:# Email from account for which new session should be started.}
		event_handlers: ${10:[]}
		description: ${11:New block}
$0
endsnippet

snippet rax "create / delete an instance in Rackspace Public Cloud"
- name:
	rax:
		files: ${1:# Files to insert into the instance. remotefilename:localcontent}
		boot_volume_terminate: ${2:no}
		tenant_name: ${3:# The tenant name used for authentication.}
		auto_increment: ${4:yes|no}
		image: ${5:# image to use for the instance. Can be an C(id), C(human_id) or C(name). With I(boot_from_volume), a Cloud Block Storage volume will be created with this image}
		user_data: ${6:# Data to be uploaded to the servers config drive. This option implies I(config_drive). Can be a file path or a string}
		boot_volume: ${7:# Cloud Block Storage ID or Name to use as the boot volume of the instance}
		count_offset: ${8:1}
		verify_ssl: ${9:# Whether or not to require SSL validation of API endpoints.}
		meta: ${10:# A hash of metadata to associate with the instance}
		instance_ids: ${11:# list of instance ids, currently only used when state='absent' to remove instances}
		tenant_id: ${12:# The tenant ID used for authentication.}
		credentials: ${13:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		region: ${14:DFW}
		flavor: ${15:# flavor to use for the instance}
		networks: ${16:[u'public', u'private']}
		wait: ${17:yes|#no}
		boot_from_volume: ${18:yes|#no}
		api_key: ${19:# Rackspace API key, overrides I(credentials).}
		group: ${20:# host group to assign to server, is also used for idempotent operations to ensure a specific number of instances}
		name: ${21:# Name to give the instance}
		identity_type: ${22:rackspace}
		extra_client_args: ${23:# A hash of key/value pairs to be used when creating the cloudservers client. This is considered an advanced option, use it wisely and with caution.}
		exact_count: ${24:yes|no}
		disk_config: ${25:#auto|manual}
		auth_endpoint: ${26:https://identity.api.rackspacecloud.com/v2.0/}
		count: ${27:1}
		username: ${28:# Rackspace username, overrides I(credentials).}
		state: ${29:#present|absent}
		wait_timeout: ${30:300}
		env: ${31:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		key_name: ${32:# key pair to use on the instance}
		boot_volume_size: ${33:100}
		extra_create_args: ${34:# A hash of key/value pairs to be used when creating a new server. This is considered an advanced option, use it wisely and with caution.}
		config_drive: ${35:yes|no}
$0
endsnippet

snippet rax_cbs "Manipulate Rackspace Cloud Block Storage Volumes"
- name:
	rax_cbs:
		size: ${1:100}
		volume_type: ${2:#SATA|SSD}
		state: ${3:#present|absent}
		name: ${4:# Name to give the volume being created}
		username: ${5:# Rackspace username, overrides I(credentials).}
		api_key: ${6:# Rackspace API key, overrides I(credentials).}
		tenant_name: ${7:# The tenant name used for authentication.}
		description: ${8:# Description to give the volume being created}
		identity_type: ${9:rackspace}
		tenant_id: ${10:# The tenant ID used for authentication.}
		image: ${11:# image to use for bootable volumes. Can be an C(id), C(human_id) or C(name). This option requires C(pyrax>=1.9.3)}
		auth_endpoint: ${12:https://identity.api.rackspacecloud.com/v2.0/}
		verify_ssl: ${13:# Whether or not to require SSL validation of API endpoints.}
		meta: ${14:# A hash of metadata to associate with the volume}
		env: ${15:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		snapshot_id: ${16:# The id of the snapshot to create the volume from}
		credentials: ${17:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		wait: ${18:yes|#no}
		region: ${19:DFW}
		wait_timeout: ${20:300}
$0
endsnippet

snippet rax_cbs_attachments "Manipulate Rackspace Cloud Block Storage Volume Attachments"
- name:
	rax_cbs_attachments:
		volume: ${1:# Name or id of the volume to attach/detach}
		device: ${2:# The device path to attach the volume to, e.g. /dev/xvde}
		server: ${3:# Name or id of the server to attach/detach}
		state: ${4:#present|absent}
		username: ${5:# Rackspace username, overrides I(credentials).}
		tenant_name: ${6:# The tenant name used for authentication.}
		verify_ssl: ${7:# Whether or not to require SSL validation of API endpoints.}
		wait_timeout: ${8:300}
		credentials: ${9:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		wait: ${10:yes|#no}
		identity_type: ${11:rackspace}
		tenant_id: ${12:# The tenant ID used for authentication.}
		region: ${13:DFW}
		auth_endpoint: ${14:https://identity.api.rackspacecloud.com/v2.0/}
		env: ${15:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		api_key: ${16:# Rackspace API key, overrides I(credentials).}
$0
endsnippet

snippet rax_cdb "create/delete or resize a Rackspace Cloud Databases instance"
- name:
	rax_cdb:
		cdb_type: ${1:MySQL}
		username: ${2:# Rackspace username, overrides I(credentials).}
		name: ${3:# Name of the databases server instance}
		region: ${4:DFW}
		verify_ssl: ${5:# Whether or not to require SSL validation of API endpoints.}
		cdb_version: ${6:5.1|5.6|10}
		volume: ${7:2}
		state: ${8:#present|absent}
		wait_timeout: ${9:300}
		env: ${10:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		credentials: ${11:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		flavor: ${12:1}
		api_key: ${13:# Rackspace API key, overrides I(credentials).}
		wait: ${14:yes|#no}
$0
endsnippet

snippet rax_cdb_database "create / delete a database in the Cloud Databases"
- name:
	rax_cdb_database:
		username: ${1:# Rackspace username, overrides I(credentials).}
		name: ${2:# Name to give to the database}
		cdb_id: ${3:# The databases server UUID}
		region: ${4:DFW}
		verify_ssl: ${5:# Whether or not to require SSL validation of API endpoints.}
		state: ${6:#present|absent}
		collate: ${7:utf8_general_ci}
		env: ${8:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		credentials: ${9:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${10:# Rackspace API key, overrides I(credentials).}
		character_set: ${11:utf8}
$0
endsnippet

snippet rax_cdb_user "create / delete a Rackspace Cloud Database"
- name:
	rax_cdb_user:
		username: ${1:# Rackspace username, overrides I(credentials).}
		verify_ssl: ${2:# Whether or not to require SSL validation of API endpoints.}
		env: ${3:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		db_password: ${4:# Database user password}
		region: ${5:DFW}
		databases: ${6:[]}
		host: ${7:%}
		state: ${8:#present|absent}
		db_username: ${9:# Name of the database user}
		cdb_id: ${10:# The databases server UUID}
		credentials: ${11:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${12:# Rackspace API key, overrides I(credentials).}
$0
endsnippet

snippet rax_clb "create / delete a load balancer in Rackspace Public Cloud"
- name:
	rax_clb:
		username: ${1:# Rackspace username, overrides I(credentials).}
		protocol: ${2:DNS_TCP|DNS_UDP|FTP|#HTTP|HTTPS|IMAPS|IMAPv4|LDAP|LDAPS|MYSQL|POP3|POP3S|SMTP|TCP|TCP_CLIENT_FIRST|UDP|UDP_STREAM|SFTP}
		name: ${3:# Name to give the load balancer}
		algorithm: ${4:RANDOM|#LEAST_CONNECTIONS|ROUND_ROBIN|WEIGHTED_LEAST_CONNECTIONS|WEIGHTED_ROUND_ROBIN}
		env: ${5:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		region: ${6:DFW}
		verify_ssl: ${7:# Whether or not to require SSL validation of API endpoints.}
		vip_id: ${8:# Virtual IP ID to use when creating the load balancer for purposes of sharing an IP with another load balancer of another protocol}
		state: ${9:#present|absent}
		wait_timeout: ${10:300}
		meta: ${11:# A hash of metadata to associate with the instance}
		timeout: ${12:30}
		credentials: ${13:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${14:# Rackspace API key, overrides I(credentials).}
		type: ${15:#PUBLIC|SERVICENET}
		port: ${16:80}
		wait: ${17:yes|#no}
$0
endsnippet

snippet rax_clb_nodes "add, modify and remove nodes from a Rackspace Cloud Load Balancer"
- name:
	rax_clb_nodes:
		load_balancer_id: ${1:# Load balancer id}
		username: ${2:# Rackspace username, overrides I(credentials).}
		weight: ${3:# Weight of node}
		region: ${4:DFW}
		verify_ssl: ${5:# Whether or not to require SSL validation of API endpoints.}
		state: ${6:#present|absent}
		wait_timeout: ${7:30}
		condition: ${8:enabled|disabled|draining}
		env: ${9:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		address: ${10:# IP address or domain name of the node}
		credentials: ${11:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${12:# Rackspace API key, overrides I(credentials).}
		type: ${13:primary|secondary}
		port: ${14:# Port number of the load balanced service on the node}
		node_id: ${15:# Node id}
		wait: ${16:yes|#no}
$0
endsnippet

snippet rax_clb_ssl "Manage SSL termination for a Rackspace Cloud Load Balancer."
- name:
	rax_clb_ssl:
		loadbalancer: ${1:# Name or ID of the load balancer on which to manage SSL termination.}
		username: ${2:# Rackspace username, overrides I(credentials).}
		private_key: ${3:# The private SSL key as a string in PEM format.}
		certificate: ${4:# The public SSL certificates as a string in PEM format.}
		enabled: ${5:yes}
		region: ${6:DFW}
		https_redirect: ${7:# If "true", the load balancer will redirect HTTP traffic to HTTPS.}
		verify_ssl: ${8:# Whether or not to require SSL validation of API endpoints.}
		state: ${9:#present|absent}
		wait_timeout: ${10:300}
		intermediate_certificate: ${11:# One or more intermediate certificate authorities as a string in PEM}
		secure_traffic_only: ${12:no}
		env: ${13:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		credentials: ${14:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		secure_port: ${15:443}
		api_key: ${16:# Rackspace API key, overrides I(credentials).}
		wait: ${17:no}
$0
endsnippet

snippet rax_dns "Manage domains on Rackspace Cloud DNS"
- name:
	rax_dns:
		comment: ${1:# Brief description of the domain. Maximum length of 160 characters}
		username: ${2:# Rackspace username, overrides I(credentials).}
		name: ${3:# Domain name to create}
		region: ${4:DFW}
		verify_ssl: ${5:# Whether or not to require SSL validation of API endpoints.}
		state: ${6:#present|absent}
		env: ${7:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		ttl: ${8:3600}
		credentials: ${9:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${10:# Rackspace API key, overrides I(credentials).}
		email: ${11:# Email address of the domain administrator}
$0
endsnippet

snippet rax_dns_record "Manage DNS records on Rackspace Cloud DNS"
- name:
	rax_dns_record:
		name: ${1:# FQDN record name to create}
		data: ${2:# IP address for A/AAAA record, FQDN for CNAME/MX/NS, or text data for SRV/TXT}
		type: ${3:A|AAAA|CNAME|MX|NS|SRV|TXT|PTR}
		comment: ${4:# Brief description of the domain. Maximum length of 160 characters}
		username: ${5:# Rackspace username, overrides I(credentials).}
		domain: ${6:# Domain name to create the record in. This is an invalid option when type=PTR}
		region: ${7:DFW}
		verify_ssl: ${8:# Whether or not to require SSL validation of API endpoints.}
		server: ${9:# Server ID to create a PTR record for. Only used with type=PTR}
		priority: ${10:# Required for MX and SRV records, but forbidden for other record types. If specified, must be an integer from 0 to 65535.}
		state: ${11:#present|absent}
		loadbalancer: ${12:# Load Balancer ID to create a PTR record for. Only used with type=PTR}
		env: ${13:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		ttl: ${14:3600}
		credentials: ${15:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${16:# Rackspace API key, overrides I(credentials).}
		overwrite: ${17:yes}
$0
endsnippet

snippet rax_facts "Gather facts for Rackspace Cloud Servers"
- name:
	rax_facts:
		username: ${1:# Rackspace username, overrides I(credentials).}
		tenant_name: ${2:# The tenant name used for authentication.}
		name: ${3:# Server name to retrieve facts for}
		identity_type: ${4:rackspace}
		tenant_id: ${5:# The tenant ID used for authentication.}
		region: ${6:DFW}
		verify_ssl: ${7:# Whether or not to require SSL validation of API endpoints.}
		env: ${8:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		address: ${9:# Server IP address to retrieve facts for, will match any IP assigned to the server}
		credentials: ${10:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${11:# Rackspace API key, overrides I(credentials).}
		id: ${12:# Server ID to retrieve facts for}
		auth_endpoint: ${13:https://identity.api.rackspacecloud.com/v2.0/}
$0
endsnippet

snippet rax_files "Manipulate Rackspace Cloud Files Containers"
- name:
	rax_files:
		container: ${1:# The container to use for container or metadata operations.}
		username: ${2:# Rackspace username, overrides I(credentials).}
		web_index: ${3:# Sets an object to be presented as the HTTP index page when accessed by the CDN URL}
		region: ${4:DFW}
		verify_ssl: ${5:# Whether or not to require SSL validation of API endpoints.}
		private: ${6:# Used to set a container as private, removing it from the CDN.  B(Warning!) Private containers, if previously made public, can have live objects available until the TTL on cached objects expires}
		state: ${7:#present|absent}
		clear_meta: ${8:yes|#no}
		meta: ${9:# A hash of items to set as metadata values on a container}
		env: ${10:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		ttl: ${11:# In seconds, set a container-wide TTL for all objects cached on CDN edge nodes. Setting a TTL is only appropriate for containers that are public}
		web_error: ${12:# Sets an object to be presented as the HTTP error page when accessed by the CDN URL}
		credentials: ${13:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${14:# Rackspace API key, overrides I(credentials).}
		type: ${15:#file|meta}
		public: ${16:# Used to set a container as public, available via the Cloud Files CDN}
$0
endsnippet

snippet rax_files_objects "Upload, download, and delete objects in Rackspace Cloud Files"
- name:
	rax_files_objects:
		container: ${1:# The container to use for file object operations.}
		username: ${2:# Rackspace username, overrides I(credentials).}
		src: ${3:# Source from which to upload files.  Used to specify a remote object as a source for an operation, i.e. a file name, "file1", or a comma-separated list of remote objects, "file1,file2,file17".  src and dest are mutually exclusive on remote-only object operations}
		dest: ${4:# The destination of a "get" operation; i.e. a local directory, "/home/user/myfolder". Used to specify the destination of an operation on a remote object; i.e. a file name, "file1", or a comma-separated list of remote objects, "file1,file2,file17"}
		region: ${5:DFW}
		expires: ${6:# Used to set an expiration on a file or folder uploaded to Cloud Files. Requires an integer, specifying expiration in seconds}
		verify_ssl: ${7:# Whether or not to require SSL validation of API endpoints.}
		state: ${8:#present|absent}
		clear_meta: ${9:yes|#no}
		meta: ${10:# A hash of items to set as metadata values on an uploaded file or folder}
		env: ${11:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		credentials: ${12:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${13:# Rackspace API key, overrides I(credentials).}
		type: ${14:#file|meta}
		method: ${15:#get|put|delete}
		structure: ${16:True|no}
$0
endsnippet

snippet rax_identity "Load Rackspace Cloud Identity"
- name:
	rax_identity:
		username: ${1:# Rackspace username, overrides I(credentials).}
		identity_type: ${2:rackspace}
		tenant_id: ${3:# The tenant ID used for authentication.}
		region: ${4:DFW}
		verify_ssl: ${5:# Whether or not to require SSL validation of API endpoints.}
		state: ${6:#present|absent}
		env: ${7:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		tenant_name: ${8:# The tenant name used for authentication.}
		credentials: ${9:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${10:# Rackspace API key, overrides I(credentials).}
		auth_endpoint: ${11:https://identity.api.rackspacecloud.com/v2.0/}
$0
endsnippet

snippet rax_keypair "Create a keypair for use with Rackspace Cloud Servers"
- name:
	rax_keypair:
		name: ${1:# Name of keypair}
		username: ${2:# Rackspace username, overrides I(credentials).}
		public_key: ${3:# Public Key string to upload. Can be a file path or string}
		identity_type: ${4:rackspace}
		tenant_id: ${5:# The tenant ID used for authentication.}
		region: ${6:DFW}
		verify_ssl: ${7:# Whether or not to require SSL validation of API endpoints.}
		state: ${8:#present|absent}
		env: ${9:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		tenant_name: ${10:# The tenant name used for authentication.}
		credentials: ${11:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${12:# Rackspace API key, overrides I(credentials).}
		auth_endpoint: ${13:https://identity.api.rackspacecloud.com/v2.0/}
$0
endsnippet

snippet rax_meta "Manipulate metadata for Rackspace Cloud Servers"
- name:
	rax_meta:
		username: ${1:# Rackspace username, overrides I(credentials).}
		tenant_name: ${2:# The tenant name used for authentication.}
		name: ${3:# Server name to modify metadata for}
		identity_type: ${4:rackspace}
		tenant_id: ${5:# The tenant ID used for authentication.}
		region: ${6:DFW}
		verify_ssl: ${7:# Whether or not to require SSL validation of API endpoints.}
		meta: ${8:# A hash of metadata to associate with the instance}
		env: ${9:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		address: ${10:# Server IP address to modify metadata for, will match any IP assigned to the server}
		credentials: ${11:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${12:# Rackspace API key, overrides I(credentials).}
		id: ${13:# Server ID to modify metadata for}
		auth_endpoint: ${14:https://identity.api.rackspacecloud.com/v2.0/}
$0
endsnippet

snippet rax_mon_alarm "Create or delete a Rackspace Cloud Monitoring alarm."
- name:
	rax_mon_alarm:
		entity_id: ${1:# ID of the entity this alarm is attached to. May be acquired by registering the value of a rax_mon_entity task.}
		notification_plan_id: ${2:# ID of the notification plan to trigger if this alarm fires. May be acquired by registering the value of a rax_mon_notification_plan task.}
		check_id: ${3:# ID of the check that should be alerted on. May be acquired by registering the value of a rax_mon_check task.}
		label: ${4:# Friendly name for this alarm, used to achieve idempotence. Must be a String between 1 and 255 characters long.}
		username: ${5:# Rackspace username, overrides I(credentials).}
		tenant_name: ${6:# The tenant name used for authentication.}
		tenant_id: ${7:# The tenant ID used for authentication.}
		region: ${8:DFW}
		auth_endpoint: ${9:https://identity.api.rackspacecloud.com/v2.0/}
		verify_ssl: ${10:# Whether or not to require SSL validation of API endpoints.}
		disabled: ${11:yes|no}
		identity_type: ${12:rackspace}
		state: ${13:#present|absent}
		env: ${14:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		criteria: ${15:# Alarm DSL that describes alerting conditions and their output states. Must be between 1 and 16384 characters long. See http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/alerts-language.html for a reference on the alerting language.}
		credentials: ${16:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${17:# Rackspace API key, overrides I(credentials).}
		metadata: ${18:# Arbitrary key/value pairs to accompany the alarm. Must be a hash of String keys and values between 1 and 255 characters long.}
$0
endsnippet

snippet rax_mon_check "Create or delete a Rackspace Cloud Monitoring check for an existing entity."
- name:
	rax_mon_check:
		entity_id: ${1:# ID of the rax_mon_entity to target with this check.}
		check_type: ${2:remote.dns|remote.ftp-banner|remote.http|remote.imap-banner|remote.mssql-banner|remote.mysql-banner|remote.ping|remote.pop3-banner|remote.postgresql-banner|remote.smtp-banner|remote.smtp|remote.ssh|remote.tcp|remote.telnet-banner|agent.filesystem|agent.memory|agent.load_average|agent.cpu|agent.disk|agent.network|agent.plugin}
		label: ${3:# Defines a label for this check, between 1 and 64 characters long.}
		username: ${4:# Rackspace username, overrides I(credentials).}
		tenant_name: ${5:# The tenant name used for authentication.}
		period: ${6:# The number of seconds between each time the check is performed. Must be greater than the minimum period set on your account.}
		disabled: ${7:yes|no}
		target_hostname: ${8:# One of `target_hostname` and `target_alias` is required for remote.* checks, but prohibited for agent.* checks. The hostname this check should target. Must be a valid IPv4, IPv6, or FQDN.}
		credentials: ${9:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		auth_endpoint: ${10:https://identity.api.rackspacecloud.com/v2.0/}
		target_alias: ${11:# One of `target_alias` and `target_hostname` is required for remote.* checks, but prohibited for agent.* checks. Use the corresponding key in the entity's `ip_addresses` hash to resolve an IP address to target.}
		env: ${12:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		identity_type: ${13:rackspace}
		tenant_id: ${14:# The tenant ID used for authentication.}
		region: ${15:DFW}
		verify_ssl: ${16:# Whether or not to require SSL validation of API endpoints.}
		state: ${17:present|absent}
		details: ${18:# Additional details specific to the check type. Must be a hash of strings between 1 and 255 characters long, or an array or object containing 0 to 256 items.}
		timeout: ${19:# The number of seconds this check will wait when attempting to collect results. Must be less than the period.}
		monitoring_zones_poll: ${20:# Comma-separated list of the names of the monitoring zones the check should run from. Available monitoring zones include mzdfw, mzhkg, mziad, mzlon, mzord and mzsyd. Required for remote.* checks; prohibited for agent.* checks.}
		api_key: ${21:# Rackspace API key, overrides I(credentials).}
		metadata: ${22:# Hash of arbitrary key-value pairs to accompany this check if it fires. Keys and values must be strings between 1 and 255 characters long.}
$0
endsnippet

snippet rax_mon_entity "Create or delete a Rackspace Cloud Monitoring entity"
- name:
	rax_mon_entity:
		label: ${1:# Defines a name for this entity. Must be a non-empty string between 1 and 255 characters long.}
		username: ${2:# Rackspace username, overrides I(credentials).}
		identity_type: ${3:rackspace}
		tenant_id: ${4:# The tenant ID used for authentication.}
		region: ${5:DFW}
		auth_endpoint: ${6:https://identity.api.rackspacecloud.com/v2.0/}
		verify_ssl: ${7:# Whether or not to require SSL validation of API endpoints.}
		state: ${8:present|absent}
		agent_id: ${9:# Rackspace monitoring agent on the target device to which this entity is bound. Necessary to collect C(agent.) rax_mon_checks against this entity.}
		env: ${10:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		tenant_name: ${11:# The tenant name used for authentication.}
		credentials: ${12:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${13:# Rackspace API key, overrides I(credentials).}
		named_ip_addresses: ${14:# Hash of IP addresses that may be referenced by name by rax_mon_checks added to this entity. Must be a dictionary of with keys that are names between 1 and 64 characters long, and values that are valid IPv4 or IPv6 addresses.}
		metadata: ${15:# Hash of arbitrary C(name), C(value) pairs that are passed to associated rax_mon_alarms. Names and values must all be between 1 and 255 characters long.}
$0
endsnippet

snippet rax_mon_notification "Create or delete a Rackspace Cloud Monitoring notification."
- name:
	rax_mon_notification:
		label: ${1:# Defines a friendly name for this notification. String between 1 and 255 characters long.}
		details: ${2:# Dictionary of key-value pairs used to initialize the notification. Required keys and meanings vary with notification type. See http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/ service-notification-types-crud.html for details.}
		notification_type: ${3:webhook|email|pagerduty}
		username: ${4:# Rackspace username, overrides I(credentials).}
		credentials: ${5:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		identity_type: ${6:rackspace}
		tenant_id: ${7:# The tenant ID used for authentication.}
		region: ${8:DFW}
		verify_ssl: ${9:# Whether or not to require SSL validation of API endpoints.}
		state: ${10:present|absent}
		env: ${11:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		tenant_name: ${12:# The tenant name used for authentication.}
		api_key: ${13:# Rackspace API key, overrides I(credentials).}
		auth_endpoint: ${14:https://identity.api.rackspacecloud.com/v2.0/}
$0
endsnippet

snippet rax_mon_notification_plan "Create or delete a Rackspace Cloud Monitoring notification plan."
- name:
	rax_mon_notification_plan:
		label: ${1:# Defines a friendly name for this notification plan. String between 1 and 255 characters long.}
		username: ${2:# Rackspace username, overrides I(credentials).}
		warning_state: ${3:# Notification list to use when the alarm state is WARNING. Must be an array of valid rax_mon_notification ids.}
		identity_type: ${4:rackspace}
		tenant_id: ${5:# The tenant ID used for authentication.}
		region: ${6:DFW}
		critical_state: ${7:# Notification list to use when the alarm state is CRITICAL. Must be an array of valid rax_mon_notification ids.}
		verify_ssl: ${8:# Whether or not to require SSL validation of API endpoints.}
		ok_state: ${9:# Notification list to use when the alarm state is OK. Must be an array of valid rax_mon_notification ids.}
		state: ${10:present|absent}
		env: ${11:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		tenant_name: ${12:# The tenant name used for authentication.}
		credentials: ${13:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${14:# Rackspace API key, overrides I(credentials).}
		auth_endpoint: ${15:https://identity.api.rackspacecloud.com/v2.0/}
$0
endsnippet

snippet rax_network "create / delete an isolated network in Rackspace Public Cloud"
- name:
	rax_network:
		username: ${1:# Rackspace username, overrides I(credentials).}
		identity_type: ${2:rackspace}
		tenant_id: ${3:# The tenant ID used for authentication.}
		region: ${4:DFW}
		verify_ssl: ${5:# Whether or not to require SSL validation of API endpoints.}
		label: ${6:# Label (name) to give the network}
		state: ${7:#present|absent}
		env: ${8:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		tenant_name: ${9:# The tenant name used for authentication.}
		credentials: ${10:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		cidr: ${11:# cidr of the network being created}
		api_key: ${12:# Rackspace API key, overrides I(credentials).}
		auth_endpoint: ${13:https://identity.api.rackspacecloud.com/v2.0/}
$0
endsnippet

snippet rax_queue "create / delete a queue in Rackspace Public Cloud"
- name:
	rax_queue:
		username: ${1:# Rackspace username, overrides I(credentials).}
		name: ${2:# Name to give the queue}
		region: ${3:DFW}
		verify_ssl: ${4:# Whether or not to require SSL validation of API endpoints.}
		state: ${5:#present|absent}
		env: ${6:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		credentials: ${7:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${8:# Rackspace API key, overrides I(credentials).}
$0
endsnippet

snippet rax_scaling_group "Manipulate Rackspace Cloud Autoscale Groups"
- name:
	rax_scaling_group:
		image: ${1:# image to use for the instance. Can be an C(id), C(human_id) or C(name)}
		min_entities: ${2:# The minimum number of entities that are allowed in the scaling group. Must be an integer between 0 and 1000.}
		flavor: ${3:# flavor to use for the instance}
		max_entities: ${4:# The maximum number of entities that are allowed in the scaling group. Must be an integer between 0 and 1000.}
		name: ${5:# Name to give the scaling group}
		server_name: ${6:# The base name for servers created by Autoscale}
		files: ${7:# Files to insert into the instance. Hash of C(remotepath: localpath)}
		username: ${8:# Rackspace username, overrides I(credentials).}
		key_name: ${9:# key pair to use on the instance}
		user_data: ${10:# Data to be uploaded to the servers config drive. This option implies I(config_drive). Can be a file path or a string}
		verify_ssl: ${11:# Whether or not to require SSL validation of API endpoints.}
		cooldown: ${12:# The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).}
		credentials: ${13:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		networks: ${14:[u'public', u'private']}
		wait: ${15:yes|#no}
		loadbalancers: ${16:# List of load balancer C(id) and C(port) hashes}
		wait_timeout: ${17:300}
		disk_config: ${18:#auto|manual}
		state: ${19:#present|absent}
		meta: ${20:# A hash of metadata to associate with the instance}
		env: ${21:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		api_key: ${22:# Rackspace API key, overrides I(credentials).}
		region: ${23:DFW}
		config_drive: ${24:yes|no}
$0
endsnippet

snippet rax_scaling_policy "Manipulate Rackspace Cloud Autoscale Scaling Policy"
- name:
	rax_scaling_policy:
		name: ${1:# Name to give the policy}
		scaling_group: ${2:# Name of the scaling group that this policy will be added to}
		policy_type: ${3:webhook|schedule}
		username: ${4:# Rackspace username, overrides I(credentials).}
		is_percent: ${5:no}
		env: ${6:# Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration).}
		region: ${7:DFW}
		verify_ssl: ${8:# Whether or not to require SSL validation of API endpoints.}
		cron: ${9:# The time when the policy will be executed, as a cron entry. For example, if this is parameter is set to C(1 0 * * *)}
		desired_capacity: ${10:# The desired server capacity of the scaling the group; that is, how many servers should be in the scaling group.}
		state: ${11:#present|absent}
		cooldown: ${12:# The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be an integer between 0 and 86400 (24 hrs).}
		at: ${13:# The UTC time when this policy will be executed. The time must be formatted according to C(yyyy-MM-dd'T'HH:mm:ss.SSS) such as C(2013-05-19T08:07:08Z)}
		credentials: ${14:# File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided.}
		api_key: ${15:# Rackspace API key, overrides I(credentials).}
		change: ${16:# The change, either as a number of servers or as a percentage, to make in the scaling group. If this is a percentage, you must set I(is_percent) to C(true) also.}
$0
endsnippet

snippet imgadm "Manage SmartOS images"
- name:
	imgadm:
		state: ${1:present|absent|deleted|imported|updated|vacuumed}
		source: ${2:# URI for the image source.}
		force: ${3:True|False}
		uuid: ${4:# Image UUID. Can either be a full UUID or C(*) for all images.}
		type: ${5:#imgapi|docker|dsapi}
		pool: ${6:zones}
$0
endsnippet

snippet smartos_image_facts "Get SmartOS image details."
- name:
	smartos_image_facts:
		filters: ${1:# Criteria for selecting image. Can be any value from image manifest and 'published_date', 'published', 'source', 'clones', and 'size'. More informaton can be found at U(https://smartos.org/man/1m/imgadm) under 'imgadm list'.}
$0
endsnippet

snippet vmadm "Manage SmartOS virtual machines and zones."
- name:
	vmadm:
		state: ${1:present|absent|stopped|restarted}
		brand: ${2:#joyent|joyent-minimal|kvm|lx}
		customer_metadata: ${3:# Metadata to be set and associated with this VM, this contain customer modifiable keys.}
		disk_driver: ${4:# Default value for a virtual disk model for KVM guests.}
		force: ${5:# Force a particular action (i.e. stop or delete a VM).}
		zfs_root_compression: ${6:# Specifies compression algorithm used for this VMs root dataset. This option only has effect on the zoneroot dataset.}
		virtio_txtimer: ${7:# Timeout (in nanoseconds) for the TX timer of virtio NICs.}
		spice_password: ${8:# Password required to connect to SPICE. By default no password is set. Please note this can be read from the Global Zone.}
		zfs_io_priority: ${9:# IO throttle priority value relative to other VMs.}
		ram: ${10:# Amount of virtual RAM for a KVM guest (in MiBs).}
		dns_domain: ${11:# Domain value for C(/etc/hosts).}
		max_physical_memory: ${12:# Maximum amount of memory (in MiBs) on the host that the VM is allowed to use.}
		nic_driver: ${13:# Default value for a virtual NIC model for KVM guests.}
		zfs_data_compression: ${14:# Specifies compression algorithm used for this VMs data dataset. This option only has effect on delegated datasets.}
		image_uuid: ${15:# Image UUID.}
		fs_allowed: ${16:# Comma separated list of filesystem types this zone is allowed to mount.}
		indestructible_delegated: ${17:# Adds an C(@indestructible) snapshot to delegated datasets.}
		qemu_opts: ${18:# Additional qemu arguments for KVM guests. This overwrites the default arguments provided by vmadm(1M) and should only be used for debugging.}
		delegate_dataset: ${19:# Whether to delegate a ZFS dataset to an OS VM.}
		firewall_enabled: ${20:# Enables the firewall, allowing fwadm(1M) rules to be applied.}
		mdata_exec_timeout: ${21:# Timeout in seconds (or 0 to disable) for the C(svc:/smartdc/mdata:execute) service that runs user-scripts in the zone.}
		archive_on_delete: ${22:# When enabled, the zone dataset will be mounted on C(/zones/archive) upon removal.}
		nics: ${23:# A list of nics to add, valid properties are documented in vmadm(1M).}
		hostname: ${24:# Zone/VM hostname.}
		boot: ${25:# Set the boot order for KVM VMs.}
		vga: ${26:# Specify VGA emulation used by KVM VMs.}
		zfs_snapshot_limit: ${27:# Number of snapshots the VM can have.}
		limit_priv: ${28:# Set (comma separated) list of privileges the zone is allowed to use.}
		cpu_cap: ${29:# Sets a limit on the amount of CPU time that can be used by a VM. Use C(0) for no cap.}
		maintain_resolvers: ${30:# Resolvers in C(/etc/resolv.conf) will be updated when updating the I(resolvers) property.}
		indestructible_zoneroot: ${31:# Adds an C(@indestructible) snapshot to zoneroot.}
		vnc_password: ${32:# Password required to connect to VNC. By default no password is set. Please note this can be read from the Global Zone.}
		vcpus: ${33:# Number of virtual CPUs for a KVM guest.}
		disks: ${34:# A list of disks to add, valid properties are documented in vmadm(1M).}
		max_swap: ${35:# Maximum amount of virtual memory (in MiBs) the VM is allowed to use.}
		zfs_root_recsize: ${36:# Suggested block size (power of 2) for files in the zoneroot dataset's filesystem.}
		zfs_filesystem_limit: ${37:# Maximum number of filesystems the VM can have.}
		quota: ${38:# Quota on zone filesystems (in MiBs).}
		filesystems: ${39:# Mount additional filesystems into an OS VM.}
		autoboot: ${40:# Whether or not a VM is booted when the system is rebooted.}
		tmpfs: ${41:# Amount of memory (in MiBs) that will be available in the VM for the C(/tmp) filesystem.}
		qemu_extra_opts: ${42:# Additional qemu cmdline arguments for KVM guests.}
		resolvers: ${43:# List of resolvers to be put into C(/etc/resolv.conf).}
		max_lwps: ${44:# Maximum number of lightweight processes this VM is allowed to have running.}
		nowait: ${45:# Consider the provisioning complete when the VM first starts, rather than when the VM has rebooted.}
		name: ${46:# Name of the VM. vmadm(1M) uses this as an optional name.}
		kernel_version: ${47:# Kernel version to emulate for LX VMs.}
		max_locked_memory: ${48:# Total amount of memory (in MiBs) on the host that can be locked by this VM.}
		vnc_port: ${49:# TCP port to listen of the VNC server. Or set C(0) for random, or C(-1) to disable.}
		uuid: ${50:# UUID of the VM. Can either be a full UUID or C(*) for all VMs.}
		internal_metadata_namespace: ${51:# List of namespaces to be set as I(internal_metadata-only); these namespaces will come from I(internal_metadata) rather than I(customer_metadata).}
		virtio_txburst: ${52:# Number of packets that can be sent in a single flush of the tx queue of virtio NICs.}
		spice_opts: ${53:# Addition options for SPICE-enabled KVM VMs.}
		zfs_data_recsize: ${54:# Suggested block size (power of 2) for files in the delegated dataset's filesystem.}
		internal_metadata: ${55:# Metadata to be set and associated with this VM, this contains operator generated keys.}
		cpu_type: ${56:#qemu64|host}
		routes: ${57:# Dictionary that maps destinations to gateways, these will be set as static routes in the VM.}
		zpool: ${58:# ZFS pool the VM's zone dataset will be created in.}
		cpu_shares: ${59:# Sets a limit on the number of fair share scheduler (FSS) CPU shares for a VM. This limit is relative to all other VMs on the system.}
$0
endsnippet

snippet sl_vm "create or cancel a virtual instance in SoftLayer"
- name:
	sl_vm:
		disks: ${1:[25]}
		cpus: ${2:# Count of cpus to be assigned to new virtual instance}
		memory: ${3:# Amount of memory to be assigned to new virtual instance}
		domain: ${4:# Domain name to be provided to a virtual instance}
		tags: ${5:# Tag or list of tags to be provided to a virtual instance}
		dedicated: ${6:no}
		private: ${7:no}
		image_id: ${8:# Image Template to be used for new virtual instance}
		nic_speed: ${9:10}
		private_vlan: ${10:# VLAN by its Id to be assigned to the private NIC}
		datacenter: ${11:# Datacenter for the virtual instance to be deployed}
		public_vlan: ${12:# VLAN by its Id to be assigned to the public NIC}
		wait: ${13:yes}
		hourly: ${14:yes}
		ssh_keys: ${15:# List of ssh keys by their Id to be assigned to a virtual instance}
		hostname: ${16:# Hostname to be provided to a virtual instance}
		os_code: ${17:# OS Code to be used for new virtual instance}
		instance_id: ${18:# Instance Id of the virtual instance to perform action option}
		local_disk: ${19:yes}
		state: ${20:present}
		wait_timeout: ${21:600}
		post_uri: ${22:# URL of a post provisioning script to be loaded and executed on virtual instance}
$0
endsnippet

snippet udm_dns_record "Manage dns entries on a univention corporate server"
- name:
	udm_dns_record:
		type: ${1:host_record|alias|ptr_record|srv_record|txt_record}
		name: ${2:# Name of the record, this is also the DNS record. E.g. www for www.example.com.}
		zone: ${3:# Corresponding DNS zone for this record, e.g. example.com.}
		state: ${4:#present|absent}
		data: ${5:[]}
$0
endsnippet

snippet udm_dns_zone "Manage dns zones on a univention corporate server"
- name:
	udm_dns_zone:
		zone: ${1:# DNS zone name, e.g. C(example.com).}
		type: ${2:forward_zone|reverse_zone}
		retry: ${3:1800}
		interfaces: ${4:# List of interface IP addresses, on which the server should response this zone. Required if C(state=present).}
		refresh: ${5:3600}
		state: ${6:#present|absent}
		contact: ${7:}
		expire: ${8:604800}
		ttl: ${9:600}
		nameserver: ${10:# List of appropriate name servers. Required if C(state=present).}
		mx: ${11:[]}
$0
endsnippet

snippet udm_group "Manage of the posix group"
- name:
	udm_group:
		name: ${1:# Name of the posix group.}
		state: ${2:#present|absent}
		position: ${3:# define the whole ldap position of the group, e.g. C(cn=g123m-1A,cn=classes,cn=schueler,cn=groups,ou=schule,dc=example,dc=com).}
		ou: ${4:# LDAP OU, e.g. school for LDAP OU C(ou=school,dc=example,dc=com).}
		subpath: ${5:# Subpath inside the OU, e.g. C(cn=classes,cn=students,cn=groups).}
		description: ${6:# Group description.}
$0
endsnippet

snippet udm_share "Manage samba shares on a univention corporate server"
- name:
	udm_share:
		name: ${1:# Name}
		ou: ${2:# Organisational unit, inside the LDAP Base DN.}
		samba_name: ${3:# Windows name. Required if C(state=present).}
		samba_hide_files: ${4:# Hide files.}
		samba_blocking_locks: ${5:0|#1}
		samba_directory_mode: ${6:0755}
		samba_dos_filemode: ${7:#0|1}
		samba_postexec: ${8:# Postexec script.}
		owner: ${9:0}
		samba_fake_oplocks: ${10:#0|1}
		samba_strict_locking: ${11:Auto}
		samba_public: ${12:#0|1}
		samba_force_directory_security_mode: ${13:#0|1}
		group: ${14:0}
		samba_writeable: ${15:0|#1}
		samba_nt_acl_support: ${16:0|#1}
		samba_write_list: ${17:# Restrict write access to these users/groups.}
		samba_preexec: ${18:# Preexec script.}
		samba_browseable: ${19:0|#1}
		samba_inherit_acls: ${20:0|#1}
		samba_msdfs_root: ${21:#0|1}
		state: ${22:#present|absent}
		samba_valid_users: ${23:# Valid users or groups.}
		samba_force_create_mode: ${24:#0|1}
		root_squash: ${25:0|#1}
		samba_directory_security_mode: ${26:0777}
		samba_force_group: ${27:# Force group.}
		samba_vfs_objects: ${28:# VFS objects.}
		samba_force_directory_mode: ${29:#0|1}
		writeable: ${30:0|#1}
		samba_locking: ${31:0|#1}
		samba_security_mode: ${32:0777}
		samba_inherit_owner: ${33:#0|1}
		samba_csc_policy: ${34:manual}
		sync: ${35:sync}
		nfs_hosts: ${36:[]}
		path: ${37:# Directory on the providing server, e.g. C(/home). Required if C(state=present).}
		nfs_custom_settings: ${38:[]}
		samba_force_user: ${39:# Force user.}
		samba_invalid_users: ${40:# Invalid users or groups.}
		samba_create_mode: ${41:0744}
		samba_force_security_mode: ${42:#0|1}
		samba_level_2_oplocks: ${43:0|#1}
		samba_custom_settings: ${44:[]}
		samba_hide_unreadable: ${45:#0|1}
		host: ${46:# Host FQDN (server which provides the share), e.g. C({{ ansible_fqdn }}). Required if C(state=present).}
		samba_block_size: ${47:# Blocking size.}
		samba_oplocks: ${48:0|#1}
		samba_hosts_allow: ${49:[]}
		samba_inherit_permissions: ${50:#0|1}
		subtree_checking: ${51:0|#1}
		directorymode: ${52:00755}
		samba_hosts_deny: ${53:[]}
$0
endsnippet

snippet udm_user "Manage posix users on a univention corporate server"
- name:
	udm_user:
		username: ${1:# User name}
		update_password: ${2:always}
		samba_user_workstations: ${3:[]}
		homedrive: ${4:# Windows home drive, e.g. C("H:").}
		room_number: ${5:# Room number of users business address.}
		primary_group: ${6:cn=Domain Users,cn=groups,$LDAP_BASE_DN}
		postcode: ${7:# Postal code of users business address.}
		scriptpath: ${8:# Windows logon script.}
		home_share: ${9:# Home NFS share. Must be a LDAP DN, e.g. C(cn=home,cn=shares,ou=school,dc=example,dc=com).}
		override_pw_history: ${10:no}
		city: ${11:# City of users business address.}
		display_name: ${12:# Display name (not gecos)}
		pager_telephonenumber: ${13:[]}
		employee_number: ${14:# Employee number}
		serviceprovider: ${15:[u'']}
		organisation: ${16:# Organisation}
		subpath: ${17:cn=users}
		state: ${18:#present|absent}
		home_share_path: ${19:# Path to home NFS share, inside the homeShare.}
		userexpiry: ${20:Today + 1 year}
		unixhome: ${21:/home/$USERNAME}
		mail_home_server: ${22:# FQDN of mail server}
		email: ${23:[u'']}
		sambahome: ${24:# Windows home path, e.g. C('\\$FQDN\$USERNAME').}
		home_telephone_number: ${25:[]}
		shell: ${26:/bin/bash}
		description: ${27:# Description (not gecos)}
		firstname: ${28:# First name. Required if C(state=present).}
		lastname: ${29:# Last name. Required if C(state=present).}
		mail_alternative_address: ${30:[]}
		phone: ${31:[]}
		birthday: ${32:# Birthday}
		groups: ${33:[]}
		profilepath: ${34:# Windows profile directory}
		employee_type: ${35:# Employee type}
		password: ${36:# Password. Required if C(state=present).}
		pwd_change_next_login: ${37:0|1}
		mail_primary_address: ${38:# Primary e-mail address}
		country: ${39:# Country of users business address.}
		title: ${40:# Title, e.g. C(Prof.).}
		override_pw_length: ${41:no}
		street: ${42:# Street of users business address.}
		gecos: ${43:# GECOS}
		mobile_telephone_number: ${44:[]}
		position: ${45:}
		ou: ${46:}
		department_number: ${47:# Department number of users business address.}
		samba_privileges: ${48:[]}
		secretary: ${49:[]}
$0
endsnippet

snippet vca_fw "add remove firewall rules in a gateway  in a vca"
- name:
	vca_fw:
		fw_rules: ${1:no}
		username: ${2:# The vca username or email address, if not set the environment variable C(VCA_USER) is checked for the username.}
		gateway_name: ${3:gateway}
		state: ${4:#present|absent}
		instance_id: ${5:# The instance id in a vchs environment to be used for creating the vapp.}
		host: ${6:# The authentication host to be used when service type is vcd.}
		service_type: ${7:#vca|vchs|vcd}
		org: ${8:# The org to login to for creating vapp. This option is required when the C(service_type) is I(vdc).}
		password: ${9:# The vca password, if not set the environment variable C(VCA_PASS) is checked for the password.}
		vdc_name: ${10:# The name of the vdc where the gateway is located.}
		api_version: ${11:5.7}
		verify_certs: ${12:yes}
$0
endsnippet

snippet vca_nat "add remove nat rules in a gateway  in a vca"
- name:
	vca_nat:
		nat_rules: ${1:no}
		username: ${2:# The vca username or email address, if not set the environment variable C(VCA_USER) is checked for the username.}
		purge_rules: ${3:no}
		state: ${4:#present|absent}
		instance_id: ${5:# The instance id in a vchs environment to be used for creating the vapp.}
		host: ${6:# The authentication host to be used when service type is vcd.}
		org: ${7:# The org to login to for creating vapp. This option is required when the C(service_type) is I(vdc).}
		service_type: ${8:#vca|vchs|vcd}
		gateway_name: ${9:gateway}
		password: ${10:# The vca password, if not set the environment variable C(VCA_PASS) is checked for the password.}
		vdc_name: ${11:# The name of the vdc where the gateway is located.}
		api_version: ${12:5.7}
		verify_certs: ${13:yes}
$0
endsnippet

snippet vca_vapp "Manages vCloud Air vApp instances."
- name:
	vca_vapp:
		vapp_name: ${1:# The name of the vCloud Air vApp instance}
		vm_name: ${2:# The name of the virtual machine instance in the vApp to manage.}
		username: ${3:# The vCloud Air username to use during authentication}
		vm_memory: ${4:# The amount of memory in MB to allocate to VMs in the vApp.  If the I(vm_name) argument is provided, then this becomes a per VM setting otherise it is applied to all VMs in the vApp.}
		template_name: ${5:# The name of the vApp template to use to create the vApp instance.  If the I(state) is not `absent` then the I(template_name) value must be provided.  The I(template_name) must be previously uploaded to the catalog specified by I(catalog_name)}
		network_mode: ${6:#pool|dhcp|static}
		org: ${7:# The org to login to for creating vapp, mostly set when the service_type is vdc.}
		operation: ${8:#noop|poweron|poweroff|suspend|shutdown|reboot|reset}
		password: ${9:# The vCloud Air password to use during authentication}
		vm_cpus: ${10:# The number of vCPUs to configure for the VM in the vApp.   If the I(vm_name) argument is provided, then this becomes a per VM setting otherwise it is applied to all VMs in the vApp.}
		vdc_name: ${11:# The name of the virtual data center (VDC) where the vm should be created or contains the vAPP.}
		network_name: ${12:# The name of the network that should be attached to the virtual machine in the vApp.  The virtual network specified must already be created in the vCloud Air VDC.  If the I(state) is not 'absent' then the I(network_name) argument must be provided.}
		host: ${13:# The authentication host to be used when service type  is vcd.}
		instance_id: ${14:# The instance id in a vchs environment to be used for creating the vapp}
		state: ${15:#present|absent|deployed|undeployed}
		service_type: ${16:#vca|vchs|vcd}
		api_version: ${17:5.7}
$0
endsnippet

snippet vmware_cluster "Create VMware vSphere Cluster"
- name:
	vmware_cluster:
		username: ${1:# The username of the vSphere vCenter.}
		datacenter_name: ${2:# The name of the datacenter the cluster will be created in.}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		cluster_name: ${4:# The name of the cluster that will be created}
		password: ${5:# The password of the vSphere vCenter.}
		enable_ha: ${6:no}
		enable_vsan: ${7:no}
		enable_drs: ${8:no}
		validate_certs: ${9:#True|False}
$0
endsnippet

snippet vmware_datacenter "Manage VMware vSphere Datacenters"
- name:
	vmware_datacenter:
		username: ${1:# The username of the vSphere vCenter.}
		datacenter_name: ${2:# The name of the datacenter the cluster will be created in.}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		password: ${4:# The password of the vSphere vCenter.}
		state: ${5:#present|absent}
		validate_certs: ${6:#True|False}
$0
endsnippet

snippet vmware_dns_config "Manage VMware ESXi DNS Configuration"
- name:
	vmware_dns_config:
		username: ${1:# The username of the vSphere vCenter.}
		dns_servers: ${2:# The DNS servers that the host should be configured to use.}
		domainname: ${3:# The domain the ESXi host should be apart of.}
		change_hostname_to: ${4:# The hostname that an ESXi host should be changed to.}
		password: ${5:# The password of the vSphere vCenter.}
		hostname: ${6:# The hostname or IP address of the vSphere vCenter.}
		validate_certs: ${7:#True|False}
$0
endsnippet

snippet vmware_dvs_host "Add or remove a host from distributed virtual switch"
- name:
	vmware_dvs_host:
		username: ${1:# The username of the vSphere vCenter.}
		hostname: ${2:# The hostname or IP address of the vSphere vCenter.}
		state: ${3:present|absent}
		esxi_hostname: ${4:# The ESXi hostname}
		password: ${5:# The password of the vSphere vCenter.}
		vmnics: ${6:# The ESXi hosts vmnics to use with the Distributed vSwitch}
		switch_name: ${7:# The name of the Distributed vSwitch}
		validate_certs: ${8:#True|False}
$0
endsnippet

snippet vmware_dvs_portgroup "Create or remove a Distributed vSwitch portgroup"
- name:
	vmware_dvs_portgroup:
		username: ${1:# The username of the vSphere vCenter.}
		portgroup_name: ${2:# The name of the portgroup that is to be created or deleted}
		password: ${3:# The password of the vSphere vCenter.}
		hostname: ${4:# The hostname or IP address of the vSphere vCenter.}
		num_ports: ${5:# The number of ports the portgroup should contain}
		portgroup_type: ${6:earlyBinding|lateBinding|ephemeral}
		switch_name: ${7:# The name of the distributed vSwitch the port group should be created on.}
		vlan_id: ${8:# The VLAN ID that should be configured with the portgroup}
		validate_certs: ${9:#True|False}
$0
endsnippet

snippet vmware_dvswitch "Create or remove a distributed vSwitch"
- name:
	vmware_dvswitch:
		username: ${1:# The username of the vSphere vCenter.}
		password: ${2:# The password of the vSphere vCenter.}
		datacenter_name: ${3:# The name of the datacenter that will contain the dvSwitch}
		hostname: ${4:# The hostname or IP address of the vSphere vCenter.}
		discovery_proto: ${5:cdp|lldp}
		mtu: ${6:# The switch maximum transmission unit}
		switch_name: ${7:# The name of the switch to create or remove}
		uplink_quantity: ${8:# Quantity of uplink per ESXi host added to the switch}
		state: ${9:#present|absent}
		discovery_operation: ${10:both|none|advertise|listen}
		validate_certs: ${11:#True|False}
$0
endsnippet

snippet vmware_guest "Manages virtual machines in vcenter"
- name:
	vmware_guest:
		username: ${1:# The username of the vSphere vCenter.}
		name: ${2:# Name of the VM to work with}
		password: ${3:# The password of the vSphere vCenter.}
		hostname: ${4:# The hostname or IP address of the vSphere vCenter.}
		state: ${5:present|absent|poweredon|poweredoff|restarted|suspended|shutdownguest|rebootguest}
		resource_pool: ${6:# Affect machine to the given resource pool}
		force: ${7:# Ignore warnings and complete the actions}
		template: ${8:# Template used to create VM.}
		guest_id: ${9:# Set the guest ID (Debian, RHEL, Windows...)}
		cluster: ${10:# The cluster name where the VM will run.}
		hardware: ${11:# Manage some VM hardware attributes.}
		name_match: ${12:#first|last}
		customization: ${13:# Parameters to customize template}
		disk: ${14:# A list of disks to add}
		networks: ${15:# Network to use should include C(name) or C(vlan) entry}
		wait_for_ip_address: ${16:no}
		datacenter: ${17:ha-datacenter}
		uuid: ${18:# UUID of the instance to manage if known, this is VMware's unique identifier.}
		customvalues: ${19:# Define a list of customvalues to set on VM.}
		annotation: ${20:# A note or annotation to include in the VM}
		is_template: ${21:no}
		esxi_hostname: ${22:# The esxi hostname where the VM will run.}
		folder: ${23:# Destination folder, absolute path to find an existing guest or create the new guest}
		validate_certs: ${24:#True|False}
$0
endsnippet

snippet vmware_guest_facts "Gather facts about a single VM"
- name:
	vmware_guest_facts:
		username: ${1:# The username of the vSphere vCenter.}
		datacenter: ${2:# Destination datacenter for the deploy operation}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		password: ${4:# The password of the vSphere vCenter.}
		name: ${5:# Name of the VM to work with}
		uuid: ${6:# UUID of the instance to manage if known, this is VMware's unique identifier.}
		name_match: ${7:#first|last}
		folder: ${8:# Destination folder, absolute path to find an existing guest.}
		validate_certs: ${9:#True|False}
$0
endsnippet

snippet vmware_guest_snapshot "Manages virtual machines snapshots in vcenter"
- name:
	vmware_guest_snapshot:
		username: ${1:# The username of the vSphere vCenter.}
		datacenter: ${2:# Destination datacenter for the deploy operation}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		name: ${4:# Name of the VM to work with}
		state: ${5:present|absent|revert|remove_all}
		password: ${6:# The password of the vSphere vCenter.}
		uuid: ${7:# UUID of the instance to manage if known, this is VMware's unique identifier.}
		snapshot_name: ${8:# Sets the snapshot name to manage.}
		name_match: ${9:#first|last}
		folder: ${10:# Define instance folder location.}
		validate_certs: ${11:#True|False}
		description: ${12:# Define an arbitrary description to attach to snapshot.}
$0
endsnippet

snippet vmware_host "Add/remove ESXi host to/from vCenter"
- name:
	vmware_host:
		cluster_name: ${1:# Name of the cluster to add the host}
		username: ${2:# The username of the vSphere vCenter.}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		datacenter_name: ${4:# Name of the datacenter to add the host}
		esxi_hostname: ${5:# ESXi hostname to manage}
		esxi_password: ${6:# ESXi password}
		password: ${7:# The password of the vSphere vCenter.}
		esxi_username: ${8:# ESXi username}
		state: ${9:#present|absent}
		validate_certs: ${10:#True|False}
$0
endsnippet

snippet vmware_local_user_manager "Manage local users on an ESXi host"
- name:
	vmware_local_user_manager:
		username: ${1:# The username of the vSphere vCenter.}
		hostname: ${2:# The hostname or IP address of the vSphere vCenter.}
		password: ${3:# The password of the vSphere vCenter.}
		local_user_name: ${4:# The local user name to be changed}
		local_user_description: ${5:# Description for the user}
		local_user_password: ${6:# The password to be set}
		state: ${7:#present|absent}
		validate_certs: ${8:#True|False}
$0
endsnippet

snippet vmware_maintenancemode "Place a host into maintenance mode"
- name:
	vmware_maintenancemode:
		username: ${1:# The username of the vSphere vCenter.}
		hostname: ${2:# The hostname or IP address of the vSphere vCenter.}
		esxi_hostname: ${3:# Name of the host as defined in vCenter}
		password: ${4:# The password of the vSphere vCenter.}
		timeout: ${5:0}
		evacuate: ${6:True|#False}
		vsan_mode: ${7:ensureObjectAccessibility|evacuateAllData|noAction}
		state: ${8:#present|absent}
		validate_certs: ${9:#True|False}
$0
endsnippet

snippet vmware_migrate_vmk "Migrate a VMK interface from VSS to VDS"
- name:
	vmware_migrate_vmk:
		username: ${1:# The username of the vSphere vCenter.}
		password: ${2:# The password of the vSphere vCenter.}
		current_switch_name: ${3:# Switch VMK interface is currently on}
		migrate_portgroup_name: ${4:# Portgroup name to migrate VMK interface to}
		esxi_hostname: ${5:# ESXi hostname to be managed}
		device: ${6:# VMK interface name}
		migrate_switch_name: ${7:# Switch name to migrate VMK interface to}
		current_portgroup_name: ${8:# Portgroup name VMK interface is currently on}
		hostname: ${9:# The hostname or IP address of the vSphere vCenter.}
		validate_certs: ${10:#True|False}
$0
endsnippet

snippet vmware_portgroup "Create a VMware portgroup"
- name:
	vmware_portgroup:
		username: ${1:# The username of the vSphere vCenter.}
		portgroup_name: ${2:# Portgroup name to add}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		password: ${4:# The password of the vSphere vCenter.}
		switch_name: ${5:# vSwitch to modify}
		vlan_id: ${6:# VLAN ID to assign to portgroup}
		network_policy: ${7:# Network policy specifies layer 2 security settings for a portgroup such as promiscuous mode, where guest adapter listens to all the packets, MAC address changes and forged transmits. Settings are promiscuous_mode, forged_transmits, mac_changes}
		validate_certs: ${8:#True|False}
$0
endsnippet

snippet vmware_target_canonical_facts "Return canonical (NAA) from an ESXi host"
- name:
	vmware_target_canonical_facts:
		username: ${1:# The username of the vSphere vCenter.}
		password: ${2:# The password of the vSphere vCenter.}
		target_id: ${3:# The target id based on order of scsi device}
		hostname: ${4:# The hostname or IP address of the vSphere vCenter.}
		validate_certs: ${5:#True|False}
$0
endsnippet

snippet vmware_vm_facts "Return basic facts pertaining to a vSphere virtual machine guest"
- name:
	vmware_vm_facts:
		username: ${1:# The username of the vSphere vCenter.}
		password: ${2:# The password of the vSphere vCenter.}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		validate_certs: ${4:#True|False}
$0
endsnippet

snippet vmware_vm_shell "Execute a process in VM"
- name:
	vmware_vm_shell:
		username: ${1:# The username of the vSphere vCenter.}
		vm_shell: ${2:# The absolute path to the program to start. On Linux this is executed via bash.}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		password: ${4:# The password of the vSphere vCenter.}
		vm_id: ${5:# The identification for the VM}
		datacenter: ${6:# The datacenter hosting the VM}
		vm_password: ${7:# The password used to login to the VM.}
		vm_shell_cwd: ${8:# The current working directory of the application from which it will be run}
		vm_shell_args: ${9:# The argument to the program.}
		vm_username: ${10:# The user to connect to the VM.}
		vm_shell_env: ${11:# Comma separated list of envirnoment variable, specified in the guest OS notation}
		cluster: ${12:# The cluster hosting the VM}
		vm_id_type: ${13:uuid|dns_name|inventory_path|#vm_name}
		validate_certs: ${14:#True|False}
$0
endsnippet

snippet vmware_vm_vss_dvs_migrate "Migrates a virtual machine from a standard vswitch to distributed"
- name:
	vmware_vm_vss_dvs_migrate:
		vm_name: ${1:# Name of the virtual machine to migrate to a dvSwitch}
		username: ${2:# The username of the vSphere vCenter.}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		dvportgroup_name: ${4:# Name of the portgroup to migrate to the virtual machine to}
		password: ${5:# The password of the vSphere vCenter.}
		validate_certs: ${6:#True|False}
$0
endsnippet

snippet vmware_vmkernel "Create a VMware VMkernel Interface"
- name:
	vmware_vmkernel:
		username: ${1:# The username of the vSphere vCenter.}
		portgroup_name: ${2:# The name of the portgroup for the VMK interface}
		vland_id: ${3:# The VLAN ID for the VMK interface}
		subnet_mask: ${4:# The Subnet Mask for the VMK interface}
		vswitch_name: ${5:# The name of the vswitch where to add the VMK interface}
		hostname: ${6:# The hostname or IP address of the vSphere vCenter.}
		password: ${7:# The password of the vSphere vCenter.}
		ip_address: ${8:# The IP Address for the VMK interface}
		enable_vmotion: ${9:# Enable the VMK interface for vMotion traffic}
		validate_certs: ${10:#True|False}
		mtu: ${11:# The MTU for the VMK interface}
		enable_mgmt: ${12:# Enable the VMK interface for Management traffic}
		enable_vsan: ${13:# Enable the VMK interface for VSAN traffic}
		enable_ft: ${14:# Enable the VMK interface for Fault Tolerance traffic}
$0
endsnippet

snippet vmware_vmkernel_ip_config "Configure the VMkernel IP Address"
- name:
	vmware_vmkernel_ip_config:
		username: ${1:# The username of the vSphere vCenter.}
		subnet_mask: ${2:# Subnet Mask to assign to VMkernel interface}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		vmk_name: ${4:# VMkernel interface name}
		password: ${5:# The password of the vSphere vCenter.}
		ip_address: ${6:# IP address to assign to VMkernel interface}
		validate_certs: ${7:#True|False}
$0
endsnippet

snippet vmware_vmotion "Move a virtual machine using vMotion"
- name:
	vmware_vmotion:
		vm_name: ${1:# Name of the VM to perform a vMotion on}
		username: ${2:# The username of the vSphere vCenter.}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		password: ${4:# The password of the vSphere vCenter.}
		destination_host: ${5:# Name of the end host the VM should be running on}
		validate_certs: ${6:#True|False}
$0
endsnippet

snippet vmware_vsan_cluster "Configure VSAN clustering on an ESXi host"
- name:
	vmware_vsan_cluster:
		username: ${1:# The username of the vSphere vCenter.}
		password: ${2:# The password of the vSphere vCenter.}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		cluster_uuid: ${4:# Desired cluster UUID}
		validate_certs: ${5:#True|False}
$0
endsnippet

snippet vmware_vswitch "Add a VMware Standard Switch to an ESXi host"
- name:
	vmware_vswitch:
		username: ${1:# The username of the vSphere vCenter.}
		password: ${2:# The password of the vSphere vCenter.}
		hostname: ${3:# The hostname or IP address of the vSphere vCenter.}
		nic_name: ${4:# vmnic name to attach to vswitch}
		switch_name: ${5:# vSwitch name to add}
		mtu: ${6:# MTU to configure on vswitch}
		state: ${7:#present|absent}
		number_of_ports: ${8:128}
		validate_certs: ${9:#True|False}
$0
endsnippet

snippet vsphere_copy "Copy a file to a vCenter datastore"
- name:
	vsphere_copy:
		src: ${1:# The file to push to vCenter}
		datacenter: ${2:# The datacenter on the vCenter server that holds the datastore.}
		host: ${3:# The vCenter server on which the datastore is available.}
		path: ${4:# The file to push to the datastore on the vCenter server.}
		login: ${5:# The login name to authenticate on the vCenter server.}
		password: ${6:# The password to authenticate on the vCenter server.}
		datastore: ${7:# The datastore on the vCenter server to push files to.}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet vsphere_guest "Create/delete/manage a guest VM through VMware vSphere."
- name:
	vsphere_guest:
		username: ${1:# Username to connect to vcenter as.}
		vcenter_hostname: ${2:# The hostname of the vcenter server the module will connect to, to create the guest.}
		password: ${3:# Password of the user to connect to vcenter as.}
		guest: ${4:# The virtual server name you wish to manage.}
		resource_pool: ${5:# The name of the resource_pool to create the VM in.}
		force: ${6:yes|#no}
		vm_disk: ${7:# A key, value list of disks and their sizes and which datastore to keep it in.}
		vm_hw_version: ${8:# Desired hardware version identifier (for example, "vmx-08" for vms that needs to be managed with vSphere Client). Note that changing hardware version of existing vm is not supported.}
		cluster: ${9:# The name of the cluster to create the VM in. By default this is derived from the host you tell the module to build the guest on.}
		vmware_guest_facts: ${10:# Gather facts from vCenter on a particular VM}
		vm_extra_config: ${11:# A key, value pair of any extra values you want set or changed in the vmx file of the VM. Useful to set advanced options on the VM.}
		template_src: ${12:# Name of the source template to deploy from}
		power_on_after_clone: ${13:yes|no}
		vm_nic: ${14:# A key, value list of nics, their types and what network to put them on.}
		esxi: ${15:# Dictionary which includes datacenter and hostname on which the VM should be created. For standalone ESXi hosts, ha-datacenter should be used as the datacenter name}
		vm_hardware: ${16:# A key, value list of VM config settings. Must include ['memory_mb', 'num_cpus', 'osid', 'scsi'].}
		validate_certs: ${17:yes|no}
		state: ${18:#present|powered_off|absent|powered_on|restarted|reconfigured}
		from_template: ${19:yes|no}
		snapshot_to_clone: ${20:none}
$0
endsnippet

snippet webfaction_app "Add or remove applications on a Webfaction host"
- name:
	webfaction_app:
		name: ${1:# The name of the application}
		login_password: ${2:# The webfaction password to use}
		type: ${3:# The type of application to create. See the Webfaction docs at http://docs.webfaction.com/xmlrpc-api/apps.html for a list.}
		login_name: ${4:# The webfaction account to use}
		port_open: ${5:no}
		machine: ${6:# The machine name to use (optional for accounts with only one machine)}
		state: ${7:#present|absent}
		autostart: ${8:no}
		extra_info: ${9:# Any extra parameters required by the app}
$0
endsnippet

snippet webfaction_db "Add or remove a database on Webfaction"
- name:
	webfaction_db:
		name: ${1:# The name of the database}
		login_password: ${2:# The webfaction password to use}
		type: ${3:mysql|postgresql}
		login_name: ${4:# The webfaction account to use}
		machine: ${5:# The machine name to use (optional for accounts with only one machine)}
		state: ${6:#present|absent}
		password: ${7:# The password for the new database user.}
$0
endsnippet

snippet webfaction_domain "Add or remove domains and subdomains on Webfaction"
- name:
	webfaction_domain:
		login_name: ${1:# The webfaction account to use}
		name: ${2:# The name of the domain}
		login_password: ${3:# The webfaction password to use}
		state: ${4:#present|absent}
		subdomains: ${5:# Any subdomains to create.}
$0
endsnippet

snippet webfaction_mailbox "Add or remove mailboxes on Webfaction"
- name:
	webfaction_mailbox:
		mailbox_password: ${1:# The password for the mailbox}
		login_name: ${2:# The webfaction account to use}
		mailbox_name: ${3:# The name of the mailbox}
		login_password: ${4:# The webfaction password to use}
		state: ${5:#present|absent}
$0
endsnippet

snippet webfaction_site "Add or remove a website on a Webfaction host"
- name:
	webfaction_site:
		name: ${1:# The name of the website}
		host: ${2:# The webfaction host on which the site should be created.}
		login_password: ${3:# The webfaction password to use}
		login_name: ${4:# The webfaction account to use}
		subdomains: ${5:# A list of subdomains associated with this site.}
		state: ${6:#present|absent}
		https: ${7:True|False}
		site_apps: ${8:# A mapping of URLs to apps}
$0
endsnippet

snippet consul "Add, modify & delete services within a consul cluster."
- name:
	consul:
		state: ${1:present|absent}
		service_address: ${2:# the address to advertise that the service will be listening on. This value will be passed as the I(Address) parameter to Consul's U(/v1/agent/service/register) API method, so refer to the Consul API documentation for further details.}
		http: ${3:# checks can be registered with an http endpoint. This means that consul will check that the http endpoint returns a successful http status. Interval must also be provided with this option.}
		tags: ${4:# a list of tags that will be attached to the service registration.}
		check_name: ${5:# a name for the service check, defaults to the check id. required if standalone, ignored if part of service definition.}
		service_name: ${6:# Unique name for the service on a node, must be unique per node, required if registering a service. May be omitted if registering a node level check}
		host: ${7:localhost}
		ttl: ${8:# checks can be registered with a ttl instead of a script and interval this means that the service will check in with the agent before the ttl expires. If it doesn't the check will be considered failed. Required if registering a check and the script an interval are missing Similar to the interval this is a number with a s or m suffix to signify the units of seconds or minutes e.g 15s or 1m. If no suffix is supplied, m will be used by default e.g. 1 will be 1m}
		port: ${9:8500}
		script: ${10:# the script/command that will be run periodically to check the health of the service. Scripts require an interval and vise versa}
		check_id: ${11:# an ID for the service check, defaults to the check name, ignored if part of a service definition.}
		service_port: ${12:# the port on which the service is listening required for registration of a service, i.e. if service_name or service_id is set}
		notes: ${13:# Notes to attach to check when registering it.}
		interval: ${14:# the interval at which the service check will be run. This is a number with a s or m suffix to signify the units of seconds or minutes e.g 15s or 1m. If no suffix is supplied, m will be used by default e.g. 1 will be 1m. Required if the script param is specified.}
		token: ${15:# the token key indentifying an ACL rule set. May be required to register services.}
		timeout: ${16:# A custom HTTP check timeout. The consul default is 10 seconds. Similar to the interval this is a number with a s or m suffix to signify the units of seconds or minutes, e.g. 15s or 1m.}
		service_id: ${17:service_name if supplied}
		scheme: ${18:http}
		validate_certs: ${19:yes}
$0
endsnippet

snippet consul_acl "manipulate consul acl keys and rules"
- name:
	consul_acl:
		name: ${1:# the name that should be associated with the acl key, this is opaque to Consul}
		rules: ${2:# an list of the rules that should be associated with a given token.}
		state: ${3:#present|absent}
		token_type: ${4:#client|management}
		token: ${5:# the token key indentifying an ACL rule set. If generated by consul this will be a UUID.}
		mgmt_token: ${6:# a management token is required to manipulate the acl lists}
		host: ${7:localhost}
		scheme: ${8:http}
		validate_certs: ${9:yes}
		port: ${10:8500}
$0
endsnippet

snippet consul_kv "Manipulate entries in the key/value store of a consul cluster."
- name:
	consul_kv:
		value: ${1:# the value should be associated with the given key, required if state is present}
		key: ${2:# the key at which the value should be stored.}
		cas: ${3:# used when acquiring a lock with a session. If the cas is 0, then Consul will only put the key if it does not already exist. If the cas value is non-zero, then the key is only set if the index matches the ModifyIndex of that key.}
		recurse: ${4:no}
		token: ${5:# the token key indentifying an ACL rule set that controls access to the key value pair}
		state: ${6:#present|absent|acquire|release}
		session: ${7:# the session that should be used to acquire or release a lock associated with a key/value pair}
		flags: ${8:# opaque integer value that can be passed when setting a value.}
		host: ${9:localhost}
		scheme: ${10:http}
		validate_certs: ${11:yes}
		port: ${12:8500}
$0
endsnippet

snippet consul_session "manipulate consul sessions"
- name:
	consul_session:
		node: ${1:# the name of the node that with which the session will be associated. by default this is the name of the agent.}
		datacenter: ${2:# name of the datacenter in which the session exists or should be created.}
		name: ${3:# the name that should be associated with the session. This is opaque to Consul and not required.}
		state: ${4:#present|absent|info|node|list}
		checks: ${5:# a list of checks that will be used to verify the session health. If all the checks fail, the session will be invalidated and any locks associated with the session will be release and can be acquired once the associated lock delay has expired.}
		delay: ${6:15}
		host: ${7:localhost}
		behavior: ${8:release}
		scheme: ${9:http}
		validate_certs: ${10:yes}
		port: ${11:8500}
$0
endsnippet

snippet kubernetes "Manage Kubernetes resources."
- name:
	kubernetes:
		inline_data: ${1:# The Kubernetes YAML data to send to the API I(endpoint). This option is mutually exclusive with C('file_reference').}
		api_endpoint: ${2:# The IPv4 API endpoint of the Kubernetes cluster.}
		state: ${3:#present|absent|update|replace}
		url_password: ${4:# The HTTP Basic Auth password for the API I(endpoint). This should be set unless using the C('insecure') option.}
		certificate_authority_data: ${5:# Certificate Authority data for Kubernetes server. Should be in either standard PEM format or base64 encoded PEM data. Note that certificate verification is broken until ansible supports a version of 'match_hostname' that can match the IP address against the CA data.}
		insecure: ${6:# Reverts the connection to using HTTP instead of HTTPS. This option should only be used when execuing the M('kubernetes') module local to the Kubernetes cluster using the insecure local port (locahost:8080 by default).}
		file_reference: ${7:# Specify full path to a Kubernets YAML file to send to API I(endpoint). This option is mutually exclusive with C('inline_data').}
		url_username: ${8:admin}
		validate_certs: ${9:no}
$0
endsnippet

snippet pacemaker_cluster "Manage a pacemaker cluster"
- name:
	pacemaker_cluster:
		state: ${1:online|offline|restart|cleanup}
		node: ${2:# Specify which node of the cluster you want to manage. None == the cluster status itself, 'all' == check the status of all nodes.}
		force: ${3:yes}
		timeout: ${4:300}
$0
endsnippet

snippet znode "Create, delete, retrieve, and update znodes using ZooKeeper"
- name:
	znode:
		hosts: ${1:# A list of ZooKeeper servers (format '[server]:[port]').}
		name: ${2:# The path of the znode.}
		state: ${3:# The state to enforce. Mutually exclusive with op.}
		timeout: ${4:300}
		op: ${5:# An operation to perform. Mutually exclusive with state.}
		value: ${6:# The value assigned to the znode.}
		recursive: ${7:no}
$0
endsnippet

snippet command "Executes a command on a remote node"
- name:
	command:
		${1:free_form=# the command module takes a free form command to run.  There is no parameter actually named 'free form'. See the examples!}
		warn: ${2:yes}
		creates: ${3:# a filename or (since 2.0) glob pattern, when it already exists, this step will B(not) be run.}
		executable: ${4:# change the shell used to execute the command. Should be an absolute path to the executable.}
		chdir: ${5:# cd into this directory before running the command}
		removes: ${6:# a filename or (since 2.0) glob pattern, when it does not exist, this step will B(not) be run.}
$0
endsnippet

snippet expect "Executes a command and responds to prompts"
- name:
	expect:
		command: ${1:# the command module takes command to run.}
		responses: ${2:# Mapping of expected string/regex and string to respond with. If the response is a list, successive matches return successive responses. List functionality is new in 2.1.}
		creates: ${3:# a filename, when it already exists, this step will B(not) be run.}
		chdir: ${4:# cd into this directory before running the command}
		timeout: ${5:30}
		removes: ${6:# a filename, when it does not exist, this step will B(not) be run.}
		echo: ${7:no}
$0
endsnippet

snippet raw "Executes a low-down and dirty SSH command"
- name:
	raw:
		${1:free_form=# the raw module takes a free form command to run. There is no parameter actually named 'free form'; see the examples!}
		executable: ${2:# change the shell used to execute the command. Should be an absolute path to the executable.}
$0
endsnippet

snippet script "Runs a local script on a remote node after transferring it"
- name:
	script:
		${1:free_form=# path to the local script file followed by optional arguments. There is no parameter actually named 'free form'; see the examples!}
		creates: ${2:# a filename, when it already exists, this step will B(not) be run.}
		removes: ${3:# a filename, when it does not exist, this step will B(not) be run.}
$0
endsnippet

snippet shell "Execute commands in nodes."
- name:
	shell:
		${1:free_form=# The shell module takes a free form command to run, as a string.  There's not an actual option named "free form".  See the examples!}
		warn: ${2:yes}
		creates: ${3:# a filename, when it already exists, this step will B(not) be run.}
		executable: ${4:# change the shell used to execute the command. Should be an absolute path to the executable.}
		chdir: ${5:# cd into this directory before running the command}
		removes: ${6:# a filename, when it does not exist, this step will B(not) be run.}
$0
endsnippet

snippet openssl_privatekey "Generate OpenSSL private keys."
- name:
	openssl_privatekey:
		path: ${1:# Name of the file in which the generated TLS/SSL private key will be written. It will have 0600 mode.}
		state: ${2:#present|absent}
		size: ${3:4096}
		force: ${4:True|#False}
		type: ${5:#RSA|DSA}
$0
endsnippet

snippet openssl_publickey "Generate an OpenSSL public key from its private key."
- name:
	openssl_publickey:
		path: ${1:# Name of the file in which the generated TLS/SSL public key will be written.}
		privatekey_path: ${2:# Path to the TLS/SSL private key from which to genereate the public key.}
		state: ${3:#present|absent}
		force: ${4:True|#False}
$0
endsnippet

snippet influxdb_database "Manage InfluxDB databases"
- name:
	influxdb_database:
		database_name: ${1:# Name of the database that will be created/destroyed}
		hostname: ${2:# The hostname or IP address on which InfluxDB server is listening}
		username: ${3:root}
		state: ${4:#present|absent}
		password: ${5:root}
		port: ${6:8086}
$0
endsnippet

snippet influxdb_retention_policy "Manage InfluxDB retention policies"
- name:
	influxdb_retention_policy:
		default: ${1:# Sets the retention policy as default retention policy}
		database_name: ${2:# Name of the database where retention policy will be created}
		hostname: ${3:# The hostname or IP address on which InfluxDB server is listening}
		policy_name: ${4:# Name of the retention policy}
		replication: ${5:# Determines how many independent copies of each point are stored in the cluster}
		duration: ${6:# Determines how long InfluxDB should keep the data}
		username: ${7:root}
		password: ${8:root}
		port: ${9:8086}
$0
endsnippet

snippet elasticsearch_plugin "Manage Elasticsearch plugins"
- name:
	elasticsearch_plugin:
		name: ${1:# Name of the plugin to install. In ES 2.x, the name can be an url or file location}
		proxy_host: ${2:# Proxy host to use during plugin installation}
		url: ${3:# Set exact URL to download the plugin from (Only works for ES 1.x)}
		proxy_port: ${4:# Proxy port to use during plugin installation}
		state: ${5:#present|absent}
		version: ${6:# Version of the plugin to be installed. If plugin exists with previous version, it will NOT be updated}
		timeout: ${7:1m}
		plugin_dir: ${8:/usr/share/elasticsearch/plugins/}
		plugin_bin: ${9:/usr/share/elasticsearch/bin/plugin}
$0
endsnippet

snippet kibana_plugin "Manage Kibana plugins"
- name:
	kibana_plugin:
		name: ${1:# Name of the plugin to install}
		force: ${2:yes|no}
		url: ${3:# Set exact URL to download the plugin from. For local file, prefix its absolute path with file://}
		state: ${4:#present|absent}
		version: ${5:# Version of the plugin to be installed. If plugin exists with previous version, it will NOT be updated if C(force) is not set to yes}
		timeout: ${6:1m}
		plugin_dir: ${7:/opt/kibana/installedPlugins/}
		plugin_bin: ${8:/opt/kibana/bin/kibana}
$0
endsnippet

snippet redis "Various redis commands, slave and flush"
- name:
	redis:
		command: ${1:slave|flush|config}
		login_port: ${2:6379}
		name: ${3:# A redis config key.}
		flush_mode: ${4:#all|db}
		master_host: ${5:# The host of the master instance [slave command]}
		login_host: ${6:localhost}
		master_port: ${7:# The port of the master instance [slave command]}
		db: ${8:# The database to flush (used in db mode) [flush command]}
		value: ${9:# A redis config value.}
		login_password: ${10:# The password used to authenticate with (usually not used)}
		slave_mode: ${11:master|#slave}
$0
endsnippet

snippet riak "This module handles some common Riak operations"
- name:
	riak:
		target_node: ${1:riak@127.0.0.1}
		config_dir: ${2:/etc/riak}
		wait_for_service: ${3:kv}
		http_conn: ${4:127.0.0.1:8098}
		wait_for_ring: ${5:# Number of seconds to wait for all nodes to agree on the ring.}
		wait_for_handoffs: ${6:# Number of seconds to wait for handoffs to complete.}
		command: ${7:ping|kv_test|join|plan|commit}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet mongodb_parameter "Change an administrative parameter on a MongoDB server."
- name:
	mongodb_parameter:
		database: ${1:# The name of the database to add/remove the user from}
		param: ${2:# MongoDB administrative parameter to modify}
		value: ${3:# MongoDB administrative parameter value to set}
		login_port: ${4:27017}
		login_user: ${5:# The username used to authenticate with}
		login_host: ${6:localhost}
		login_database: ${7:# The database where login credentials are stored}
		ssl: ${8:no}
		param_type: ${9:str}
		login_password: ${10:# The password used to authenticate with}
		replica_set: ${11:# Replica set to connect to (automatically connects to primary for writes)}
$0
endsnippet

snippet mongodb_user "Adds or removes a user from a MongoDB database."
- name:
	mongodb_user:
		name: ${1:# The name of the user to add or remove}
		database: ${2:# The name of the database to add/remove the user from}
		login_port: ${3:27017}
		update_password: ${4:#always|on_create}
		roles: ${5:readWrite}
		login_user: ${6:# The username used to authenticate with}
		login_host: ${7:localhost}
		login_database: ${8:# The database where login credentials are stored}
		ssl_cert_reqs: ${9:#CERT_REQUIRED|CERT_OPTIONAL|CERT_NONE}
		ssl: ${10:no}
		state: ${11:#present|absent}
		login_password: ${12:# The password used to authenticate with}
		password: ${13:# The password to use for the user}
		replica_set: ${14:# Replica set to connect to (automatically connects to primary for writes)}
$0
endsnippet

snippet mssql_db "Add or remove MSSQL databases from a remote host."
- name:
	mssql_db:
		name: ${1:# name of the database to add or remove}
		autocommit: ${2:false|true}
		login_port: ${3:1433}
		login_user: ${4:# The username used to authenticate with}
		login_host: ${5:# Host running the database}
		state: ${6:#present|absent|import}
		login_password: ${7:# The password used to authenticate with}
		target: ${8:# Location, on the remote host, of the dump file to read from or write to. Uncompressed SQL files (C(.sql)) files are supported.}
$0
endsnippet

snippet mysql_db "Add or remove MySQL databases from a remote host."
- name:
	mysql_db:
		name: ${1:# name of the database to add or remove}
		ssl_key: ${2:# The path to the client private key.}
		config_file: ${3:~/.my.cnf}
		encoding: ${4:# Encoding mode to use, examples include C(utf8) or C(latin1_swedish_ci)}
		login_user: ${5:# The username used to authenticate with.}
		login_host: ${6:localhost}
		login_unix_socket: ${7:# The path to a Unix domain socket for local connections.}
		login_password: ${8:# The password used to authenticate with.}
		collation: ${9:# Collation mode (sorting). This only applies to new table/databases and does not update existing ones, this is a limitation of MySQL.}
		ssl_ca: ${10:# The path to a Certificate Authority (CA) certificate. This option, if used, must specify the same certificate as used by the server.}
		single_transaction: ${11:no}
		login_port: ${12:3306}
		ssl_cert: ${13:# The path to a client public key certificate.}
		target: ${14:# Location, on the remote host, of the dump file to read from or write to. Uncompressed SQL files (C(.sql)) as well as bzip2 (C(.bz2)), gzip (C(.gz)) and xz (Added in 2.0) compressed files are supported.}
		state: ${15:#present|absent|dump|import}
		quick: ${16:yes}
		connect_timeout: ${17:30}
$0
endsnippet

snippet mysql_replication "Manage MySQL replication"
- name:
	mysql_replication:
		master_ssl_cert: ${1:# same as mysql variable}
		master_auto_position: ${2:# does the host uses GTID based replication or not}
		config_file: ${3:~/.my.cnf}
		master_password: ${4:# same as mysql variable}
		master_host: ${5:# same as mysql variable}
		login_host: ${6:localhost}
		login_password: ${7:# The password used to authenticate with.}
		master_ssl_capath: ${8:# same as mysql variable}
		master_ssl_ca: ${9:# same as mysql variable}
		login_unix_socket: ${10:# The path to a Unix domain socket for local connections.}
		master_connect_retry: ${11:# same as mysql variable}
		master_user: ${12:# same as mysql variable}
		master_port: ${13:# same as mysql variable}
		master_log_file: ${14:# same as mysql variable}
		master_ssl_cipher: ${15:# same as mysql variable}
		relay_log_file: ${16:# same as mysql variable}
		login_port: ${17:3306}
		ssl_cert: ${18:# The path to a client public key certificate.}
		master_ssl: ${19:0|1}
		ssl_key: ${20:# The path to the client private key.}
		ssl_ca: ${21:# The path to a Certificate Authority (CA) certificate. This option, if used, must specify the same certificate as used by the server.}
		master_ssl_key: ${22:# same as mysql variable}
		mode: ${23:#getslave|getmaster|changemaster|stopslave|startslave|resetslave|resetslaveall}
		login_user: ${24:# The username used to authenticate with.}
		master_log_pos: ${25:# same as mysql variable}
		connect_timeout: ${26:30}
		relay_log_pos: ${27:# same as mysql variable}
$0
endsnippet

snippet mysql_user "Adds or removes a user from a MySQL database."
- name:
	mysql_user:
		name: ${1:# name of the user (role) to add or remove}
		login_port: ${2:3306}
		update_password: ${3:#always|on_create}
		ssl_cert: ${4:# The path to a client public key certificate.}
		config_file: ${5:~/.my.cnf}
		ssl_key: ${6:# The path to the client private key.}
		encrypted: ${7:yes|#no}
		login_host: ${8:localhost}
		append_privs: ${9:yes|#no}
		sql_log_bin: ${10:#yes|no}
		host_all: ${11:yes|#no}
		ssl_ca: ${12:# The path to a Certificate Authority (CA) certificate. This option, if used, must specify the same certificate as used by the server.}
		login_password: ${13:# The password used to authenticate with.}
		login_unix_socket: ${14:# The path to a Unix domain socket for local connections.}
		state: ${15:#present|absent}
		login_user: ${16:# The username used to authenticate with.}
		host: ${17:localhost}
		check_implicit_admin: ${18:yes|#no}
		password: ${19:# set the user's password.}
		connect_timeout: ${20:30}
		priv: ${21:# MySQL privileges string in the format: C(db.table:priv1,priv2).}
$0
endsnippet

snippet mysql_variables "Manage MySQL global variables"
- name:
	mysql_variables:
		variable: ${1:# Variable name to operate}
		login_port: ${2:3306}
		ssl_cert: ${3:# The path to a client public key certificate.}
		config_file: ${4:~/.my.cnf}
		ssl_key: ${5:# The path to the client private key.}
		login_user: ${6:# The username used to authenticate with.}
		login_host: ${7:localhost}
		value: ${8:# If set, then sets variable value to this}
		ssl_ca: ${9:# The path to a Certificate Authority (CA) certificate. This option, if used, must specify the same certificate as used by the server.}
		login_unix_socket: ${10:# The path to a Unix domain socket for local connections.}
		login_password: ${11:# The password used to authenticate with.}
		connect_timeout: ${12:30}
$0
endsnippet

snippet postgresql_db "Add or remove PostgreSQL databases from a remote host."
- name:
	postgresql_db:
		name: ${1:# name of the database to add or remove}
		ssl_rootcert: ${2:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s).}
		ssl_mode: ${3:disable|allow|#prefer|require|verify-ca|verify-full}
		encoding: ${4:# Encoding of the database}
		login_user: ${5:postgres}
		lc_collate: ${6:# Collation order (LC_COLLATE) to use in the database. Must match collation order of template database unless C(template0) is used as template.}
		lc_ctype: ${7:# Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...) Must match LC_CTYPE of template database unless C(template0) is used as template.}
		port: ${8:5432}
		login_unix_socket: ${9:# Path to a Unix domain socket for local connections}
		state: ${10:#present|absent}
		template: ${11:# Template used to create the database}
		login_password: ${12:# The password used to authenticate with}
		owner: ${13:# Name of the role to set as owner of the database}
		login_host: ${14:# Host running the database}
$0
endsnippet

snippet postgresql_ext "Add or remove PostgreSQL extensions from a database."
- name:
	postgresql_ext:
		name: ${1:# name of the extension to add or remove}
		db: ${2:# name of the database to add or remove the extension to/from}
		state: ${3:#present|absent}
		login_password: ${4:# The password used to authenticate with}
		login_user: ${5:# The username used to authenticate with}
		login_host: ${6:localhost}
		port: ${7:5432}
$0
endsnippet

snippet postgresql_lang "Adds, removes or changes procedural languages with a PostgreSQL database."
- name:
	postgresql_lang:
		lang: ${1:# name of the procedural language to add, remove or change}
		force_trust: ${2:yes|no}
		login_user: ${3:postgres}
		login_host: ${4:localhost}
		db: ${5:# name of database where the language will be added, removed or changed}
		cascade: ${6:yes|no}
		state: ${7:#present|absent}
		login_password: ${8:# Password used to authenticate with PostgreSQL (must match C(login_user))}
		trust: ${9:yes|no}
		fail_on_drop: ${10:#yes|no}
		port: ${11:5432}
$0
endsnippet

snippet postgresql_privs "Grant or revoke privileges on PostgreSQL database objects."
- name:
	postgresql_privs:
		roles: ${1:# Comma separated list of role (user/group) names to set permissions for.}
		database: ${2:# Name of database to connect to.}
		objs: ${3:# Comma separated list of database objects to set privileges on.}
		ssl_rootcert: ${4:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s). If the file exists, the server's certificate will be verified to be signed by one of these authorities.}
		ssl_mode: ${5:disable|allow|#prefer|require|verify-ca|verify-full}
		privs: ${6:# Comma separated list of privileges to grant/revoke.}
		state: ${7:#present|absent}
		unix_socket: ${8:# Path to a Unix domain socket for local connections.}
		host: ${9:# Database host address. If unspecified, connect via Unix socket.}
		login: ${10:postgres}
		password: ${11:# The password to authenticate with.}
		type: ${12:#table|sequence|function|database|schema|language|tablespace|group}
		port: ${13:5432}
		grant_option: ${14:yes|no}
		schema: ${15:# Schema that contains the database objects specified via I(objs).}
$0
endsnippet

snippet postgresql_schema "Add or remove PostgreSQL schema from a remote host"
- name:
	postgresql_schema:
		name: ${1:# Name of the schema to add or remove.}
		database: ${2:postgres}
		login_user: ${3:# The username used to authenticate with.}
		login_host: ${4:localhost}
		login_unix_socket: ${5:# Path to a Unix domain socket for local connections.}
		state: ${6:#present|absent}
		login_password: ${7:# The password used to authenticate with.}
		owner: ${8:# Name of the role to set as owner of the schema.}
		port: ${9:5432}
$0
endsnippet

snippet postgresql_user "Adds or removes a users (roles) from a PostgreSQL database."
- name:
	postgresql_user:
		name: ${1:# name of the user (role) to add or remove}
		ssl_rootcert: ${2:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s). If the file exists, the server's certificate will be verified to be signed by one of these authorities.}
		ssl_mode: ${3:disable|allow|#prefer|require|verify-ca|verify-full}
		login_user: ${4:postgres}
		login_host: ${5:localhost}
		expires: ${6:# sets the user's password expiration.}
		db: ${7:# name of database where permissions will be granted}
		login_unix_socket: ${8:# Path to a Unix domain socket for local connections}
		login_password: ${9:# Password used to authenticate with PostgreSQL}
		password: ${10:# set the user's password, before 1.4 this was required.}
		port: ${11:5432}
		fail_on_user: ${12:#yes|no}
		priv: ${13:# PostgreSQL privileges string in the format: C(table:priv1,priv2)}
		no_password_changes: ${14:yes|#no}
		state: ${15:#present|absent}
		encrypted: ${16:no}
		role_attr_flags: ${17:[NO]SUPERUSER|[NO]CREATEROLE|[NO]CREATEUSER|[NO]CREATEDB|[NO]INHERIT|[NO]LOGIN|[NO]REPLICATION}
$0
endsnippet

snippet proxysql_backend_servers "Adds or removes mysql hosts from proxysql admin interface."
- name:
	proxysql_backend_servers:
		hostname: ${1:# The ip address at which the mysqld instance can be contacted.}
		status: ${2:ONLINE|OFFLINE_SOFT|OFFLINE_HARD}
		comment: ${3:}
		config_file: ${4:}
		weight: ${5:# The bigger the weight of a server relative to other weights, the higher the probability of the server being chosen from the hostgroup. If omitted the proxysql database default for I(weight) is 1.}
		login_user: ${6:# The username used to authenticate to ProxySQL admin interface.}
		login_host: ${7:127.0.0.1}
		save_to_disk: ${8:yes}
		load_to_runtime: ${9:yes}
		login_password: ${10:# The password used to authenticate to ProxySQL admin interface.}
		use_ssl: ${11:# If I(use_ssl) is set to C(True), connections to this server will be made using SSL connections. If omitted the proxysql database default for I(use_ssl) is C(False).}
		port: ${12:3306}
		max_connections: ${13:# The maximum number of connections ProxySQL will open to this backend server. If omitted the proxysql database default for I(max_connections) is 1000.}
		login_port: ${14:6032}
		compression: ${15:# If the value of I(compression) is greater than 0, new connections to that server will use compression. If omitted the proxysql database default for I(compression) is 0.}
		hostgroup_id: ${16:0}
		state: ${17:#present|absent}
		max_latency_ms: ${18:# Ping time is monitored regularly. If a host has a ping time greater than I(max_latency_ms) it is excluded from the connection pool (although the server stays ONLINE). If omitted the proxysql database default for I(max_latency_ms) is 0.}
		max_replication_lag: ${19:# If greater than 0, ProxySQL will reguarly monitor replication lag. If replication lag goes above I(max_replication_lag), proxysql will temporarily shun the server until replication catches up. If omitted the proxysql database default for I(max_replication_lag) is 0.}
$0
endsnippet

snippet proxysql_global_variables "Gets or sets the proxysql global variables."
- name:
	proxysql_global_variables:
		variable: ${1:# Defines which variable should be returned, or if I(value) is specified which variable should be updated.}
		login_port: ${2:6032}
		config_file: ${3:}
		login_user: ${4:# The username used to authenticate to ProxySQL admin interface.}
		login_host: ${5:127.0.0.1}
		login_password: ${6:# The password used to authenticate to ProxySQL admin interface.}
		value: ${7:# Defines a value the variable specified using I(variable) should be set to.}
		load_to_runtime: ${8:yes}
		save_to_disk: ${9:yes}
$0
endsnippet

snippet proxysql_manage_config "Writes the proxysql configuration settings between layers."
- name:
	proxysql_manage_config:
		direction: ${1:FROM|TO}
		config_settings: ${2:MYSQL USERS|MYSQL SERVERS|MYSQL QUERY RULES|MYSQL VARIABLES|ADMIN VARIABLES|SCHEDULER}
		action: ${3:LOAD|SAVE}
		config_layer: ${4:MEMORY|DISK|RUNTIME|CONFIG}
		login_port: ${5:6032}
		config_file: ${6:}
		login_user: ${7:# The username used to authenticate to ProxySQL admin interface.}
		login_host: ${8:127.0.0.1}
		login_password: ${9:# The password used to authenticate to ProxySQL admin interface.}
$0
endsnippet

snippet proxysql_mysql_users "Adds or removes mysql users from proxysql admin interface."
- name:
	proxysql_mysql_users:
		username: ${1:# Name of the user connecting to the mysqld or ProxySQL instance.}
		default_hostgroup: ${2:# If there is no matching rule for the queries sent by this user, the traffic it generates is sent to the specified hostgroup. If omitted the proxysql database default for I(use_ssl) is 0.}
		frontend: ${3:yes}
		default_schema: ${4:# The schema to which the connection should change to by default.}
		login_user: ${5:# The username used to authenticate to ProxySQL admin interface.}
		login_host: ${6:127.0.0.1}
		save_to_disk: ${7:yes}
		fast_forward: ${8:# If I(fast_forward) is set to C(True), I(fast_forward) will bypass the query processing layer (rewriting, caching) and pass through the query directly as is to the backend server. If omitted the proxysql database default for I(fast_forward) is C(False).}
		load_to_runtime: ${9:yes}
		login_password: ${10:# The password used to authenticate to ProxySQL admin interface.}
		active: ${11:# A user with I(active) set to C(False) will be tracked in the database, but will be never loaded in the in-memory data structures. If omitted the proxysql database default for I(active) is C(True).}
		config_file: ${12:}
		password: ${13:# Password of the user connecting to the mysqld or ProxySQL instance.}
		max_connections: ${14:# The maximum number of connections ProxySQL will open to the backend for this user. If omitted the proxysql database default for I(max_connections) is 10000.}
		login_port: ${15:6032}
		transaction_persistent: ${16:# If this is set for the user with which the MySQL client is connecting to ProxySQL (thus a "frontend" user), transactions started within a hostgroup will remain within that hostgroup regardless of any other rules. If omitted the proxysql database default for I(transaction_persistent) is C(False).}
		state: ${17:#present|absent}
		use_ssl: ${18:# If I(use_ssl) is set to C(True), connections by this user will be made using SSL connections. If omitted the proxysql database default for I(use_ssl) is C(False).}
		backend: ${19:yes}
$0
endsnippet

snippet proxysql_query_rules "Modifies query rules using the proxysql admin interface."
- name:
	proxysql_query_rules:
		comment: ${1:# Free form text field, usable for a descriptive comment of the query rule.}
		flagOUT: ${2:# Used in combination with I(flagIN) and apply to create chains of rules. When set, I(flagOUT) signifies the I(flagIN) to be used in the next chain of rules.}
		login_user: ${3:# The username used to authenticate to ProxySQL admin interface.}
		save_to_disk: ${4:yes}
		match_pattern: ${5:# Regular expression that matches the query text. The dialect of regular expressions used is that of re2 - https://github.com/google/re2}
		mirror_flagOUT: ${6:# Enables query mirroring. If set I(mirror_flagOUT) can be used to evaluates the mirrored query against the specified chain of rules.}
		apply: ${7:# Used in combination with I(flagIN) and I(flagOUT) to create chains of rules. Setting apply to True signifies the last rule to be applied.}
		schemaname: ${8:# Filtering criteria matching schemaname. If I(schemaname) is non-NULL, a query will match only if the connection uses schemaname as its default schema.}
		replace_pattern: ${9:# This is the pattern with which to replace the matched pattern. Note that this is optional, and when omitted, the query processor will only cache, route, or set other parameters without rewriting.}
		digest: ${10:# Match queries with a specific digest, as returned by stats_mysql_query_digest.digest.}
		match_digest: ${11:# Regular expression that matches the query digest. The dialect of regular expressions used is that of re2 - https://github.com/google/re2}
		mirror_hostgroup: ${12:# Enables query mirroring. If set I(mirror_hostgroup) can be used to mirror queries to the same or different hostgroup.}
		log: ${13:# Query will be logged.}
		delay: ${14:# Number of milliseconds to delay the execution of the query. This is essentially a throttling mechanism and QoS, and allows a way to give priority to queries over others. This value is added to the mysql-default_query_delay global variable that applies to all queries.}
		state: ${15:#present|absent}
		proxy_addr: ${16:# Match incoming traffic on a specific local IP.}
		username: ${17:# Filtering criteria matching username.  If I(username) is non-NULL, a query will match only if the connection is made with the correct username.}
		config_file: ${18:}
		retries: ${19:# The maximum number of times a query needs to be re-executed in case of detected failure during the execution of the query. If retries is not specified, the global variable mysql-query_retries_on_failure applies.}
		login_host: ${20:127.0.0.1}
		destination_hostgroup: ${21:# Route matched queries to this hostgroup. This happens unless there is a started transaction and the logged in user has I(transaction_persistent) set to C(True) (see M(proxysql_mysql_users)).}
		proxy_port: ${22:# Match incoming traffic on a specific local port.}
		load_to_runtime: ${23:yes}
		login_password: ${24:# The password used to authenticate to ProxySQL admin interface.}
		active: ${25:# A rule with I(active) set to C(False) will be tracked in the database, but will be never loaded in the in-memory data structures.}
		cache_ttl: ${26:# The number of milliseconds for which to cache the result of the query. Note in ProxySQL 1.1 I(cache_ttl) was in seconds.}
		error_msg: ${27:# Query will be blocked, and the specified error_msg will be returned to the client.}
		login_port: ${28:6032}
		negate_match_pattern: ${29:# If I(negate_match_pattern) is set to C(True), only queries not matching the query text will be considered as a match. This acts as a NOT operator in front of the regular expression matching against match_pattern.}
		flagIN: ${30:# Used in combination with I(flagOUT) and I(apply) to create chains of rules.}
		client_addr: ${31:# Match traffic from a specific source.}
		timeout: ${32:# The maximum timeout in milliseconds with which the matched or rewritten query should be executed. If a query run for longer than the specific threshold, the query is automatically killed. If timeout is not specified, the global variable mysql-default_query_timeout applies.}
		force_delete: ${33:no}
		rule_id: ${34:# The unique id of the rule. Rules are processed in rule_id order.}
$0
endsnippet

snippet proxysql_replication_hostgroups "Manages replication hostgroups using the proxysql admin interface."
- name:
	proxysql_replication_hostgroups:
		reader_hostgroup: ${1:# Id of the reader hostgroup.}
		writer_hostgroup: ${2:# Id of the writer hostgroup.}
		comment: ${3:# Text field that can be used for any purposed defined by the user.}
		login_port: ${4:6032}
		config_file: ${5:}
		login_user: ${6:# The username used to authenticate to ProxySQL admin interface.}
		login_host: ${7:127.0.0.1}
		save_to_disk: ${8:yes}
		state: ${9:#present|absent}
		load_to_runtime: ${10:yes}
		login_password: ${11:# The password used to authenticate to ProxySQL admin interface.}
$0
endsnippet

snippet proxysql_scheduler "Adds or removes schedules from proxysql admin interface."
- name:
	proxysql_scheduler:
		filename: ${1:# Full path of the executable to be executed.}
		comment: ${2:# Text field that can be used for any purposed defined by the user.}
		config_file: ${3:}
		login_user: ${4:# The username used to authenticate to ProxySQL admin interface.}
		arg2: ${5:# Argument that can be passed to the job.}
		arg3: ${6:# Argument that can be passed to the job.}
		arg4: ${7:# Argument that can be passed to the job.}
		arg5: ${8:# Argument that can be passed to the job.}
		interval_ms: ${9:10000}
		load_to_runtime: ${10:yes}
		login_password: ${11:# The password used to authenticate to ProxySQL admin interface.}
		active: ${12:yes}
		login_port: ${13:6032}
		force_delete: ${14:no}
		save_to_disk: ${15:yes}
		state: ${16:#present|absent}
		arg1: ${17:# Argument that can be passed to the job.}
		login_host: ${18:127.0.0.1}
$0
endsnippet

snippet vertica_configuration "Updates Vertica configuration parameters."
- name:
	vertica_configuration:
		name: ${1:# Name of the parameter to update.}
		value: ${2:# Value of the parameter to be set.}
		cluster: ${3:localhost}
		login_password: ${4:# The password used to authenticate with.}
		login_user: ${5:dbadmin}
		db: ${6:# Name of the Vertica database.}
		port: ${7:5433}
$0
endsnippet

snippet vertica_facts "Gathers Vertica database facts."
- name:
	vertica_facts:
		login_user: ${1:dbadmin}
		cluster: ${2:localhost}
		db: ${3:# Name of the database running the schema.}
		port: ${4:5433}
		login_password: ${5:# The password used to authenticate with.}
$0
endsnippet

snippet vertica_role "Adds or removes Vertica database roles and assigns roles to them."
- name:
	vertica_role:
		name: ${1:# Name of the role to add or remove.}
		assigned_roles: ${2:# Comma separated list of roles to assign to the role.}
		login_user: ${3:dbadmin}
		db: ${4:# Name of the Vertica database.}
		cluster: ${5:localhost}
		state: ${6:#present|absent}
		login_password: ${7:# The password used to authenticate with.}
		port: ${8:5433}
$0
endsnippet

snippet vertica_schema "Adds or removes Vertica database schema and roles."
- name:
	vertica_schema:
		name: ${1:# Name of the schema to add or remove.}
		create_roles: ${2:# Comma separated list of roles to create and grant usage and create access to the schema.}
		login_user: ${3:dbadmin}
		db: ${4:# Name of the Vertica database.}
		usage_roles: ${5:# Comma separated list of roles to create and grant usage access to the schema.}
		cluster: ${6:localhost}
		state: ${7:#present|absent}
		login_password: ${8:# The password used to authenticate with.}
		owner: ${9:# Name of the user to set as owner of the schema.}
		port: ${10:5433}
$0
endsnippet

snippet vertica_user "Adds or removes Vertica database users and assigns roles."
- name:
	vertica_user:
		name: ${1:# Name of the user to add or remove.}
		profile: ${2:# Sets the user's profile.}
		resource_pool: ${3:# Sets the user's resource pool.}
		roles: ${4:# Comma separated list of roles to assign to the user.}
		login_user: ${5:dbadmin}
		ldap: ${6:# Set to true if users are authenticated via LDAP.}
		db: ${7:# Name of the Vertica database.}
		cluster: ${8:localhost}
		state: ${9:#present|absent|locked}
		login_password: ${10:# The password used to authenticate with.}
		password: ${11:# The user's password encrypted by the MD5 algorithm.}
		expired: ${12:# Sets the user's password expiration.}
		port: ${13:5433}
$0
endsnippet

snippet acl "Sets and retrieves file ACL information."
- name:
	acl:
		path: ${1:# The full path of the file or object.}
		recursive: ${2:yes|no}
		default: ${3:yes|no}
		entity: ${4:# actual user or group that the ACL applies to when matching entity types user or group are selected.}
		state: ${5:#query|present|absent}
		follow: ${6:yes|no}
		etype: ${7:user|group|mask|other}
		entry: ${8:# DEPRECATED. The acl to set or remove.  This must always be quoted in the form of '<etype>:<qualifier>:<perms>'.  The qualifier may be empty for some types, but the type and perms are always required. '-' can be used as placeholder when you do not care about permissions. This is now superseded by entity, type and permissions fields.}
		permissions: ${9:# Permissions to apply/remove can be any combination of r, w and  x (read, write and execute respectively)}
$0
endsnippet

snippet archive "Creates a compressed archive of one or more files or trees."
- name:
	archive:
		path: ${1:# Remote absolute path, glob, or list of paths or globs for the file or files to compress or archive.}
		group: ${2:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		format: ${3:#gz|bz2|zip}
		dest: ${4:# The file name of the destination archive. This is required when C(path) refers to multiple files by either specifying a glob, a directory or multiple paths in a list.}
		selevel: ${5:s0}
		seuser: ${6:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		setype: ${7:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
		remove: ${8:no}
		unsafe_writes: ${9:no}
		serole: ${10:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		mode: ${11:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		attributes: ${12:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		owner: ${13:# Name of the user that should own the file/directory, as would be fed to I(chown).}
$0
endsnippet

snippet assemble "Assembles a configuration file from fragments"
- name:
	assemble:
		src: ${1:# An already existing directory full of source files.}
		dest: ${2:# A file to create using the concatenation of all of the source files.}
		ignore_hidden: ${3:no}
		group: ${4:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		remote_src: ${5:#True|False}
		selevel: ${6:s0}
		seuser: ${7:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		serole: ${8:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		unsafe_writes: ${9:no}
		delimiter: ${10:# A delimiter to separate the file contents.}
		mode: ${11:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		attributes: ${12:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		owner: ${13:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		regexp: ${14:# Assemble files only if C(regex) matches the filename. If not set, all files are assembled. All "\" (backslash) must be escaped as "\\" to comply yaml syntax. Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html).}
		validate: ${15:# The validation command to run before copying into place.  The path to the file to validate is passed in via '%s' which must be present as in the sshd example below. The command is passed securely so shell features like expansion and pipes won't work.}
		backup: ${16:yes|#no}
		setype: ${17:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
$0
endsnippet

snippet blockinfile "Insert/update/remove a text block surrounded by marker lines."
- name:
	blockinfile:
		path: ${1:# The file to modify.}
		group: ${2:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		insertbefore: ${3:BOF|*regex*}
		unsafe_writes: ${4:no}
		selevel: ${5:s0}
		create: ${6:yes|#no}
		seuser: ${7:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		serole: ${8:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		owner: ${9:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		marker: ${10:# {mark} ANSIBLE MANAGED BLOCK}
		state: ${11:#present|absent}
		mode: ${12:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		insertafter: ${13:#EOF|*regex*}
		follow: ${14:yes|#no}
		validate: ${15:# The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work.}
		attributes: ${16:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		backup: ${17:yes|#no}
		block: ${18:}
		setype: ${19:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
$0
endsnippet

snippet copy "Copies files to remote locations."
- name:
	copy:
		dest: ${1:# Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too.}
		src: ${2:# Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.}
		directory_mode: ${3:# When doing a recursive copy set the mode for the directories. If this is not set we will use the system defaults. The mode is only set on directories which are newly created, and will not affect those that already existed.}
		force: ${4:#yes|no}
		remote_src: ${5:True|#False}
		selevel: ${6:s0}
		seuser: ${7:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		setype: ${8:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
		group: ${9:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		content: ${10:# When used instead of 'src', sets the contents of a file directly to the specified value. This is for simple values, for anything complex or with formatting please switch to the template module.}
		unsafe_writes: ${11:no}
		serole: ${12:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		mode: ${13:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		attributes: ${14:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		owner: ${15:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		follow: ${16:yes|#no}
		validate: ${17:# The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work.}
		backup: ${18:yes|#no}
$0
endsnippet

snippet fetch "Fetches a file from remote nodes"
- name:
	fetch:
		dest: ${1:# A directory to save the file into. For example, if the I(dest) directory is C(/backup) a I(src) file named C(/etc/profile) on host C(host.example.com), would be saved into C(/backup/host.example.com/etc/profile)}
		src: ${2:# The file on the remote system to fetch. This I(must) be a file, not a directory. Recursive fetching may be supported in a later release.}
		validate_checksum: ${3:#yes|no}
		fail_on_missing: ${4:yes|#no}
		flat: ${5:# Allows you to override the default behavior of appending hostname/path/to/file to the destination.  If dest ends with '/', it will use the basename of the source file, similar to the copy module. Obviously this is only handy if the filenames are unique.}
$0
endsnippet

snippet file "Sets attributes of files"
- name:
	file:
		path: ${1:[]}
		src: ${2:# path of the file to link to (applies only to C(state=link)). Will accept absolute, relative and nonexisting paths. Relative paths are not expanded.}
		force: ${3:yes|#no}
		unsafe_writes: ${4:no}
		selevel: ${5:s0}
		seuser: ${6:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		recurse: ${7:yes|#no}
		serole: ${8:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		group: ${9:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		state: ${10:#file|link|directory|hard|touch|absent}
		mode: ${11:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		follow: ${12:yes|#no}
		owner: ${13:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		attributes: ${14:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		setype: ${15:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
$0
endsnippet

snippet find "return a list of files based on specific criteria"
- name:
	find:
		paths: ${1:# List of paths of directories to search. All paths must be fully qualified.}
		file_type: ${2:#file|directory|link|any}
		age: ${3:# Select files whose age is equal to or greater than the specified time. Use a negative age to find files equal to or less than the specified time. You can choose seconds, minutes, hours, days, or weeks by specifying the first letter of any of those words (e.g., "1w").}
		contains: ${4:# One or more regex patterns which should be matched against the file content}
		recurse: ${5:yes|#no}
		age_stamp: ${6:atime|#mtime|ctime}
		patterns: ${7:*}
		get_checksum: ${8:True|False}
		use_regex: ${9:True|False}
		follow: ${10:True|False}
		hidden: ${11:True|False}
		size: ${12:# Select files whose size is equal to or greater than the specified size. Use a negative size to find files equal to or less than the specified size. Unqualified values are in bytes, but b, k, m, g, and t can be appended to specify bytes, kilobytes, megabytes, gigabytes, and terabytes, respectively. Size is not evaluated for directories.}
$0
endsnippet

snippet ini_file "Tweak settings in INI files"
- name:
	ini_file:
		section: ${1:# Section name in INI file. This is added if C(state=present) automatically when a single value is being set.}
		path: ${2:# Path to the INI-style file; this file is created if required.}
		seuser: ${3:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		group: ${4:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		option: ${5:# If set (required for changing a I(value)), this is the name of the option.}
		unsafe_writes: ${6:no}
		selevel: ${7:s0}
		no_extra_spaces: ${8:no}
		serole: ${9:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		value: ${10:# The string value to be associated with an I(option). May be omitted when removing an I(option).}
		state: ${11:#present|absent}
		mode: ${12:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		others: ${13:# All arguments accepted by the M(file) module also work here}
		owner: ${14:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		attributes: ${15:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		backup: ${16:yes|#no}
		create: ${17:#yes|no}
		setype: ${18:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
$0
endsnippet

snippet iso_extract "Extract files from an ISO image."
- name:
	iso_extract:
		dest: ${1:# The destination directory to extract files to.}
		files: ${2:# A list of files to extract from the image.}
		image: ${3:# The ISO image to extract files from.}
$0
endsnippet

snippet lineinfile "Ensure a particular line is in a file, or replace an existing line using a back-referenced regular expression."
- name:
	lineinfile:
		path: ${1:# The file to modify.}
		validate: ${2:# The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work.}
		group: ${3:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		insertbefore: ${4:BOF|*regex*}
		unsafe_writes: ${5:no}
		selevel: ${6:s0}
		create: ${7:yes|#no}
		seuser: ${8:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		serole: ${9:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		backrefs: ${10:yes|#no}
		owner: ${11:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		state: ${12:#present|absent}
		mode: ${13:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		others: ${14:# All arguments accepted by the M(file) module also work here.}
		insertafter: ${15:#EOF|*regex*}
		regexp: ${16:# The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found; only the last line found will be replaced. For C(state=absent), the pattern of the line to remove.  Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html).}
		attributes: ${17:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		backup: ${18:yes|#no}
		line: ${19:# Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches.}
		setype: ${20:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
$0
endsnippet

snippet patch "Apply patch files using the GNU patch tool."
- name:
	patch:
		src: ${1:# Path of the patch file as accepted by the GNU patch tool. If C(remote_src) is 'no', the patch source file is looked up from the module's "files" directory.}
		strip: ${2:0}
		remote_src: ${3:yes|#no}
		dest: ${4:# Path of the file on the remote machine to be patched.}
		binary: ${5:no}
		basedir: ${6:# Path of a base directory in which the patch file will be applied. May be omitted when C(dest) option is specified, otherwise required.}
		backup: ${7:yes|#no}
$0
endsnippet

snippet replace "Replace all instances of a particular string in a file using a back-referenced regular expression."
- name:
	replace:
		regexp: ${1:# The regular expression to look for in the contents of the file. Uses Python regular expressions; see U(http://docs.python.org/2/library/re.html). Uses multiline mode, which means C(^) and C($) match the beginning and end respectively of I(each line) of the file.}
		path: ${2:# The file to modify.}
		group: ${3:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		unsafe_writes: ${4:no}
		selevel: ${5:s0}
		seuser: ${6:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		setype: ${7:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
		replace: ${8:# The string to replace regexp matches. May contain backreferences that will get expanded with the regexp capture groups if the regexp matches. If not set, matches are removed entirely.}
		serole: ${9:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		mode: ${10:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		others: ${11:# All arguments accepted by the M(file) module also work here.}
		owner: ${12:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		follow: ${13:yes|#no}
		attributes: ${14:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		backup: ${15:yes|#no}
		validate: ${16:# The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work.}
$0
endsnippet

snippet stat "retrieve file or file system status"
- name:
	stat:
		path: ${1:# The full path of the file/object to get the facts of}
		get_checksum: ${2:yes}
		follow: ${3:no}
		checksum_algorithm: ${4:#sha1|sha224|sha256|sha384|sha512}
		get_mime: ${5:#True|False}
		get_md5: ${6:yes}
		get_attributes: ${7:yes}
$0
endsnippet

snippet synchronize "A wrapper around rsync to make common tasks in your playbooks quick and easy."
- name:
	synchronize:
		src: ${1:# Path on the source host that will be synchronized to the destination; The path can be absolute or relative.}
		dest: ${2:# Path on the destination host that will be synchronized from the source; The path can be absolute or relative.}
		dirs: ${3:yes|#no}
		partial: ${4:no}
		links: ${5:yes|no}
		copy_links: ${6:yes|#no}
		perms: ${7:yes|no}
		compress: ${8:#yes|no}
		rsync_timeout: ${9:0}
		rsync_opts: ${10:# Specify additional rsync options by passing in an array.}
		owner: ${11:yes|no}
		set_remote_user: ${12:yes}
		times: ${13:yes|no}
		rsync_path: ${14:# Specify the rsync command to run on the remote host. See C(--rsync-path) on the rsync man page.}
		dest_port: ${15:Value of ansible_ssh_port for this host, remote_port config setting, or the value from ssh client configuration if none of those are set}
		group: ${16:yes|no}
		existing_only: ${17:yes|#no}
		recursive: ${18:yes|no}
		archive: ${19:#yes|no}
		mode: ${20:#push|pull}
		checksum: ${21:yes|#no}
		verify_host: ${22:no}
		use_ssh_args: ${23:yes|#no}
		delete: ${24:yes|#no}
$0
endsnippet

snippet tempfile "Creates temporary files and directories."
- name:
	tempfile:
		path: ${1:# Location where temporary file or directory should be created. If path is not specified default system temporary directory will be used.}
		state: ${2:#file|directory}
		prefix: ${3:ansible.}
		suffix: ${4:}
$0
endsnippet

snippet template "Templates a file out to a remote server."
- name:
	template:
		src: ${1:# Path of a Jinja2 formatted template on the Ansible controller. This can be a relative or absolute path.}
		dest: ${2:# Location to render the template to on the remote machine.}
		force: ${3:#yes|no}
		selevel: ${4:s0}
		seuser: ${5:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		setype: ${6:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
		unsafe_writes: ${7:no}
		serole: ${8:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		mode: ${9:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		attributes: ${10:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		owner: ${11:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		group: ${12:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		validate: ${13:# The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the example below. The command is passed securely so shell features like expansion and pipes won't work.}
		backup: ${14:yes|#no}
$0
endsnippet

snippet unarchive "Unpacks an archive after (optionally) copying it from the local machine."
- name:
	unarchive:
		src: ${1:# If remote_src=no (default), local path to archive file to copy to the target server; can be absolute or relative. If remote_src=yes, path on the target server to existing archive file to unpack.}
		dest: ${2:# Remote absolute path where the archive should be unpacked}
		seuser: ${3:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		group: ${4:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		remote_src: ${5:yes|#no}
		selevel: ${6:s0}
		list_files: ${7:yes|#no}
		keep_newer: ${8:no}
		setype: ${9:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
		creates: ${10:# a filename, when it already exists, this step will B(not) be run.}
		unsafe_writes: ${11:no}
		serole: ${12:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		mode: ${13:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		exclude: ${14:[]}
		owner: ${15:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		extra_opts: ${16:# Specify additional options by passing in an array.}
		copy: ${17:#yes|no}
		validate_certs: ${18:#yes|no}
		attributes: ${19:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
$0
endsnippet

snippet xattr "set/retrieve extended attributes"
- name:
	xattr:
		path: ${1:# The full path of the file/object to get the facts of.}
		state: ${2:read|present|all|keys|absent}
		key: ${3:# The name of a specific Extended attribute key to set/retrieve}
		value: ${4:# The value to set the named name/key to, it automatically sets the C(state) to 'set'}
		follow: ${5:yes|no}
$0
endsnippet

snippet ipa_group "Manage FreeIPA group"
- name:
	ipa_group:
		cn: ${1:# Canonical name.}
		ipa_pass: ${2:# P}
		ipa_port: ${3:443}
		group: ${4:# List of group names assigned to this group.}
		external: ${5:# Allow adding external non-IPA members from trusted domains.}
		ipa_prot: ${6:http|#https}
		gidnumber: ${7:# GID (use this option to set it manually).}
		state: ${8:#present|absent}
		ipa_host: ${9:ipa.example.com}
		ipa_user: ${10:admin}
		validate_certs: ${11:yes}
		nonposix: ${12:# Create as a non-POSIX group.}
		user: ${13:# List of user names assigned to this group.}
$0
endsnippet

snippet ipa_hbacrule "Manage FreeIPA HBAC rule"
- name:
	ipa_hbacrule:
		cn: ${1:# Canonical name.}
		ipa_pass: ${2:# P}
		sourcehostcategory: ${3:all}
		ipa_port: ${4:443}
		hostcategory: ${5:all}
		ipa_host: ${6:ipa.example.com}
		usergroup: ${7:# List of user group names to assign.}
		description: ${8:# D}
		servicecategory: ${9:all}
		service: ${10:# List of service names to assign.}
		user: ${11:# List of user names to assign.}
		ipa_prot: ${12:http|#https}
		host: ${13:# List of host names to assign.}
		hostgroup: ${14:# List of hostgroup names to assign.}
		usercategory: ${15:all}
		state: ${16:#present|absent|enabled|disabled}
		ipa_user: ${17:admin}
		servicegroup: ${18:# List of service group names to assign.}
		validate_certs: ${19:yes}
		sourcehostgroup: ${20:# List of source host group names to assign.}
		sourcehost: ${21:# List of source host names to assign.}
$0
endsnippet

snippet ipa_host "Manage FreeIPA host"
- name:
	ipa_host:
		fqdn: ${1:# Full qualified domain name.}
		ipa_pass: ${2:# P}
		force: ${3:# Force host name even if not in DNS.}
		description: ${4:# A description of this host.}
		ns_os_version: ${5:# Host operating system and version (e.g. "Fedora 9")}
		ipa_host: ${6:ipa.example.com}
		ip_address: ${7:# Add the host to DNS with this IP address.}
		ns_hardware_platform: ${8:# Host hardware platform (e.g. "Lenovo T61")}
		ns_host_location: ${9:# Host location (e.g. "Lab 2")}
		ipa_port: ${10:443}
		user_certificate: ${11:# List of Base-64 encoded server certificates.}
		ipa_prot: ${12:http|#https}
		state: ${13:#present|absent|disabled}
		ipa_user: ${14:admin}
		mac_address: ${15:# List of Hardware MAC address(es) off this host.}
		validate_certs: ${16:yes}
$0
endsnippet

snippet ipa_hostgroup "Manage FreeIPA host-group"
- name:
	ipa_hostgroup:
		cn: ${1:# Name of host-group.}
		ipa_pass: ${2:# P}
		ipa_port: ${3:443}
		ipa_prot: ${4:http|#https}
		host: ${5:# List of hosts that belong to the host-group.}
		hostgroup: ${6:# List of host-groups than belong to that host-group.}
		state: ${7:#present|absent}
		ipa_host: ${8:ipa.example.com}
		ipa_user: ${9:admin}
		validate_certs: ${10:yes}
		description: ${11:# Description}
$0
endsnippet

snippet ipa_role "Manage FreeIPA role"
- name:
	ipa_role:
		cn: ${1:# Role name.}
		ipa_pass: ${2:# P}
		ipa_port: ${3:443}
		group: ${4:# List of group names assign to this role.}
		service: ${5:# List of service names to assign.}
		description: ${6:# A description of this role-group.}
		ipa_prot: ${7:http|#https}
		host: ${8:# List of host names to assign.}
		hostgroup: ${9:# List of host group names to assign.}
		state: ${10:#present|absent}
		ipa_host: ${11:ipa.example.com}
		ipa_user: ${12:admin}
		validate_certs: ${13:yes}
		user: ${14:# List of user names to assign.}
$0
endsnippet

snippet ipa_sudocmd "Manage FreeIPA sudo command"
- name:
	ipa_sudocmd:
		ipa_pass: ${1:# P}
		sudocmd: ${2:# Sudo Command.}
		ipa_port: ${3:443}
		description: ${4:# A description of this command.}
		ipa_prot: ${5:http|#https}
		state: ${6:#present|absent}
		ipa_host: ${7:ipa.example.com}
		ipa_user: ${8:admin}
		validate_certs: ${9:yes}
$0
endsnippet

snippet ipa_sudocmdgroup "Manage FreeIPA sudo command group"
- name:
	ipa_sudocmdgroup:
		cn: ${1:# Sudo Command Group.}
		ipa_pass: ${2:# P}
		ipa_port: ${3:443}
		ipa_prot: ${4:http|#https}
		state: ${5:#present|absent}
		ipa_host: ${6:ipa.example.com}
		ipa_user: ${7:admin}
		sudocmd: ${8:# List of sudo commands to assign to the group.}
		validate_certs: ${9:yes}
		description: ${10:# Group description.}
$0
endsnippet

snippet ipa_sudorule "Manage FreeIPA sudo rule"
- name:
	ipa_sudorule:
		cn: ${1:# Canonical name.}
		ipa_pass: ${2:# P}
		hostcategory: ${3:all}
		user: ${4:# List of users assigned to the rule.}
		usergroup: ${5:# List of user groups assigned to the rule.}
		cmdcategory: ${6:all}
		ipa_port: ${7:443}
		cmd: ${8:# List of commands assigned to the rule.}
		ipa_prot: ${9:http|#https}
		host: ${10:# List of hosts assigned to the rule.}
		hostgroup: ${11:# List of host groups assigned to the rule.}
		usercategory: ${12:all}
		state: ${13:#present|absent|enabled|disabled}
		ipa_user: ${14:admin}
		validate_certs: ${15:yes}
		ipa_host: ${16:ipa.example.com}
$0
endsnippet

snippet ipa_user "Manage FreeIPA users"
- name:
	ipa_user:
		uid: ${1:# u}
		ipa_pass: ${2:# P}
		telephonenumber: ${3:# List of telephone numbers assigned to the user.}
		sshpubkey: ${4:# List of public SSH key.}
		displayname: ${5:# D}
		ipa_host: ${6:ipa.example.com}
		givenname: ${7:# F}
		ipa_port: ${8:443}
		password: ${9:# Password}
		title: ${10:# T}
		loginshell: ${11:# L}
		ipa_prot: ${12:http|#https}
		state: ${13:#present|absent|enabled|disabled}
		sn: ${14:# S}
		ipa_user: ${15:admin}
		mail: ${16:# List of mail addresses assigned to the user.}
		validate_certs: ${17:yes}
$0
endsnippet

snippet opendj_backendprop "Will update the backend configuration of OpenDJ via the dsconfig set-backend-prop command."
- name:
	opendj_backendprop:
		name: ${1:# The configuration setting to update.}
		hostname: ${2:# The hostname of the OpenDJ server.}
		value: ${3:# The value for the configuration item.}
		port: ${4:# The Admin port on which the OpenDJ instance is available.}
		backend: ${5:# The name of the backend on which the property needs to be updated.}
		username: ${6:cn=Directory Manager}
		state: ${7:present}
		passwordfile: ${8:# Location to the password file which holds the password for the cn=Directory Manager user.}
		password: ${9:# The password for the cn=Directory Manager user.}
		opendj_bindir: ${10:/opt/opendj/bin}
$0
endsnippet

snippet add_host "add a host (and alternatively a group) to the ansible-playbook in-memory inventory"
- name:
	add_host:
		name: ${1:# The hostname/ip of the host to add to the inventory, can include a colon and a port number.}
		groups: ${2:# The groups to add the hostname to, comma separated.}
$0
endsnippet

snippet group_by "Create Ansible groups based on facts"
- name:
	group_by:
		key: ${1:# The variables whose values will be used as groups}
$0
endsnippet

snippet rabbitmq_binding "This module manages rabbitMQ bindings"
- name:
	rabbitmq_binding:
		name: ${1:# source exchange to create binding on}
		destination: ${2:# destination exchange or queue for the binding}
		destination_type: ${3:queue|exchange}
		login_port: ${4:15672}
		login_user: ${5:guest}
		login_host: ${6:localhost}
		routing_key: ${7:#}
		vhost: ${8:/}
		state: ${9:#present|absent}
		arguments: ${10:{}}
		login_password: ${11:no}
$0
endsnippet

snippet rabbitmq_exchange "This module manages rabbitMQ exchanges"
- name:
	rabbitmq_exchange:
		name: ${1:# Name of the exchange to create}
		login_port: ${2:15672}
		login_user: ${3:guest}
		login_host: ${4:localhost}
		durable: ${5:yes|no}
		exchange_type: ${6:fanout|#direct|headers|topic}
		vhost: ${7:/}
		state: ${8:#present|absent}
		internal: ${9:yes|no}
		arguments: ${10:{}}
		login_password: ${11:no}
		auto_delete: ${12:yes|no}
$0
endsnippet

snippet rabbitmq_parameter "Adds or removes parameters to RabbitMQ"
- name:
	rabbitmq_parameter:
		name: ${1:# Name of the parameter being set}
		component: ${2:# Name of the component of which the parameter is being set}
		node: ${3:rabbit}
		vhost: ${4:/}
		state: ${5:#present|absent}
		value: ${6:# Value of the parameter, as a JSON term}
$0
endsnippet

snippet rabbitmq_plugin "Adds or removes plugins to RabbitMQ"
- name:
	rabbitmq_plugin:
		names: ${1:# Comma-separated list of plugin names}
		state: ${2:#enabled|disabled}
		new_only: ${3:yes|#no}
		prefix: ${4:# Specify a custom install prefix to a Rabbit}
$0
endsnippet

snippet rabbitmq_policy "Manage the state of policies in RabbitMQ."
- name:
	rabbitmq_policy:
		name: ${1:# The name of the policy to manage.}
		tags: ${2:# A dict or string describing the policy.}
		pattern: ${3:# A regex of queues to apply the policy to.}
		node: ${4:rabbit}
		priority: ${5:0}
		vhost: ${6:/}
		state: ${7:#present|absent}
		apply_to: ${8:#all|exchanges|queues}
$0
endsnippet

snippet rabbitmq_queue "This module manages rabbitMQ queues"
- name:
	rabbitmq_queue:
		name: ${1:# Name of the queue to create}
		login_port: ${2:15672}
		dead_letter_exchange: ${3:# Optional name of an exchange to which messages will be republished if they}
		durable: ${4:yes|no}
		login_user: ${5:guest}
		login_host: ${6:localhost}
		login_password: ${7:no}
		vhost: ${8:/}
		state: ${9:#present|absent}
		max_length: ${10:no limit}
		arguments: ${11:{}}
		message_ttl: ${12:forever}
		auto_expires: ${13:forever}
		dead_letter_routing_key: ${14:# Optional replacement routing key to use when a message is dead-lettered.}
		auto_delete: ${15:yes|no}
$0
endsnippet

snippet rabbitmq_user "Adds or removes users to RabbitMQ"
- name:
	rabbitmq_user:
		user: ${1:# Name of user to add}
		node: ${2:rabbit}
		force: ${3:yes|#no}
		tags: ${4:# User tags specified as comma delimited}
		read_priv: ${5:^$}
		write_priv: ${6:^$}
		state: ${7:#present|absent}
		configure_priv: ${8:^$}
		vhost: ${9:/}
		password: ${10:# Password of user to add.}
		permissions: ${11:[]}
$0
endsnippet

snippet rabbitmq_vhost "Manage the state of a virtual host in RabbitMQ"
- name:
	rabbitmq_vhost:
		name: ${1:# The name of the vhost to manage}
		node: ${2:rabbit}
		tracing: ${3:yes|#no}
		state: ${4:#present|absent}
$0
endsnippet

snippet airbrake_deployment "Notify airbrake about app deployments"
- name:
	airbrake_deployment:
		environment: ${1:# The airbrake environment name, typically 'production', 'staging', etc.}
		token: ${2:# API token.}
		repo: ${3:# URL of the project repository}
		user: ${4:# The username of the person doing the deployment}
		url: ${5:https://airbrake.io/deploys.txt}
		validate_certs: ${6:#yes|no}
		revision: ${7:# A hash, number, tag, or other identifier showing what revision was deployed}
$0
endsnippet

snippet bigpanda "Notify BigPanda about deployments"
- name:
	bigpanda:
		component: ${1:# The name of the component being deployed. Ex: billing}
		token: ${2:# API token.}
		state: ${3:started|finished|failed}
		version: ${4:# The deployment version.}
		description: ${5:# Free text description of the deployment.}
		url: ${6:https://api.bigpanda.io}
		hosts: ${7:machine's hostname}
		env: ${8:# The environment name, typically 'production', 'staging', etc.}
		owner: ${9:# The person responsible for the deployment.}
		validate_certs: ${10:#yes|no}
$0
endsnippet

snippet boundary_meter "Manage boundary meters"
- name:
	boundary_meter:
		apikey: ${1:# Organizations boundary API KEY}
		apiid: ${2:# Organizations boundary API ID}
		name: ${3:# meter name}
		state: ${4:present|absent}
		validate_certs: ${5:#yes|no}
$0
endsnippet

snippet circonus_annotation "create an annotation in circonus"
- name:
	circonus_annotation:
		category: ${1:# Annotation Category}
		description: ${2:# Description of annotation}
		title: ${3:# Title of annotation}
		api_key: ${4:# Circonus API key}
		start: ${5:# Unix timestamp of event start, defaults to now}
		duration: ${6:# Duration in seconds of annotation, defaults to 0}
		stop: ${7:# Unix timestamp of event end, defaults to now + duration}
$0
endsnippet

snippet datadog_event "Posts events to DataDog  service"
- name:
	datadog_event:
		title: ${1:# The event title.}
		text: ${2:# The body of the event.}
		app_key: ${3:# Your DataDog app key.}
		api_key: ${4:# Your DataDog API key.}
		date_happened: ${5:now}
		alert_type: ${6:error|warning|#info|success}
		tags: ${7:# Comma separated list of tags to apply to the event.}
		priority: ${8:#normal|low}
		aggregation_key: ${9:# An arbitrary string to use for aggregation.}
		validate_certs: ${10:#yes|no}
$0
endsnippet

snippet datadog_monitor "Manages Datadog monitors"
- name:
	datadog_monitor:
		app_key: ${1:# Your DataDog app key.}
		name: ${2:# The name of the alert.}
		state: ${3:present|absent|muted|unmuted}
		api_key: ${4:# Your DataDog API key.}
		notify_audit: ${5:no}
		timeout_h: ${6:# The number of hours of the monitor not reporting data before it will automatically resolve from a triggered state.}
		tags: ${7:# A list of tags to associate with your monitor when creating or updating. This can help you categorize and filter monitors.}
		thresholds: ${8:{u'warning': 1, u'ok': 1, u'critical': 1}}
		query: ${9:# The monitor query to notify on with syntax varying depending on what type of monitor you are creating.}
		message: ${10:# A message to include with notifications for this monitor. Email notifications can be sent to specific users by using the same '@username' notation as events. Monitor message template variables can be accessed by using double square brackets, i.e '[[' and ']]'.}
		id: ${11:# The id of the alert. If set, will be used instead of the name to locate the alert.}
		locked: ${12:no}
		no_data_timeframe: ${13:2x timeframe for metric, 2 minutes for service}
		silenced: ${14:}
		require_full_window: ${15:# A boolean indicating whether this monitor needs a full window of data before it's evaluated. We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.}
		notify_no_data: ${16:no}
		renotify_interval: ${17:# The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.}
		escalation_message: ${18:# A message to include with a re-notification. Supports the '@username' notification we allow elsewhere. Not applicable if renotify_interval is None}
		type: ${19:metric alert|service check|event alert}
$0
endsnippet

snippet honeybadger_deployment "Notify Honeybadger.io about app deployments"
- name:
	honeybadger_deployment:
		environment: ${1:# The environment name, typically 'production', 'staging', etc.}
		token: ${2:# API token.}
		repo: ${3:# URL of the project repository}
		user: ${4:# The username of the person doing the deployment}
		url: ${5:https://api.honeybadger.io/v1/deploys}
		validate_certs: ${6:#yes|no}
		revision: ${7:# A hash, number, tag, or other identifier showing what revision was deployed}
$0
endsnippet

snippet icinga2_feature "Manage Icinga2 feature"
- name:
	icinga2_feature:
		name: ${1:# This is the feature name to enable or disable.}
		state: ${2:#present|absent}
$0
endsnippet

snippet librato_annotation "create an annotation in librato"
- name:
	librato_annotation:
		links: ${1:# See examples}
		title: ${2:# The title of an annotation is a string and may contain spaces}
		api_key: ${3:# Librato account api key}
		user: ${4:# Librato account username}
		description: ${5:# The description contains extra meta-data about a particular annotation}
		start_time: ${6:# The unix timestamp indicating the the time at which the event referenced by this annotation started}
		name: ${7:# The annotation stream name}
		source: ${8:# A string which describes the originating source of an annotation when that annotation is tracked across multiple members of a population}
		end_time: ${9:# The unix timestamp indicating the the time at which the event referenced by this annotation ended}
$0
endsnippet

snippet logentries "Module for tracking logs via logentries.com"
- name:
	logentries:
		path: ${1:# path to a log file}
		state: ${2:#present|absent}
		name: ${3:# name of the log}
		logtype: ${4:# type of the log}
$0
endsnippet

snippet logicmonitor "Manage your LogicMonitor account through Ansible Playbooks"
- name:
	logicmonitor:
		company: ${1:# The LogicMonitor account company name. If you would log in to your account at "superheroes.logicmonitor.com" you would use "superheroes."}
		user: ${2:# A LogicMonitor user name. The module will authenticate and perform actions on behalf of this user.}
		password: ${3:# The password of the specified LogicMonitor user}
		target: ${4:collector|host|datsource|hostgroup}
		action: ${5:add|remove|update|sdt}
		displayname: ${6:hostname -f}
		description: ${7:}
		groups: ${8:[]}
		duration: ${9:30}
		collector: ${10:# The fully qualified domain name of a collector in your LogicMonitor account.}
		id: ${11:# ID of the datasource to target.}
		alertenable: ${12:#True|False}
		hostname: ${13:hostname -f}
		properties: ${14:{}}
		starttime: ${15:Now}
		fullpath: ${16:# The fullpath of the host group object you would like to manage.}
$0
endsnippet

snippet logicmonitor_facts "Collect facts about LogicMonitor objects"
- name:
	logicmonitor_facts:
		target: ${1:host|hostgroup}
		company: ${2:# The LogicMonitor account company name. If you would log in to your account at "superheroes.logicmonitor.com" you would use "superheroes".}
		user: ${3:# A LogicMonitor user name. The module will authenticate and perform actions on behalf of this user.}
		password: ${4:# The password for the chosen LogicMonitor User.}
		displayname: ${5:hostname -f}
		hostname: ${6:hostname -f}
		fullpath: ${7:# The fullpath of the hostgroup object you would like to manage.}
		collector: ${8:# The fully qualified domain name of a collector in your LogicMonitor account.}
$0
endsnippet

snippet logstash_plugin "Manage Logstash plugins"
- name:
	logstash_plugin:
		name: ${1:# Install plugin with that name.}
		proxy_port: ${2:# Proxy port to use during plugin installation.}
		state: ${3:#present|absent}
		version: ${4:# Specify plugin Version of the plugin to install. If plugin exists with previous version, it will NOT be updated.}
		proxy_host: ${5:# Proxy host to use during plugin installation.}
		plugin_bin: ${6:/usr/share/logstash/bin/logstash-plugin}
$0
endsnippet

snippet monit "Manage the state of a program monitored via Monit"
- name:
	monit:
		state: ${1:present|started|stopped|restarted|monitored|unmonitored|reloaded}
		name: ${2:# The name of the I(monit) program/process to manage}
		timeout: ${3:300}
$0
endsnippet

snippet nagios "Perform common tasks in Nagios related to downtime and notifications."
- name:
	nagios:
		action: ${1:downtime|delete_downtime|enable_alerts|disable_alerts|silence|unsilence|silence_nagios|unsilence_nagios|command|servicegroup_service_downtime|servicegroup_host_downtime}
		command: ${2:# The raw command to send to nagios, which should not include the submitted time header or the line-feed B(Required) option when using the C(command) action.}
		services: ${3:# What to manage downtime/alerts for. Separate multiple services with commas. C(service) is an alias for C(services). B(Required) option when using the C(downtime), C(enable_alerts), and C(disable_alerts) actions.}
		comment: ${4:Scheduling downtime}
		servicegroup: ${5:# The Servicegroup we want to set downtimes/alerts for. B(Required) option when using the C(servicegroup_service_downtime) amd C(servicegroup_host_downtime).}
		author: ${6:Ansible}
		host: ${7:# Host to operate on in Nagios.}
		minutes: ${8:30}
		cmdfile: ${9:auto-detected}
$0
endsnippet

snippet newrelic_deployment "Notify newrelic about app deployments"
- name:
	newrelic_deployment:
		token: ${1:# API token, to place in the x-api-key header.}
		application_id: ${2:# (one of app_name or application_id are required) The application id, found in the URL when viewing the application in RPM}
		description: ${3:# Text annotation for the deployment - notes for you}
		changelog: ${4:# A list of changes for this deployment}
		appname: ${5:# Name of the application}
		environment: ${6:# The environment for this deployment}
		user: ${7:# The name of the user/process that triggered this deployment}
		revision: ${8:# A revision number (e.g., git commit SHA)}
		validate_certs: ${9:#yes|no}
		app_name: ${10:# (one of app_name or application_id are required) The value of app_name in the newrelic.yml file used by the application}
$0
endsnippet

snippet pagerduty "Create PagerDuty maintenance windows"
- name:
	pagerduty:
		name: ${1:}
		passwd: ${2:}
		state: ${3:running|started|ongoing|absent}
		token: ${4:}
		user: ${5:}
		requester_id: ${6:}
		service: ${7:}
		minutes: ${8:}
		hours: ${9:}
		validate_certs: ${10:#yes|no}
		desc: ${11:}
$0
endsnippet

snippet pagerduty_alert "Trigger, acknowledge or resolve PagerDuty incidents"
- name:
	pagerduty_alert:
		name: ${1:# PagerDuty unique subdomain.}
		state: ${2:triggered|acknowledged|resolved}
		service_key: ${3:# The GUID of one of your "Generic API" services.}
		api_key: ${4:# The pagerduty API key (readonly access), generated on the pagerduty site.}
		client_url: ${5:# The URL of the monitoring client that is triggering this event.}
		incident_key: ${6:# Identifies the incident to which this I(state) should be applied.}
		client: ${7:# The name of the monitoring client that is triggering this event.}
		desc: ${8:Created via Ansible}
$0
endsnippet

snippet pingdom "Pause/unpause Pingdom alerts"
- name:
	pingdom:
		checkid: ${1:}
		passwd: ${2:}
		state: ${3:running|paused}
		uid: ${4:}
		key: ${5:}
$0
endsnippet

snippet rollbar_deployment "Notify Rollbar about app deployments"
- name:
	rollbar_deployment:
		environment: ${1:# Name of the environment being deployed, e.g. 'production'.}
		token: ${2:# Your project access token.}
		revision: ${3:# Revision number/sha being deployed.}
		comment: ${4:# Deploy comment (e.g. what is being deployed).}
		rollbar_user: ${5:# Rollbar username of the user who deployed.}
		url: ${6:https://api.rollbar.com/api/1/deploy/}
		user: ${7:# User who deployed.}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet sensu_check "Manage Sensu checks"
- name:
	sensu_check:
		name: ${1:# The name of the check}
		command: ${2:# Path to the sensu check to run (not required when I(state=absent))}
		interval: ${3:# Check interval in seconds}
		handle: ${4:yes|no}
		subscribers: ${5:[]}
		metric: ${6:yes|no}
		subdue_begin: ${7:# When to disable handling of check failures}
		dependencies: ${8:[]}
		occurrences: ${9:1}
		low_flap_threshold: ${10:# The low threshhold for flap detection}
		aggregate: ${11:yes|no}
		path: ${12:/etc/sensu/conf.d/checks.json}
		standalone: ${13:yes|no}
		backup: ${14:yes|no}
		handlers: ${15:[]}
		publish: ${16:yes|no}
		custom: ${17:{}}
		source: ${18:# The check source, used to create a JIT Sensu client for an external resource (e.g. a network switch).}
		state: ${19:#present|absent}
		high_flap_threshold: ${20:# The high threshhold for flap detection}
		timeout: ${21:10}
		subdue_end: ${22:# When to enable handling of check failures}
		refresh: ${23:# Number of seconds handlers should wait before taking second action}
$0
endsnippet

snippet sensu_subscription "Manage Sensu subscriptions"
- name:
	sensu_subscription:
		name: ${1:# The name of the channel}
		path: ${2:/etc/sensu/conf.d/subscriptions.json}
		state: ${3:#present|absent}
		backup: ${4:yes|no}
$0
endsnippet

snippet stackdriver "Send code deploy and annotation events to stackdriver"
- name:
	stackdriver:
		key: ${1:# API key.}
		repository: ${2:# The repository (or project) deployed}
		level: ${3:#INFO|WARN|ERROR}
		annotated_by: ${4:Ansible}
		deployed_to: ${5:# The environment code was deployed to. (ie: development, staging, production)}
		deployed_by: ${6:Ansible}
		instance_id: ${7:# id of an EC2 instance that this event should be attached to, which will limit the contexts where this event is shown}
		msg: ${8:# The contents of the annotation message, in plain text.  Limited to 256 characters. Required for annotation.}
		event_epoch: ${9:# Unix timestamp of where the event should appear in the timeline, defaults to now. Be careful with this.}
		revision_id: ${10:# The revision of the code that was deployed. Required for deploy events}
		event: ${11:annotation|deploy}
$0
endsnippet

snippet statusio_maintenance "Create maintenance windows for your status.io dashboard"
- name:
	statusio_maintenance:
		api_id: ${1:# Your unique API ID from status.io}
		statuspage: ${2:# Your unique StatusPage ID from status.io}
		api_key: ${3:# Your unique API Key from status.io}
		maintenance_notify_72_hr: ${4:no}
		maintenance_notify_now: ${5:no}
		start_time: ${6:# Time maintenance is expected to start (Hour:Minutes) (UTC)}
		automation: ${7:no}
		maintenance_notify_24_hr: ${8:no}
		all_infrastructure_affected: ${9:no}
		maintenance_id: ${10:# The maintenance id number when deleting a maintenance window}
		desc: ${11:Created by Ansible}
		maintenance_notify_1_hr: ${12:no}
		title: ${13:A new maintenance window}
		url: ${14:https://api.status.io}
		state: ${15:#present|absent}
		components: ${16:# The given name of your component (server name)}
		minutes: ${17:10}
		start_date: ${18:# Date maintenance is expected to start (Month/Day/Year) (UTC)}
		containers: ${19:# The given name of your container (data center)}
$0
endsnippet

snippet uptimerobot "Pause and start Uptime Robot monitoring"
- name:
	uptimerobot:
		monitorid: ${1:}
		state: ${2:started|paused}
		apikey: ${3:}
$0
endsnippet

snippet zabbix_group "Zabbix host groups creates/deletes"
- name:
	zabbix_group:
		login_user: ${1:# Zabbix user name.}
		server_url: ${2:# Url of Zabbix server, with protocol (http or https). C(url) is an alias for C(server_url).}
		host_groups: ${3:# List of host groups to create or delete.}
		login_password: ${4:# Zabbix user password.}
		http_login_password: ${5:# Basic Auth password}
		timeout: ${6:10}
		http_login_user: ${7:# Basic Auth login}
		state: ${8:#present|absent}
$0
endsnippet

snippet zabbix_host "Zabbix host creates/updates/deletes"
- name:
	zabbix_host:
		login_user: ${1:# Zabbix user name, used to authenticate against the server.}
		server_url: ${2:# Url of Zabbix server, with protocol (http or https).}
		login_password: ${3:# Zabbix user password.}
		host_name: ${4:# Name of the host in Zabbix.}
		status: ${5:#enabled|disabled}
		inventory_mode: ${6:automatic|manual|disabled}
		interfaces: ${7:[]}
		proxy: ${8:# The name of the Zabbix Proxy to be used}
		host_groups: ${9:# List of host groups the host is part of.}
		force: ${10:#yes|no}
		http_login_password: ${11:# Basic Auth password}
		http_login_user: ${12:# Basic Auth login}
		visible_name: ${13:# Visible name of the host in Zabbix.}
		state: ${14:#present|absent}
		timeout: ${15:10}
		link_templates: ${16:# List of templates linked to the host.}
$0
endsnippet

snippet zabbix_hostmacro "Zabbix host macro creates/updates/deletes"
- name:
	zabbix_hostmacro:
		macro_name: ${1:# Name of the host macro.}
		macro_value: ${2:# Value of the host macro.}
		login_user: ${3:# Zabbix user name.}
		server_url: ${4:# Url of Zabbix server, with protocol (http or https).}
		host_name: ${5:# Name of the host.}
		login_password: ${6:# Zabbix user password.}
		http_login_password: ${7:# Basic Auth password}
		http_login_user: ${8:# Basic Auth login}
		state: ${9:#present|absent}
		timeout: ${10:10}
$0
endsnippet

snippet zabbix_maintenance "Create Zabbix maintenance windows"
- name:
	zabbix_maintenance:
		name: ${1:# Unique name of maintenance window.}
		login_user: ${2:# Zabbix user name.}
		server_url: ${3:# Url of Zabbix server, with protocol (http or https). C(url) is an alias for C(server_url).}
		login_password: ${4:# Zabbix user password.}
		desc: ${5:Created by Ansible}
		http_login_password: ${6:# Basic Auth password}
		http_login_user: ${7:# Basic Auth login}
		host_names: ${8:# Hosts to manage maintenance window for. Separate multiple hosts with commas. C(host_name) is an alias for C(host_names). B(Required) option when C(state) is I(present) and no C(host_groups) specified.}
		host_groups: ${9:# Host groups to manage maintenance window for. Separate multiple groups with commas. C(host_group) is an alias for C(host_groups). B(Required) option when C(state) is I(present) and no C(host_names) specified.}
		state: ${10:#present|absent}
		timeout: ${11:10}
		collect_data: ${12:true}
		minutes: ${13:10}
$0
endsnippet

snippet zabbix_screen "Zabbix screen creates/updates/deletes"
- name:
	zabbix_screen:
		screens: ${1:# List of screens to be created/updated/deleted(see example).}
		login_password: ${2:# Zabbix user password.}
		login_user: ${3:# Zabbix user name.}
		server_url: ${4:# Url of Zabbix server, with protocol (http or https).}
		http_login_password: ${5:# Basic Auth password}
		timeout: ${6:10}
		http_login_user: ${7:# Basic Auth login}
$0
endsnippet

snippet cloudflare_dns "manage Cloudflare DNS records"
- name:
	cloudflare_dns:
		account_email: ${1:# Account email.}
		account_api_token: ${2:# Account API token. You can obtain your API key from the bottom of the Cloudflare 'My Account' page, found here: U(https://www.cloudflare.com/a/account)}
		zone: ${3:# The name of the Zone to work with (e.g. "example.com"). The Zone must already exist.}
		solo: ${4:# Whether the record should be the only one for that record type and record name. Only use with C(state=present)}
		weight: ${5:1}
		proxied: ${6:no}
		ttl: ${7:1 (automatic)}
		port: ${8:# S}
		service: ${9:# R}
		proto: ${10:tcp|udp}
		value: ${11:# The record value. Required for C(state=present)}
		priority: ${12:1}
		record: ${13:@}
		state: ${14:#present|absent}
		timeout: ${15:30}
		type: ${16:A|AAAA|CNAME|TXT|SRV|MX|NS|SPF}
$0
endsnippet

snippet dnsimple "Interface with dnsimple.com (a DNS hosting service)."
- name:
	dnsimple:
		solo: ${1:# Whether the record should be the only one for that record type and record name. Only use with state=present on a record}
		domain: ${2:# Domain to work with. Can be the domain name (e.g. "mydomain.com") or the numeric ID of the domain in DNSimple. If omitted, a list of domains will be returned.}
		account_email: ${3:# Account email. If omitted, the env variables DNSIMPLE_EMAIL and DNSIMPLE_API_TOKEN will be looked for. If those aren't found, a C(.dnsimple) file will be looked for, see: U(https://github.com/mikemaccana/dnsimple-python#getting-started)}
		record_ids: ${4:# List of records to ensure they either exist or don't exist}
		value: ${5:# Record value}
		priority: ${6:# Record priority}
		record: ${7:# Record to add, if blank a record for the domain will be created, supports the wildcard (*)}
		state: ${8:present|absent}
		ttl: ${9:3600 (one hour)}
		type: ${10:A|ALIAS|CNAME|MX|SPF|URL|TXT|NS|SRV|NAPTR|PTR|AAAA|SSHFP|HINFO|POOL}
		account_api_token: ${11:# Account API token. See I(account_email) for info.}
$0
endsnippet

snippet dnsmadeeasy "Interface with dnsmadeeasy.com (a DNS hosting service)."
- name:
	dnsmadeeasy:
		domain: ${1:# Domain to work with. Can be the domain name (e.g. "mydomain.com") or the numeric ID of the domain in DNS Made Easy (e.g. "839989") for faster resolution.}
		account_secret: ${2:# Account Secret Key.}
		account_key: ${3:# Account API Key.}
		state: ${4:present|absent}
		record_name: ${5:# Record name to get/create/delete/update. If record_name is not specified; all records for the domain will be returned in "result" regardless of the state argument.}
		record_ttl: ${6:1800}
		record_type: ${7:A|AAAA|CNAME|HTTPRED|MX|NS|PTR|SRV|TXT}
		record_value: ${8:# Record value. HTTPRED: <redirection URL>, MX: <priority> <target name>, NS: <name server>, PTR: <target name>, SRV: <priority> <weight> <port> <target name>, TXT: <text value>}
		validate_certs: ${9:#yes|no}
$0
endsnippet

snippet haproxy "Enable, disable, and set weights for HAProxy backend servers using socket commands."
- name:
	haproxy:
		state: ${1:enabled|disabled}
		host: ${2:# Name of the backend host to change.}
		socket: ${3:/var/run/haproxy.sock}
		weight: ${4:# The value passed in argument. If the value ends with the `%` sign, then the new weight will be relative to the initially configured weight. Relative weights are only permitted between 0 and 100% and absolute weights are permitted between 0 and 256.}
		wait_interval: ${5:5}
		backend: ${6:auto-detected}
		wait_retries: ${7:25}
		fail_on_not_found: ${8:no}
		shutdown_sessions: ${9:no}
		wait: ${10:no}
$0
endsnippet

snippet ipify_facts "Retrieve the public IP of your internet gateway."
- name:
	ipify_facts:
		api_url: ${1:https://api.ipify.org}
		timeout: ${2:10}
$0
endsnippet

snippet ipinfoio_facts "Retrieve IP geolocation facts of a host's IP address"
- name:
	ipinfoio_facts:
		http_agent: ${1:ansible-ipinfoio-module/0.0.1}
		timeout: ${2:10}
$0
endsnippet

snippet ldap_attr "Add or remove LDAP attribute values."
- name:
	ldap_attr:
		dn: ${1:# The DN of the entry to modify.}
		name: ${2:# The name of the attribute to modify.}
		values: ${3:# The value(s) to add or remove. This can be a string or a list of strings. The complex argument format is required in order to pass a list of strings (see examples).}
		server_uri: ${4:ldapi:///}
		start_tls: ${5:yes|#no}
		bind_dn: ${6:# A DN to bind with. If this is omitted, we'll try a SASL bind with the EXTERNAL mechanism. If this is blank, we'll use an anonymous bind.}
		state: ${7:#present|absent|exact}
		bind_pw: ${8:# The password to use with I(bind_dn).}
$0
endsnippet

snippet ldap_entry "Add or remove LDAP entries."
- name:
	ldap_entry:
		dn: ${1:# The DN of the entry to add or remove.}
		objectClass: ${2:# If I(state=present), value or list of values to use when creating the entry. It can either be a string or an actual list of strings.}
		start_tls: ${3:yes|#no}
		bind_dn: ${4:# A DN to bind with. If this is omitted, we'll try a SASL bind with the EXTERNAL mechanism. If this is blank, we'll use an anonymous bind.}
		server_uri: ${5:ldapi:///}
		state: ${6:#present|absent}
		params: ${7:# List of options which allows to overwrite any of the task or the I(attributes) options. To remove an option, set the value of the option to C(null).}
		bind_pw: ${8:# The password to use with I(bind_dn).}
		attributes: ${9:# If I(state=present), attributes necessary to create an entry. Existing entries are never modified. To assert specific attribute values on an existing entry, use M(ldap_attr) module instead.}
$0
endsnippet

snippet lldp "get details reported by lldp"
- name:
	lldp:
$0
endsnippet

snippet nmcli "Manage Networking"
- name:
	nmcli:
		conn_name: ${1:# Where conn_name will be the name used to call the connection. when not provided a default name is generated: <type>[-<ifname>][-<num>]}
		state: ${2:present|absent}
		ingress: ${3:# This is only used with VLAN - VLAN ingress priority mapping}
		slavepriority: ${4:32}
		path_cost: ${5:100}
		vlandev: ${6:# This is only used with VLAN - parent device this VLAN is on, can use ifname}
		forwarddelay: ${7:15}
		primary: ${8:# This is only used with bond and is the primary interface name (for "active-backup" mode), this is the usually the 'ifname'}
		hairpin: ${9:yes}
		egress: ${10:# This is only used with VLAN - VLAN egress priority mapping}
		ageingtime: ${11:300}
		dns4: ${12:# A list of upto 3 dns servers, ipv4 format e.g. To add two IPv4 DNS server addresses: ["192.0.2.53", "198.51.100.53"]}
		arp_ip_target: ${13:# This is only used with bond - ARP IP target}
		maxage: ${14:20}
		vlanid: ${15:# This is only used with VLAN - VLAN ID in range <0-4095>}
		priority: ${16:128}
		gw4: ${17:# The IPv4 gateway for this interface using this format ie: "192.0.2.1"}
		gw6: ${18:# The IPv6 gateway for this interface using this format ie: "2001:db8::1"}
		master: ${19:# master <master (ifname, or connection UUID or conn_name) of bridge, team, bond master connection profile.}
		stp: ${20:# This is only used with bridge and controls whether Spanning Tree Protocol (STP) is enabled for this bridge}
		ifname: ${21:conn_name}
		type: ${22:ethernet|team|team-slave|bond|bond-slave|bridge|vlan}
		miimon: ${23:100}
		hellotime: ${24:2}
		downdelay: ${25:# This is only used with bond - downdelay}
		mac: ${26:# This is only used with bridge - MAC address of the bridge (note: this requires a recent kernel feature, originally introduced in 3.15 upstream kernel)}
		ip6: ${27:# The IPv6 address to this interface using this format ie: "abbe::cafe"}
		ip4: ${28:# The IPv4 address to this interface using this format ie: "192.0.2.24/24"}
		autoconnect: ${29:#yes|no}
		dns6: ${30:# A list of upto 3 dns servers, ipv6 format e.g. To add two IPv6 DNS server addresses: ["2001:4860:4860::8888 2001:4860:4860::8844"]}
		mtu: ${31:1500}
		arp_interval: ${32:# This is only used with bond - ARP interval}
		flags: ${33:# This is only used with VLAN - flags}
		mode: ${34:balance-rr|active-backup|balance-xor|broadcast|802.3ad|balance-tlb|balance-alb}
		updelay: ${35:# This is only used with bond - updelay}
$0
endsnippet

snippet nsupdate "Manage DNS records."
- name:
	nsupdate:
		zone: ${1:# DNS record will be modified on this C(zone).}
		server: ${2:# Apply DNS modification on this server.}
		record: ${3:# Sets the DNS record to modify.}
		key_algorithm: ${4:HMAC-MD5.SIG-ALG.REG.INT|hmac-md5|hmac-sha1|hmac-sha224|hmac-sha256|hamc-sha384|hmac-sha512}
		key_name: ${5:# Use TSIG key name to authenticate against DNS C(server)}
		value: ${6:# Sets the record value.}
		state: ${7:present|absent}
		ttl: ${8:3600}
		type: ${9:A}
		key_secret: ${10:7911}
$0
endsnippet

snippet omapi_host "Setup OMAPI hosts."
- name:
	omapi_host:
		macaddr: ${1:# Sets the lease host MAC address.}
		key_name: ${2:# Sets the TSIG key name for authenticating against OMAPI server.}
		state: ${3:present|absent}
		key: ${4:# Sets the TSIG key content for authenticating against OMAPI server.}
		statements: ${5:[]}
		name: ${6:# Sets the host lease hostname (mandatory if state=present).}
		host: ${7:localhost}
		ddns: ${8:no}
		ip: ${9:# Sets the lease host IP address.}
		port: ${10:7911}
$0
endsnippet

snippet snmp_facts "Retrieve facts for a device using SNMP."
- name:
	snmp_facts:
		host: ${1:# Set to target snmp server (normally {{inventory_hostname}})}
		version: ${2:v2|v2c|v3}
		username: ${3:# Username for SNMPv3, required if version is v3}
		level: ${4:authPriv|authNoPriv}
		privacy: ${5:des|aes}
		community: ${6:# The SNMP community string, required if version is v2/v2c}
		authkey: ${7:# Authentication key, required if version is v3}
		integrity: ${8:md5|sha}
		privkey: ${9:# Encryption key, required if version is authPriv}
$0
endsnippet

snippet a10_server "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' server object."
- name:
	a10_server:
		username: ${1:# An account with administrator privileges.}
		server_name: ${2:# The SLB (Server Load Balancer) server name.}
		host: ${3:# Hostname or IP of the A10 Networks device.}
		password: ${4:# Password for the C(username) account.}
		write_config: ${5:yes|#no}
		server_ports: ${6:# A list of ports to create for the server. Each list item should be a dictionary which specifies the C(port:) and C(protocol:), but can also optionally specify the C(status:). See the examples below for details. This parameter is required when C(state) is C(present).}
		partition: ${7:# set active-partition}
		server_status: ${8:#enabled|disabled}
		state: ${9:#present|absent}
		server_ip: ${10:# The SLB server IPv4 address.}
		validate_certs: ${11:#yes|no}
$0
endsnippet

snippet a10_server_axapi3 "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices"
- name:
	a10_server_axapi3:
		username: ${1:# An account with administrator privileges.}
		server_name: ${2:# The SLB (Server Load Balancer) server name.}
		host: ${3:# Hostname or IP of the A10 Networks device.}
		server_ip: ${4:# The SLB (Server Load Balancer) server IPv4 address.}
		password: ${5:# Password for the C(username) account.}
		write_config: ${6:yes|#no}
		server_ports: ${7:# A list of ports to create for the server. Each list item should be a dictionary which specifies the C(port:) and C(protocol:).}
		server_status: ${8:#enable|disable}
		operation: ${9:#create|update|remove}
		validate_certs: ${10:#yes|no}
$0
endsnippet

snippet a10_service_group "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' service groups."
- name:
	a10_service_group:
		service_group: ${1:# The SLB (Server Load Balancing) service-group name}
		username: ${2:# An account with administrator privileges.}
		host: ${3:# Hostname or IP of the A10 Networks device.}
		password: ${4:# Password for the C(username) account.}
		partition: ${5:# set active-partition}
		servers: ${6:# A list of servers to add to the service group. Each list item should be a dictionary which specifies the C(server:) and C(port:), but can also optionally specify the C(status:). See the examples below for details.}
		service_group_protocol: ${7:#tcp|udp}
		write_config: ${8:yes|#no}
		service_group_method: ${9:#round-robin|weighted-rr|least-connection|weighted-least-connection|service-least-connection|service-weighted-least-connection|fastest-response|least-request|round-robin-strict|src-ip-only-hash|src-ip-hash}
		validate_certs: ${10:#yes|no}
$0
endsnippet

snippet a10_virtual_server "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' virtual servers."
- name:
	a10_virtual_server:
		username: ${1:# An account with administrator privileges.}
		password: ${2:# Password for the C(username) account.}
		host: ${3:# Hostname or IP of the A10 Networks device.}
		virtual_server: ${4:# The SLB (Server Load Balancing) virtual server name.}
		partition: ${5:# set active-partition}
		virtual_server_ports: ${6:# A list of ports to create for the virtual server. Each list item should be a dictionary which specifies the C(port:) and C(type:), but can also optionally specify the C(service_group:) as well as the C(status:). See the examples below for details. This parameter is required when C(state) is C(present).}
		virtual_server_status: ${7:enabled|disabled}
		write_config: ${8:yes|#no}
		virtual_server_ip: ${9:# The SLB virtual server IPv4 address.}
		validate_certs: ${10:#yes|no}
$0
endsnippet

snippet aos_asn_pool "Manage AOS ASN Pool"
- name:
	aos_asn_pool:
		session: ${1:# An existing AOS session as obtained by M(aos_login) module.}
		ranges: ${2:# List of ASNs ranges to add to the ASN Pool. Each range must have 2 values.}
		content: ${3:# Datastructure of the ASN Pool to manage. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).}
		state: ${4:#present|absent}
		name: ${5:# Name of the ASN Pool to manage. Only one of I(name), I(id) or I(content) can be set.}
		id: ${6:# AOS Id of the ASN Pool to manage. Only one of I(name), I(id) or I(content) can be set.}
$0
endsnippet

snippet aos_blueprint "Manage AOS blueprint instance"
- name:
	aos_blueprint:
		session: ${1:# An existing AOS session as obtained by M(aos_login) module.}
		state: ${2:#present|absent|build-ready}
		reference_arch: ${3:# When creating a blueprint, this value identifies a known AOS reference architecture value. I(Refer to AOS-server documentation for available values).}
		name: ${4:# Name of the Blueprint to manage. Only one of I(name) or I(id) can be set.}
		timeout: ${5:5}
		id: ${6:# AOS Id of the IP Pool to manage (can't be used to create a new IP Pool). Only one of I(name) or I(id) can be set.}
		template: ${7:# When creating a blueprint, this value identifies, by name, an existing engineering design template within the AOS-server.}
$0
endsnippet

snippet aos_blueprint_param "Manage AOS blueprint parameter values"
- name:
	aos_blueprint_param:
		blueprint: ${1:# Blueprint Name or Id as defined in AOS.}
		session: ${2:# An existing AOS session as obtained by M(aos_login) module.}
		state: ${3:#present|absent}
		name: ${4:# Name of blueprint parameter, as defined by AOS design template. You can use the option I(get_param_list) to get the complete list of supported parameters for your blueprint.}
		get_param_list: ${5:# Get the complete list of supported parameters for this blueprint and the description of those parameters.}
		value: ${6:# Blueprint parameter value.  This value may be transformed by using the I(param_map) field; used when the the blueprint parameter requires an AOS unique ID value.}
		param_map: ${7:# Defines the aos-pyez collection that will is used to map the user-defined item name into the AOS unique ID value.  For example, if the caller provides an IP address pool I(param_value) called "Server-IpAddrs", then the aos-pyez collection is 'IpPools'. Some I(param_map) are already defined by default like I(logical_device_maps).}
$0
endsnippet

snippet aos_blueprint_virtnet "Manage AOS blueprint parameter values"
- name:
	aos_blueprint_virtnet:
		blueprint: ${1:# Blueprint Name or Id as defined in AOS.}
		session: ${2:# An existing AOS session as obtained by M(aos_login) module.}
		content: ${3:# Datastructure of the Virtual Network to manage. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).}
		state: ${4:#present|absent}
		name: ${5:# Name of Virtual Network as part of the Blueprint.}
$0
endsnippet

snippet aos_device "Manage Devices on AOS Server"
- name:
	aos_device:
		session: ${1:# An existing AOS session as obtained by M(aos_login) module.}
		state: ${2:#normal}
		name: ${3:# The device serial-number; i.e. uniquely identifies the device in the AOS system. Only one of I(name) or I(id) can be set.}
		approve: ${4:yes|#no}
		id: ${5:# The AOS internal id for a device; i.e. uniquely identifies the device in the AOS system. Only one of I(name) or I(id) can be set.}
		location: ${6:# When approving a device using the I(approve) argument, it's possible define the location of the device.}
$0
endsnippet

snippet aos_external_router "Manage AOS External Router"
- name:
	aos_external_router:
		session: ${1:# An existing AOS session as obtained by M(aos_login) module.}
		content: ${2:# Datastructure of the External Router to create. The format is defined by the I(content_format) parameter. It's the same datastructure that is returned on success in I(value).}
		state: ${3:#present|absent}
		name: ${4:# Name of the External Router to manage. Only one of I(name), I(id) or I(content) can be set.}
		loopback: ${5:# IP address of the Loopback interface of the external_router.}
		asn: ${6:# ASN id of the external_router.}
		id: ${7:# AOS Id of the External Router to manage (can't be used to create a new External Router), Only one of I(name), I(id) or I(content) can be set.}
$0
endsnippet

snippet aos_ip_pool "Manage AOS IP Pool"
- name:
	aos_ip_pool:
		session: ${1:# An existing AOS session as obtained by M(aos_login) module.}
		content: ${2:# Datastructure of the IP Pool to manage. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).}
		subnets: ${3:# List of subnet that needs to be part of the IP Pool.}
		state: ${4:#present|absent}
		name: ${5:# Name of the IP Pool to manage. Only one of I(name), I(id) or I(content) can be set.}
		id: ${6:# AOS Id of the IP Pool to manage (can't be used to create a new IP Pool), Only one of I(name), I(id) or I(content) can be set.}
$0
endsnippet

snippet aos_logical_device "Manage AOS Logical Device"
- name:
	aos_logical_device:
		session: ${1:# An existing AOS session as obtained by M(aos_login) module.}
		content: ${2:# Datastructure of the Logical Device to create. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).}
		state: ${3:#present|absent}
		name: ${4:# Name of the Logical Device to manage. Only one of I(name), I(id) or I(content) can be set.}
		id: ${5:# AOS Id of the Logical Device to manage (can't be used to create a new Logical Device), Only one of I(name), I(id) or I(content) can be set.}
$0
endsnippet

snippet aos_logical_device_map "Manage AOS Logical Device Map"
- name:
	aos_logical_device_map:
		session: ${1:# An existing AOS session as obtained by M(aos_login) module.}
		content: ${2:# Datastructure of the Logical Device Map to manage. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value). Only one of I(name), I(id) or I(content) can be set.}
		state: ${3:#present|absent}
		name: ${4:# Name of the Logical Device Map to manage. Only one of I(name), I(id) or I(content) can be set.}
		id: ${5:# AOS Id of the Logical Device Map to manage (can't be used to create a new Logical Device Map), Only one of I(name), I(id) or I(content) can be set.}
$0
endsnippet

snippet aos_login "Login to AOS server for session token"
- name:
	aos_login:
		server: ${1:# Address of the AOS Server on which you want to open a connection.}
		passwd: ${2:admin}
		user: ${3:admin}
		port: ${4:8888}
$0
endsnippet

snippet aos_rack_type "Manage AOS Rack Type"
- name:
	aos_rack_type:
		session: ${1:# An existing AOS session as obtained by M(aos_login) module.}
		content: ${2:# Datastructure of the Rack Type to create. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).}
		state: ${3:#present|absent}
		name: ${4:# Name of the Rack Type to manage. Only one of I(name), I(id) or I(content) can be set.}
		id: ${5:# AOS Id of the Rack Type to manage (can't be used to create a new Rack Type), Only one of I(name), I(id) or I(content) can be set.}
$0
endsnippet

snippet aos_template "Manage AOS Template"
- name:
	aos_template:
		session: ${1:# An existing AOS session as obtained by M(aos_login) module.}
		content: ${2:# Datastructure of the Template to create. The data can be in YAML / JSON or directly a variable. It's the same datastructure that is returned on success in I(value).}
		state: ${3:#present|absent}
		name: ${4:# Name of the Template to manage. Only one of I(name), I(id) or I(src) can be set.}
		id: ${5:# AOS Id of the Template to manage (can't be used to create a new Template), Only one of I(name), I(id) or I(src) can be set.}
$0
endsnippet

snippet asa_acl "Manage access-lists on a Cisco ASA"
- name:
	asa_acl:
		lines: ${1:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.}
		authorize: ${2:yes|no}
		force: ${3:yes|no}
		context: ${4:# Specifies which context to target if you are running in the ASA in multiple context mode. Defaults to the current context you login to.}
		provider: ${5:# A dict object containing connection details.}
		before: ${6:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
		config: ${7:# The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuruation to use as the base config for comparison.}
		after: ${8:# The ordered set of commands to append to the end of the command stack if a changed needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.}
		match: ${9:#line|strict|exact}
		replace: ${10:#line|block}
$0
endsnippet

snippet asa_command "Run arbitrary commands on Cisco ASA devices."
- name:
	asa_command:
		commands: ${1:# List of commands to send to the remote device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.}
		authorize: ${2:yes|no}
		retries: ${3:10}
		interval: ${4:1}
		context: ${5:# Specifies which context to target if you are running in the ASA in multiple context mode. Defaults to the current context you login to.}
		provider: ${6:# A dict object containing connection details.}
		wait_for: ${7:# List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.}
		match: ${8:any|#all}
$0
endsnippet

snippet asa_config "Manage Cisco ASA configuration sections"
- name:
	asa_config:
		authorize: ${1:yes|no}
		src: ${2:# Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines).}
		passwords: ${3:yes|no}
		context: ${4:# Specifies which context to target if you are running in the ASA in multiple context mode. Defaults to the current context you login to.}
		backup: ${5:yes|no}
		after: ${6:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.}
		lines: ${7:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.}
		update: ${8:#merge|check}
		replace: ${9:#line|block}
		parents: ${10:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.}
		defaults: ${11:yes|no}
		provider: ${12:# A dict object containing connection details.}
		commit: ${13:#merge|check}
		save: ${14:yes|no}
		config: ${15:# The C(config) argument allows the playbook designer to supply the base configuration to be used to validate configuration changes necessary.  If this argument is provided, the module will not download the running-config from the remote node.}
		match: ${16:#line|strict|exact|none}
		before: ${17:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system}
$0
endsnippet

snippet avi_analyticsprofile "Module for setup of AnalyticsProfile Avi RESTful Object"
- name:
	avi_analyticsprofile:
		name: ${1:# The name of the analytics profile.}
		disable_se_analytics: ${2:# Disable node (service engine) level analytics forvs metrics.}
		apdex_server_rtt_tolerated_factor: ${3:# Tolerated client to avi round trip time(rtt) factor.}
		hs_security_tls12_score: ${4:# Score assigned when supporting tls1.2 encryption protocol.}
		exclude_no_dns_record_as_error: ${5:# Exclude queries to domains that did not have configured services/records from the list of errors.}
		conn_server_lossy_zero_win_size_event_threshold: ${6:# A server connection is considered lossy when percentage of times a packet could not be trasmitted due to tcp zero window is above this threshold.}
		conn_lossy_total_rexmt_threshold: ${7:# A connection between client and avi is considered lossy when more than this percentage of packets are retransmitted.}
		hs_pscore_traffic_threshold_l4_client: ${8:# Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.}
		exclude_no_valid_gs_member_as_error: ${9:# Exclude queries to gslb services that have no available members from the list of errors.}
		hs_security_cipherscore_ge128b: ${10:# Score assigned when the minimum cipher strength is greater than equal to 128 bits.}
		uuid: ${11:# Uuid of the analytics profile.}
		exclude_invalid_dns_domain_as_error: ${12:# Exclude dns queries to domains outside the domains configured in the dns application profile from the list of errors.}
		exclude_http_error_codes: ${13:# List of http status codes to be excluded from being classified as an error.}
		hs_max_anomaly_penalty: ${14:# Maximum penalty that may be deducted from health score for anomalies.}
		conn_server_lossy_ooo_threshold: ${15:# A connection between avi and server is considered lossy when more than this percentage of out of order packets are received.}
		exclude_persistence_change_as_error: ${16:# Exclude persistence server changed while load balancing' from the list of errors.}
		hs_security_selfsignedcert_penalty: ${17:# Deprecated.}
		conn_server_lossy_total_rexmt_threshold: ${18:# A connection between avi and server is considered lossy when more than this percentage of packets are retransmitted.}
		username: ${19:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		hs_security_certscore_le30d: ${20:# Score assigned when the certificate expires in less than or equal to 30 days.}
		exclude_syn_retransmit_as_error: ${21:# Exclude 'server unanswered syns' from the list of errors.}
		controller: ${22:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		hs_security_hsts_penalty: ${23:# Penalty for not enabling hsts.}
		apdex_rum_threshold: ${24:# If a client is able to load a page in less than the satisfactory latency threshold, the pageload is considered satisfied.}
		password: ${25:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		conn_lossy_zero_win_size_event_threshold: ${26:# A client connection is considered lossy when percentage of times a packet could not be trasmitted due to tcp zero window is above this threshold.}
		hs_security_encalgo_score_rc4: ${27:# Score assigned when rc4 algorithm is used for encryption.}
		apdex_rtt_threshold: ${28:# Satisfactory client to avi round trip time(rtt).}
		tenant_ref: ${29:# It is a reference to an object of type tenant.}
		apdex_response_tolerated_factor: ${30:# Client tolerated response latency factor.}
		exclude_tcp_reset_as_error: ${31:# Exclude tcp resets by client from the list of potential errors.}
		hs_security_chain_invalidity_penalty: ${32:# Penalty for allowing certificates with invalid chain.}
		exclude_invalid_dns_query_as_error: ${33:# Exclude invalid dns queries from the list of errors.}
		conn_lossy_ooo_threshold: ${34:# A connection between client and avi is considered lossy when more than this percentage of out of order packets are received.}
		hs_security_cipherscore_lt128b: ${35:# Score assigned when the minimum cipher strength is less than 128 bits.}
		hs_security_encalgo_score_none: ${36:# Score assigned when no algorithm is used for encryption.}
		hs_event_throttle_window: ${37:# Time window (in secs) within which only unique health change events should occur.}
		hs_security_nonpfs_penalty: ${38:# Penalty for allowing non-pfs handshakes.}
		hs_security_certscore_gt30d: ${39:# Score assigned when the certificate expires in more than 30 days.}
		exclude_server_tcp_reset_as_error: ${40:# Exclude server tcp reset from errors.}
		hs_min_dos_rate: ${41:# Dos connection rate below which the dos security assessment will not kick in.}
		hs_max_resources_penalty: ${42:# Maximum penalty that may be deducted from health score for high resource utilization.}
		apdex_server_response_threshold: ${43:# A server http response is considered satisfied if latency is less than the satisfactory latency threshold.}
		hs_performance_boost: ${44:# Adds free performance score credits to health score.}
		client_log_config: ${45:# Clientlogconfiguration settings for analyticsprofile.}
		hs_security_tls11_score: ${46:# Score assigned when supporting tls1.1 encryption protocol.}
		exclude_gs_down_as_error: ${47:# Exclude queries to gslb services that are operationally down from the list of errors.}
		apdex_server_response_tolerated_factor: ${48:# Server tolerated response latency factor.}
		state: ${49:absent|#present}
		disable_server_analytics: ${50:# Disable analytics on backend servers.}
		conn_server_lossy_timeo_rexmt_threshold: ${51:# A connection between avi and server is considered lossy when more than this percentage of packets are retransmitted due to timeout.}
		exclude_client_close_before_request_as_error: ${52:# Exclude client closed connection before an http request could be completed from being classified as an error.}
		hs_security_weak_signature_algo_penalty: ${53:# Penalty for allowing weak signature algorithm(s).}
		conn_lossy_timeo_rexmt_threshold: ${54:# A connection between client and avi is considered lossy when more than this percentage of packets are retransmitted due to timeout.}
		apdex_rtt_tolerated_factor: ${55:# Tolerated client to avi round trip time(rtt) factor.}
		description: ${56:# User defined description for the object.}
		hs_security_ssl30_score: ${57:# Score assigned when supporting ssl3.0 encryption protocol.}
		apdex_rum_tolerated_factor: ${58:# Virtual service threshold factor for tolerated page load time (plt) as multiple of apdex_rum_threshold.}
		hs_security_cipherscore_eq000b: ${59:# Score assigned when the minimum cipher strength is 0 bits.}
		ranges: ${60:# List of http status code ranges to be excluded from being classified as an error.}
		apdex_server_rtt_threshold: ${61:# Satisfactory client to avi round trip time(rtt).}
		exclude_server_dns_error_as_error: ${62:# Exclude server dns error response from the list of errors.}
		hs_security_certscore_le07d: ${63:# Score assigned when the certificate expires in less than or equal to 7 days.}
		resp_code_block: ${64:# Block of http response codes to be excluded from being classified as an error.}
		tenant: ${65:admin}
		hs_pscore_traffic_threshold_l4_server: ${66:# Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.}
		hs_max_security_penalty: ${67:# Maximum penalty that may be deducted from health score based on security assessment.}
		tenant_uuid: ${68:}
		url: ${69:# Avi controller URL of the object.}
		hs_security_tls10_score: ${70:# Score assigned when supporting tls1.0 encryption protocol.}
		hs_security_certscore_expired: ${71:# Score assigned when the certificate has expired.}
		apdex_response_threshold: ${72:# If a client receives an http response in less than the satisfactory latency threshold, the request is considered satisfied.}
		exclude_unsupported_dns_query_as_error: ${73:# Exclude unsupported dns queries from the list of errors.}
$0
endsnippet

snippet avi_api_session "Avi API Module"
- name:
	avi_api_session:
		http_method: ${1:get|put|post|patch|delete}
		username: ${2:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		controller: ${3:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		params: ${4:# Query parameters passed to the HTTP API.}
		timeout: ${5:# Timeout (in seconds) for Avi API calls.}
		path: ${6:# Path for Avi API resource. For example, C(path: virtualservice) will translate to C(api/virtualserivce).}
		password: ${7:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		data: ${8:# HTTP body in YAML or JSON format.}
		tenant_uuid: ${9:}
		tenant: ${10:admin}
$0
endsnippet

snippet avi_applicationpersistenceprofile "Module for setup of ApplicationPersistenceProfile Avi RESTful Object"
- name:
	avi_applicationpersistenceprofile:
		persistence_type: ${1:# Method used to persist clients to the same server for a duration of time or a session.}
		name: ${2:# A user-friendly name for the persistence profile.}
		username: ${3:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		uuid: ${4:# Uuid of the persistence profile.}
		app_cookie_persistence_profile: ${5:# Specifies the application cookie persistence profile parameters.}
		tenant_uuid: ${6:}
		tenant_ref: ${7:# It is a reference to an object of type tenant.}
		server_hm_down_recovery: ${8:# Specifies behavior when a persistent server has been marked down by a health monitor.}
		http_cookie_persistence_profile: ${9:# Specifies the http cookie persistence profile parameters.}
		url: ${10:# Avi controller URL of the object.}
		state: ${11:absent|#present}
		ip_persistence_profile: ${12:# Specifies the client ip persistence profile parameters.}
		hdr_persistence_profile: ${13:# Specifies the custom http header persistence profile parameters.}
		password: ${14:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		controller: ${15:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		tenant: ${16:admin}
		description: ${17:# User defined description for the object.}
$0
endsnippet

snippet avi_applicationprofile "Module for setup of ApplicationProfile Avi RESTful Object"
- name:
	avi_applicationprofile:
		name: ${1:# The name of the application profile.}
		type: ${2:# Specifies which application layer proxy is enabled for the virtual service.}
		username: ${3:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		tcp_app_profile: ${4:# Specifies the tcp application proxy profile parameters.}
		dns_service_profile: ${5:# Specifies various dns service related controls for virtual service.}
		preserve_client_ip: ${6:# Specifies if client ip needs to be preserved for backend connection.}
		description: ${7:# User defined description for the object.}
		tenant_ref: ${8:# It is a reference to an object of type tenant.}
		controller: ${9:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		http_profile: ${10:# Specifies the http application proxy profile parameters.}
		url: ${11:# Avi controller URL of the object.}
		state: ${12:absent|#present}
		dos_rl_profile: ${13:# Specifies various security related controls for virtual service.}
		password: ${14:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		tenant_uuid: ${15:}
		tenant: ${16:admin}
		uuid: ${17:# Uuid of the application profile.}
$0
endsnippet

snippet avi_certificatemanagementprofile "Module for setup of CertificateManagementProfile Avi RESTful Object"
- name:
	avi_certificatemanagementprofile:
		name: ${1:# Name of the pki profile.}
		script_path: ${2:# Script_path of certificatemanagementprofile.}
		username: ${3:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		password: ${4:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		url: ${5:# Avi controller URL of the object.}
		tenant_ref: ${6:# It is a reference to an object of type tenant.}
		controller: ${7:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		state: ${8:absent|#present}
		script_params: ${9:# List of customparams.}
		tenant_uuid: ${10:}
		tenant: ${11:admin}
		uuid: ${12:# Unique object identifier of the object.}
$0
endsnippet

snippet avi_healthmonitor "Module for setup of HealthMonitor Avi RESTful Object"
- name:
	avi_healthmonitor:
		name: ${1:# A user friendly name for this health monitor.}
		type: ${2:# Type of the health monitor.}
		username: ${3:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		https_monitor: ${4:# Healthmonitorhttp settings for healthmonitor.}
		receive_timeout: ${5:# A valid response from the server is expected within the receive timeout window.}
		description: ${6:# User defined description for the object.}
		controller: ${7:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		udp_monitor: ${8:# Healthmonitorudp settings for healthmonitor.}
		http_monitor: ${9:# Healthmonitorhttp settings for healthmonitor.}
		password: ${10:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		tenant: ${11:admin}
		successful_checks: ${12:# Number of continuous successful health checks before server is marked up.}
		monitor_port: ${13:# Use this port instead of the port defined for the server in the pool.}
		uuid: ${14:# Uuid of the health monitor.}
		url: ${15:# Avi controller URL of the object.}
		dns_monitor: ${16:# Healthmonitordns settings for healthmonitor.}
		tenant_ref: ${17:# It is a reference to an object of type tenant.}
		failed_checks: ${18:# Number of continuous failed health checks before the server is marked down.}
		tcp_monitor: ${19:# Healthmonitortcp settings for healthmonitor.}
		state: ${20:absent|#present}
		send_interval: ${21:# Frequency, in seconds, that monitors are sent to a server.}
		external_monitor: ${22:# Healthmonitorexternal settings for healthmonitor.}
		tenant_uuid: ${23:}
$0
endsnippet

snippet avi_networkprofile "Module for setup of NetworkProfile Avi RESTful Object"
- name:
	avi_networkprofile:
		profile: ${1:# Networkprofileunion settings for networkprofile.}
		name: ${2:# The name of the network profile.}
		username: ${3:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		description: ${4:# User defined description for the object.}
		url: ${5:# Avi controller URL of the object.}
		tenant_ref: ${6:# It is a reference to an object of type tenant.}
		uuid: ${7:# Uuid of the network profile.}
		tenant_uuid: ${8:}
		state: ${9:absent|#present}
		password: ${10:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		controller: ${11:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		tenant: ${12:admin}
$0
endsnippet

snippet avi_pkiprofile "Module for setup of PKIProfile Avi RESTful Object"
- name:
	avi_pkiprofile:
		name: ${1:# Name of the pki profile.}
		crls: ${2:# Certificate revocation lists.}
		username: ${3:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		url: ${4:# Avi controller URL of the object.}
		ignore_peer_chain: ${5:# When enabled, avi will not trust intermediate and root certs presented by a client.}
		tenant_ref: ${6:# It is a reference to an object of type tenant.}
		controller: ${7:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		created_by: ${8:# Creator name.}
		ca_certs: ${9:# List of certificate authorities (root and intermediate) trusted that is used for certificate validation.}
		state: ${10:absent|#present}
		validate_only_leaf_crl: ${11:# When enabled, avi will only validate the revocation status of the leaf certificate using crl.}
		crl_check: ${12:# When enabled, avi will verify via crl checks that certificates in the trust chain have not been revoked.}
		password: ${13:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		tenant_uuid: ${14:}
		tenant: ${15:admin}
		uuid: ${16:# Unique object identifier of the object.}
$0
endsnippet

snippet avi_pool "Module for setup of Pool Avi RESTful Object"
- name:
	avi_pool:
		name: ${1:# The name of the pool.}
		lb_algorithm: ${2:# The load balancing algorithm will pick a server within the pool's list of available servers.}
		use_service_port: ${3:# Do not translate the client's destination port when sending the connection to the server.}
		rewrite_host_header_to_server_name: ${4:# Rewrite incoming host header to server name of the server to which the request is proxied.}
		host_check_enabled: ${5:# Enable common name check for server certificate.}
		enabled: ${6:# Enable or disable the pool.}
		rewrite_host_header_to_sni: ${7:# If sni server name is specified, rewrite incoming host header to the sni server name.}
		capacity_estimation: ${8:# Inline estimation of capacity of servers.}
		max_conn_rate_per_server: ${9:# Rate limit connections to each server.}
		servers: ${10:# The pool directs load balanced traffic to this list of destination servers.}
		fewest_tasks_feedback_delay: ${11:# Periodicity of feedback for fewest tasks server selection algorithm.}
		server_auto_scale: ${12:# Server autoscale.}
		ipaddrgroup_ref: ${13:# Use list of servers from ip address group.}
		capacity_estimation_ttfb_thresh: ${14:# The maximum time-to-first-byte of a server.}
		ab_pool: ${15:# A/b pool configuration.}
		fail_action: ${16:# Enable an action - close connection, http redirect, local http response, or backup pool - when a pool failure happens.}
		apic_epg_name: ${17:# Synchronize cisco apic epg members with pool servers.}
		networks: ${18:# (internal-use) networks designated as containing servers for this pool.}
		lb_algorithm_hash: ${19:# Criteria used as a key for determining the hash between the client and  server.}
		health_monitor_refs: ${20:# Verify server health by applying one or more health monitors.}
		sni_enabled: ${21:# Enable tls sni for server connections.}
		server_name: ${22:# Fully qualified dns hostname which will be used in the tls sni extension in server connections if sni is enabled.}
		lb_algorithm_consistent_hash_hdr: ${23:# Http header name to be used for the hash key.}
		cloud_ref: ${24:# It is a reference to an object of type cloud.}
		created_by: ${25:# Creator name.}
		autoscale_policy_ref: ${26:# Reference to server autoscale policy.}
		ssl_profile_ref: ${27:# When enabled, avi re-encrypts traffic to the backend servers.}
		east_west: ${28:# Inherited config from virtualservice.}
		placement_networks: ${29:# Manually select the networks and subnets used to provide reachability to the pool's servers.}
		graceful_disable_timeout: ${30:# Used to gracefully disable a server.}
		state: ${31:absent|#present}
		tenant: ${32:admin}
		a_pool: ${33:# Name of container cloud application that constitutes a pool in a a-b pool configuration, if different from vs app.}
		pki_profile_ref: ${34:# Avi will validate the ssl certificate present by a server against the selected pki profile.}
		vrf_ref: ${35:# Virtual routing context that the pool is bound to.}
		username: ${36:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		application_persistence_profile_ref: ${37:# Persistence will ensure the same user sticks to the same server for a desired duration of time.}
		inline_health_monitor: ${38:# The passive monitor will monitor client to server connections and requests and adjust traffic load to servers based on successful responses.}
		default_server_port: ${39:# Traffic sent to servers will use this destination server port unless overridden by the server's specific port attribute.}
		description: ${40:# A description of the pool.}
		request_queue_depth: ${41:# Minimum number of requests to be queued when pool is full.}
		server_reselect: ${42:# Server reselect configuration for http requests.}
		ab_priority: ${43:# Priority of this pool in a a-b pool pair.}
		controller: ${44:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		password: ${45:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		server_count: ${46:# Number of server_count.}
		ssl_key_and_certificate_ref: ${47:# Service engines will present a client ssl certificate to the server.}
		uuid: ${48:# Uuid of the pool.}
		autoscale_launch_config_ref: ${49:# Reference to the launch configuration profile.}
		request_queue_enabled: ${50:# Enable request queue when pool is full.}
		max_concurrent_connections_per_server: ${51:# The maximum number of concurrent connections allowed to each server within the pool.}
		url: ${52:# Avi controller URL of the object.}
		prst_hdr_name: ${53:# Header name for custom header persistence.}
		tenant_ref: ${54:# It is a reference to an object of type tenant.}
		autoscale_networks: ${55:# Network ids for the launch configuration.}
		domain_name: ${56:# Comma separated list of domain names which will be used to verify the common names or subject alternative names presented by server certificates.}
		connection_ramp_duration: ${57:# Duration for which new connections will be gradually ramped up to a server recently brought online.}
		cloud_config_cksum: ${58:# Checksum of cloud configuration for pool.}
		tenant_uuid: ${59:}
$0
endsnippet

snippet avi_poolgroup "Module for setup of PoolGroup Avi RESTful Object"
- name:
	avi_poolgroup:
		name: ${1:# The name of the pool group.}
		username: ${2:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		priority_labels_ref: ${3:# Uuid of the priority labels.}
		description: ${4:# Description of pool group.}
		tenant_uuid: ${5:}
		cloud_ref: ${6:# It is a reference to an object of type cloud.}
		tenant_ref: ${7:# It is a reference to an object of type tenant.}
		controller: ${8:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		created_by: ${9:# Name of the user who created the object.}
		members: ${10:# List of pool group members object of type poolgroupmember.}
		url: ${11:# Avi controller URL of the object.}
		state: ${12:absent|#present}
		cloud_config_cksum: ${13:# Checksum of cloud configuration for poolgroup.}
		min_servers: ${14:# The minimum number of servers to distribute traffic to.}
		fail_action: ${15:# Enable an action - close connection, http redirect, or local http response - when a pool group failure happens.}
		password: ${16:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		deployment_policy_ref: ${17:# When setup autoscale manager will automatically promote new pools into production when deployment goals are met.}
		tenant: ${18:admin}
		uuid: ${19:# Uuid of the pool group.}
$0
endsnippet

snippet avi_role "Module for setup of Role Avi RESTful Object"
- name:
	avi_role:
		name: ${1:# Name of the object.}
		username: ${2:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		uuid: ${3:# Unique object identifier of the object.}
		url: ${4:# Avi controller URL of the object.}
		privileges: ${5:# List of permission.}
		tenant_ref: ${6:# It is a reference to an object of type tenant.}
		controller: ${7:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		state: ${8:absent|#present}
		password: ${9:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		tenant_uuid: ${10:}
		tenant: ${11:admin}
$0
endsnippet

snippet avi_sslkeyandcertificate "Module for setup of SSLKeyAndCertificate Avi RESTful Object"
- name:
	avi_sslkeyandcertificate:
		name: ${1:# Name of the object.}
		certificate: ${2:# Sslcertificate settings for sslkeyandcertificate.}
		status: ${3:# Status of sslkeyandcertificate.}
		username: ${4:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		certificate_management_profile_ref: ${5:# It is a reference to an object of type certificatemanagementprofile.}
		hardwaresecuritymodulegroup_ref: ${6:# It is a reference to an object of type hardwaresecuritymodulegroup.}
		key: ${7:# Private key.}
		key_params: ${8:# Sslkeyparams settings for sslkeyandcertificate.}
		password: ${9:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		tenant: ${10:admin}
		enckey_base64: ${11:# Encrypted private key corresponding to the private key (e.g.}
		dynamic_params: ${12:# Dynamic parameters needed for certificate management profile.}
		uuid: ${13:# Unique object identifier of the object.}
		url: ${14:# Avi controller URL of the object.}
		enckey_name: ${15:# Name of the encrypted private key (e.g.}
		tenant_ref: ${16:# It is a reference to an object of type tenant.}
		controller: ${17:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		created_by: ${18:# Creator name.}
		state: ${19:absent|#present}
		ca_certs: ${20:# Ca certificates in certificate chain.}
		type: ${21:# Type of sslkeyandcertificate.}
		tenant_uuid: ${22:}
$0
endsnippet

snippet avi_sslprofile "Module for setup of SSLProfile Avi RESTful Object"
- name:
	avi_sslprofile:
		name: ${1:# Name of the object.}
		username: ${2:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		accepted_ciphers: ${3:# Ciphers suites represented as defined by U(http://www.openssl.org/docs/apps/ciphers.html).}
		prefer_client_cipher_ordering: ${4:# Prefer the ssl cipher ordering presented by the client during the ssl handshake over the one specified in the ssl profile.}
		description: ${5:# User defined description for the object.}
		tags: ${6:# List of tag.}
		accepted_versions: ${7:# Set of versions accepted by the server.}
		controller: ${8:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		password: ${9:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		tenant: ${10:admin}
		ssl_session_timeout: ${11:# The amount of time before an ssl session expires.}
		uuid: ${12:# Unique object identifier of the object.}
		url: ${13:# Avi controller URL of the object.}
		tenant_ref: ${14:# It is a reference to an object of type tenant.}
		state: ${15:absent|#present}
		enable_ssl_session_reuse: ${16:# Enable ssl session re-use.}
		cipher_enums: ${17:# Cipher_enums of sslprofile.}
		send_close_notify: ${18:# Send 'close notify' alert message for a clean shutdown of the ssl connection.}
		dhparam: ${19:# Dh parameters used in ssl.}
		ssl_rating: ${20:# Sslrating settings for sslprofile.}
		tenant_uuid: ${21:}
$0
endsnippet

snippet avi_systemconfiguration "Module for setup of SystemConfiguration Avi RESTful Object"
- name:
	avi_systemconfiguration:
		username: ${1:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		docker_mode: ${2:# Boolean flag to set docker_mode.}
		dns_configuration: ${3:# Dnsconfiguration settings for systemconfiguration.}
		proxy_configuration: ${4:# Proxyconfiguration settings for systemconfiguration.}
		ssh_hmacs: ${5:# Allowed hmac list for ssh to the management interface on the controller and service engines.}
		linux_configuration: ${6:# Linuxconfiguration settings for systemconfiguration.}
		url: ${7:# Avi controller URL of the object.}
		password: ${8:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		tenant: ${9:admin}
		email_configuration: ${10:# Emailconfiguration settings for systemconfiguration.}
		uuid: ${11:# Unique object identifier of the object.}
		dns_virtualservice_refs: ${12:# Dns virtualservices hosting fqdn records for applications across avi vantage.}
		tech_support_uploader_configuration: ${13:# Techsupportuploaderconfiguration settings for systemconfiguration.}
		controller: ${14:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		global_tenant_config: ${15:# Tenantconfiguration settings for systemconfiguration.}
		snmp_configuration: ${16:# Snmpconfiguration settings for systemconfiguration.}
		state: ${17:absent|#present}
		ntp_configuration: ${18:# Ntpconfiguration settings for systemconfiguration.}
		admin_auth_configuration: ${19:# Adminauthconfiguration settings for systemconfiguration.}
		mgmt_ip_access_control: ${20:# Configure ip access control for controller to restrict open access.}
		ssh_ciphers: ${21:# Allowed ciphers list for ssh to the management interface on the controller and service engines.}
		tenant_uuid: ${22:}
		portal_configuration: ${23:# Portalconfiguration settings for systemconfiguration.}
$0
endsnippet

snippet avi_tenant "Module for setup of Tenant Avi RESTful Object"
- name:
	avi_tenant:
		name: ${1:# Name of the object.}
		username: ${2:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		password: ${3:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		url: ${4:# Avi controller URL of the object.}
		controller: ${5:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		uuid: ${6:# Unique object identifier of the object.}
		created_by: ${7:# Creator of this tenant.}
		state: ${8:absent|#present}
		config_settings: ${9:# Tenantconfiguration settings for tenant.}
		local: ${10:# Boolean flag to set local.}
		tenant_uuid: ${11:}
		tenant: ${12:admin}
		description: ${13:# User defined description for the object.}
$0
endsnippet

snippet avi_virtualservice "Module for setup of VirtualService Avi RESTful Object"
- name:
	avi_virtualservice:
		name: ${1:# Name for the virtual service.}
		client_auth: ${2:# Http authentication configuration for protected resources.}
		port_uuid: ${3:# (internal-use) network port assigned to the virtual service ip address.}
		availability_zone: ${4:# Availability-zone to place the virtual service.}
		flow_dist: ${5:# Criteria for flow distribution among ses.}
		floating_subnet_uuid: ${6:# If auto_allocate_floating_ip is true and more than one floating-ip subnets exist, then the subnet for the floating ip address allocation.}
		delay_fairness: ${7:# Select the algorithm for qos fairness.}
		snat_ip: ${8:# Nat'ted floating source ip address(es) for upstream connection to servers.}
		enable_rhi_snat: ${9:# Enable route health injection for source nat'ted floating ip address using the bgp config in the vrf context.}
		content_rewrite: ${10:# Profile used to match and rewrite strings in request and/or response body.}
		requests_rate_limit: ${11:# Rate limit the incoming requests to this virtual service.}
		analytics_profile_ref: ${12:# Specifies settings related to analytics.}
		uuid: ${13:# Uuid of the virtualservice.}
		avi_allocated_fip: ${14:# (internal-use) fip allocated by avi in the cloud infrastructure.}
		ssl_profile_ref: ${15:# Determines the set of ssl versions and ciphers to accept for ssl/tls terminated connections.}
		created_by: ${16:# Creator name.}
		discovered_network_ref: ${17:# (internal-use) discovered networks providing reachability for client facing virtual service ip.}
		max_cps_per_client: ${18:# Maximum connections per second per client ip.}
		pool_ref: ${19:# The pool is an object that contains destination servers and related attributes such as load-balancing and persistence.}
		ssl_sess_cache_avg_size: ${20:# Expected number of ssl session cache entries (may be exceeded).}
		ssl_key_and_certificate_refs: ${21:# Select or create one or two certificates, ec and/or rsa, that will be presented to ssl/tls terminated connections.}
		username: ${22:# Username used for accessing Avi controller. The default value is the environment variable C(AVI_USERNAME).}
		http_policies: ${23:# Http policies applied on the data traffic of the virtual service.}
		application_profile_ref: ${24:# Enable application layer specific features for the virtual service.}
		microservice_ref: ${25:# Microservice representing the virtual service.}
		controller: ${26:# IP address or hostname of the controller. The default value is the environment variable C(AVI_CONTROLLER).}
		password: ${27:# Password of Avi user in Avi controller. The default value is the environment variable C(AVI_PASSWORD).}
		ip_address: ${28:# Ip address of the virtual service.}
		pool_group_ref: ${29:# The pool group is an object that contains pools.}
		east_west_placement: ${30:# Force placement on all se's in service group (mesos mode only).}
		subnet_uuid: ${31:# It represents subnet for the virtual service ip address allocation when auto_allocate_ip is true.it is only applicable in openstack or aws cloud.}
		service_pool_select: ${32:# Select pool based on destination port.}
		flow_label_type: ${33:# Criteria for flow labelling.}
		type: ${34:# Specify if this is a normal virtual service, or if it is the parent or child of an sni-enabled virtual hosted virtual service.}
		enable_autogw: ${35:# Response traffic to clients will be sent back to the source mac address of the connection, rather than statically sent to a default gateway.}
		discovered_networks: ${36:# (internal-use) discovered networks providing reachability for client facing virtual service ip.}
		enabled: ${37:# Enable or disable the virtual service.}
		ipam_network_subnet: ${38:# Subnet and/or network for allocating virtualservice ip by ipam provider module.}
		static_dns_records: ${39:# List of static dns records applied to this virtual service.}
		analytics_policy: ${40:# Determines analytics settings for the application.}
		network_security_policy_ref: ${41:# Network security policies for the virtual service.}
		network_profile_ref: ${42:# Determines network settings such as protocol, tcp or udp, and related options for the protocol.}
		weight: ${43:# The quality of service weight to assign to traffic transmitted from this virtual service.}
		tenant_ref: ${44:# It is a reference to an object of type tenant.}
		remove_listening_port_on_vs_down: ${45:# Remove listening port if virtualservice is down.}
		avi_allocated_vip: ${46:# (internal-use) vip allocated by avi in the cloud infrastructure.}
		dns_info: ${47:# Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record.}
		vrf_context_ref: ${48:# Virtual routing context that the virtual service is bound to.}
		subnet: ${49:# Subnet providing reachability for client facing virtual service ip.}
		cloud_type: ${50:# Cloud_type of virtualservice.}
		vh_domain_name: ${51:# The exact name requested from the client's sni-enabled tls hello domain name field.}
		cloud_ref: ${52:# It is a reference to an object of type cloud.}
		enable_rhi: ${53:# Enable route health injection using the bgp config in the vrf context.}
		se_group_ref: ${54:# The service engine group to use for this virtual service.}
		network_ref: ${55:# Manually override the network on which the virtual service is placed.}
		scaleout_ecmp: ${56:# Disable re-distribution of flows across service engines for a virtual service.}
		state: ${57:absent|#present}
		tenant_uuid: ${58:}
		description: ${59:# User defined description for the object.}
		performance_limits: ${60:# Optional settings that determine performance limits like max connections or bandwdith etc.}
		use_bridge_ip_as_vip: ${61:# Use bridge ip as vip on each host in mesos deployments.}
		floating_ip: ${62:# Floating ip to associate with this virtual service.}
		auto_allocate_floating_ip: ${63:# Auto-allocate floating/elastic ip from the cloud infrastructure.}
		host_name_xlate: ${64:# Translate the host name sent to the servers to this value.}
		services: ${65:# List of services defined for this virtual service.}
		connections_rate_limit: ${66:# Rate limit the incoming connections to this virtual service.}
		active_standby_se_tag: ${67:# This configuration only applies if the virtualservice is in legacy active standby ha mode and load distribution among active standby is enabled.}
		server_network_profile_ref: ${68:# Determines the network settings profile for the server side of tcp proxied connections.}
		ign_pool_net_reach: ${69:# Ignore pool servers network reachability constraints for virtual service placement.}
		tenant: ${70:admin}
		limit_doser: ${71:# Limit potential dos attackers who exceed max_cps_per_client significantly to a fraction of max_cps_per_client for a while.}
		url: ${72:# Avi controller URL of the object.}
		auto_allocate_ip: ${73:# Auto-allocate vip from the provided subnet.}
		fqdn: ${74:# Dns resolvable, fully qualified domain name of the virtualservice.}
		discovered_subnet: ${75:# (internal-use) discovered subnets providing reachability for client facing virtual service ip.}
		vs_datascripts: ${76:# Datascripts applied on the data traffic of the virtual service.}
		cloud_config_cksum: ${77:# Checksum of cloud configuration for vs.}
		vh_parent_vs_uuid: ${78:# Specifies the virtual service acting as virtual hosting (sni) parent.}
$0
endsnippet

snippet get_url "Downloads files from HTTP, HTTPS, or FTP to node"
- name:
	get_url:
		dest: ${1:# absolute path of where to download the file to.}
		url: ${2:# HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path}
		force: ${3:yes|#no}
		url_username: ${4:# The username for use in HTTP basic authentication. This parameter can be used without C(url_password) for sites that allow empty passwords.}
		validate_certs: ${5:#yes|no}
		selevel: ${6:s0}
		force_basic_auth: ${7:yes|#no}
		sha256sum: ${8:# If a SHA-256 checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. This option is deprecated. Use 'checksum'.}
		others: ${9:# all arguments accepted by the M(file) module also work here}
		owner: ${10:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		url_password: ${11:# The password for use in HTTP basic authentication. If the C(url_username) parameter is not specified, the C(url_password) parameter will not be used.}
		unsafe_writes: ${12:no}
		group: ${13:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		use_proxy: ${14:#yes|no}
		checksum: ${15:# If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum>, e.g.: checksum="sha256:D98291AC[...]B6DC7B97" If you worry about portability, only the sha1 algorithm is available on all platforms and python versions.  The third party hashlib library can be installed for access to additional algorithms. Additionally, if a checksum is passed to this parameter, and the file exist under the C(dest) location, the destination_checksum would be calculated, and if checksum equals destination_checksum, the file download would be skipped (unless C(force) is true). }
		seuser: ${16:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		setype: ${17:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
		headers: ${18:# Add custom HTTP headers to a request in the format "key:value,key:value"}
		serole: ${19:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		mode: ${20:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		timeout: ${21:10}
		attributes: ${22:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		backup: ${23:yes|#no}
		tmp_dest: ${24:}
$0
endsnippet

snippet slurp "Slurps a file from remote nodes"
- name:
	slurp:
		src: ${1:# The file on the remote system to fetch. This I(must) be a file, not a directory.}
$0
endsnippet

snippet uri "Interacts with webservices"
- name:
	uri:
		url: ${1:# HTTP or HTTPS URL in the form (http|https)://host.domain[:port]/path}
		body: ${2:# The body of the http request/response to the web service. If C(body_format) is set to 'json' it will take an already formatted JSON string or convert a data structure into JSON.}
		dest: ${3:# path of where to download the file to (if desired). If I(dest) is a directory, the basename of the file on the remote server will be used.}
		follow_redirects: ${4:all|#safe|none}
		force_basic_auth: ${5:yes|#no}
		removes: ${6:# a filename, when it does not exist, this step will not be run.}
		user: ${7:# username for the module to use for Digest, Basic or WSSE authentication.}
		others: ${8:# all arguments accepted by the M(file) module also work here}
		body_format: ${9:#raw|json}
		password: ${10:# password for the module to use for Digest, Basic or WSSE authentication.}
		HEADER_: ${11:# Any parameter starting with "HEADER_" is a sent with your request as a header. For example, HEADER_Content-Type="application/json" would send the header "Content-Type" along with your request with a value of "application/json". This option is deprecated as of C(2.1) and may be removed in a future release. Use I(headers) instead.}
		creates: ${12:# a filename, when it already exists, this step will not be run.}
		headers: ${13:# Add custom HTTP headers to a request in the format of a YAML hash. As of C(2.3) supplying C(Content-Type) here will override the header generated by supplying C(json) for I(body_format).}
		timeout: ${14:30}
		status_code: ${15:200}
		return_content: ${16:yes|#no}
		validate_certs: ${17:#yes|no}
		method: ${18:#GET|POST|PUT|HEAD|DELETE|OPTIONS|PATCH|TRACE|CONNECT|REFRESH}
$0
endsnippet

snippet bigmon_chain "Create and remove a bigmon inline service chain."
- name:
	bigmon_chain:
		controller: ${1:# The controller IP address.}
		name: ${2:# The name of the chain.}
		access_token: ${3:# Bigmon access token. If this isn't set the the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.}
		state: ${4:#present|absent}
		validate_certs: ${5:#True|False}
$0
endsnippet

snippet bigmon_policy "Create and remove a bigmon out-of-band policy."
- name:
	bigmon_policy:
		name: ${1:# The name of the policy.}
		controller: ${2:# The controller address.}
		policy_description: ${3:# Description of policy.}
		access_token: ${4:# Bigmon access token. If this isn't set the the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.}
		start_time: ${5:ansible_date_time.iso8601}
		state: ${6:#present|absent}
		priority: ${7:100}
		action: ${8:#forward|drop|flow-gen}
		duration: ${9:0}
		validate_certs: ${10:#True|False}
		delivery_packet_count: ${11:0}
$0
endsnippet

snippet netscaler "Manages Citrix NetScaler entities"
- name:
	netscaler:
		name: ${1:hostname}
		nsc_host: ${2:# hostname or ip of your netscaler}
		user: ${3:# username}
		password: ${4:# password}
		type: ${5:#server|service}
		nsc_protocol: ${6:https}
		action: ${7:enable|#disable}
		validate_certs: ${8:#yes|no}
$0
endsnippet

snippet ce_command "Run arbitrary command on HUAWEI CloudEngine devices"
- name:
	ce_command:
		commands: ${1:# The commands to send to the remote HUAWEI CloudEngine device over the configured provider.  The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of I(retries) has been exceeded.}
		retries: ${2:10}
		interval: ${3:1}
		provider: ${4:# A dict object containing connection details.}
		wait_for: ${5:# Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward.   If the conditional is not true by the configured retries, the task fails.  See examples.}
		match: ${6:all}
$0
endsnippet

snippet nclu "Configure network interfaces using NCLU"
- name:
	nclu:
		commands: ${1:# A list of strings containing the net commands to run. Mutually exclusive with I(template).}
		abort: ${2:no}
		description: ${3:Ansible-originated commit}
		template: ${4:# A single, multi-line string with jinja2 formatting. This string will be broken by lines, and each line will be run through net. Mutually exclusive with I(commands).}
		commit: ${5:no}
		atomic: ${6:no}
$0
endsnippet

snippet dellos10_command "Run commands on remote devices running Dell OS10"
- name:
	dellos10_command:
		commands: ${1:# List of commands to send to the remote dellos10 device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.}
		retries: ${2:10}
		wait_for: ${3:# List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of I(retries), the task fails. See examples.}
		provider: ${4:# A dict object containing connection details.}
		interval: ${5:1}
$0
endsnippet

snippet dellos10_config "Manage Dell EMC Networking OS10 configuration sections"
- name:
	dellos10_config:
		src: ${1:# Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root dir.  This argument is mutually exclusive with I(lines).}
		config: ${2:# The playbook designer can use the C(config) argument to supply the base configuration to be used to validate necessary configuration changes.  If you specify this argument, the module does not download the running-config from the remote node.}
		after: ${3:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  As with I(before), the playbook designer can use this argument  to append a set of commands to be executed after the command set.}
		lines: ${4:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config. Note the configuration command syntax as the device config parser automatically modifies some commands. This argument is mutually exclusive with I(src).}
		update: ${5:#merge|check}
		replace: ${6:#line|block}
		parents: ${7:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If you omit the parents argument, the commands are checked against the set of top level or global commands.}
		provider: ${8:# A dict object containing connection details.}
		save: ${9:yes|no}
		backup: ${10:yes|no}
		match: ${11:#line|strict|exact|none}
		before: ${12:# The ordered set of commands to push on to the command stack if a change needs to be made.  The playbook designer can  use this argument to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
$0
endsnippet

snippet dellos10_facts "Collect facts from remote devices running Dell EMC Networking OS10"
- name:
	dellos10_facts:
		gather_subset: ${1:!config}
		provider: ${2:# A dict object containing connection details.}
$0
endsnippet

snippet dellos6_command "Run commands on remote devices running Dell OS6"
- name:
	dellos6_command:
		commands: ${1:# List of commands to send to the remote dellos6 device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of I(retries) as expired.}
		retries: ${2:10}
		wait_for: ${3:# List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of I(retries), the task fails. See examples.}
		provider: ${4:# A dict object containing connection details.}
		interval: ${5:1}
$0
endsnippet

snippet dellos6_config "Manage Dell EMC Networking OS6 configuration sections"
- name:
	dellos6_config:
		src: ${1:# Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root dir.  This argument is mutually exclusive with I(lines).}
		config: ${2:# The playbook designer can use the C(config) argument to supply the base configuration to be used to validate necessary configuration changes.  If you specify this argument, the module does not download the running-config from the remote node.}
		after: ${3:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  As with I(before), the playbook desinger can use this to append a set of commands to be executed after the command set.}
		lines: ${4:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config. Note the configuration command syntax as the device config parser automatically modifies some commands. This argument is mutually exclusive with I(src).}
		update: ${5:#merge|check}
		replace: ${6:#line|block}
		parents: ${7:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If you do not specify the parents argument, the commands are checked against the set of top level or global commands.}
		provider: ${8:# A dict object containing connection details.}
		save: ${9:yes|no}
		backup: ${10:yes|no}
		match: ${11:#line|strict|exact|none}
		before: ${12:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
$0
endsnippet

snippet dellos6_facts "Collect facts from remote devices running Dell EMC Networking OS6"
- name:
	dellos6_facts:
		gather_subset: ${1:!config}
		provider: ${2:# A dict object containing connection details.}
$0
endsnippet

snippet dellos9_command "Run commands on remote devices running Dell OS9"
- name:
	dellos9_command:
		commands: ${1:# List of commands to send to the remote dellos9 device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.}
		retries: ${2:10}
		wait_for: ${3:# List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of I(retries), the task fails. See examples.}
		provider: ${4:# A dict object containing connection details.}
		interval: ${5:1}
$0
endsnippet

snippet dellos9_config "Manage Dell EMC Networking OS9 configuration sections"
- name:
	dellos9_config:
		src: ${1:# Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root dir.  This argument is mutually exclusive with I(lines).}
		config: ${2:# The playbook designer can use the  C(config) argument to supply the base configuration to be used to validate necessary configuration changes.  If you provide this argument, the module does not download the running-config from the remote node.}
		after: ${3:# The ordered set of commands to append to the end of the command stack if a change needs to be made. As with I(before), this the playbook designer can append a set of commands to be executed after the command set.}
		lines: ${4:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config. Note the configuration command syntax as the device config parser automatically modifies some commands. This argument is mutually exclusive with I(src).}
		update: ${5:#merge|check}
		replace: ${6:#line|block}
		parents: ${7:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If you omit the parents argument, the commands are checked against the set of top level or global commands.}
		provider: ${8:# A dict object containing connection details.}
		save: ${9:yes|no}
		backup: ${10:yes|no}
		match: ${11:#line|strict|exact|none}
		before: ${12:# The ordered set of commands to push on to the command stack if a change needs to be made.  The playbook designer can use this opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
$0
endsnippet

snippet dellos9_facts "Collect facts from remote devices running Dell EMC Networking OS9"
- name:
	dellos9_facts:
		gather_subset: ${1:!config}
		provider: ${2:# A dict object containing connection details.}
$0
endsnippet

snippet eos_banner "Manage multiline banners on Arista EOS devices"
- name:
	eos_banner:
		banner: ${1:login|banner}
		authorize: ${2:yes|no}
		state: ${3:#present|absent}
		provider: ${4:# A dict object containing connection details.}
		text: ${5:# The banner text that should be present in the remote device running configuration.  This argument accepts a multiline string. Requires I(state=present).}
		auth_pass: ${6:none}
$0
endsnippet

snippet eos_command "Run arbitrary commands on an Arista EOS device"
- name:
	eos_command:
		commands: ${1:# The commands to send to the remote EOS device over the configured provider.  The resulting output from the command is returned.  If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of I(retries) has been exceeded.}
		authorize: ${2:yes|no}
		retries: ${3:10}
		auth_pass: ${4:none}
		interval: ${5:1}
		provider: ${6:# A dict object containing connection details.}
		wait_for: ${7:# Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward.   If the conditional is not true by the configured retries, the task fails.  See examples.}
		match: ${8:any|#all}
$0
endsnippet

snippet eos_config "Manage Arista EOS configuration sections"
- name:
	eos_config:
		authorize: ${1:yes|no}
		src: ${2:# The I(src) argument provides a path to the configuration file to load into the remote system.  The path can either be a full system path to the configuration file if the value starts with / or relative to the root of the implemented role or playbook. This argument is mutually exclusive with the I(lines) and I(parents) arguments.}
		auth_pass: ${3:none}
		force: ${4:yes|no}
		backup: ${5:yes|no}
		after: ${6:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.}
		lines: ${7:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.}
		replace: ${8:#line|block|config}
		parents: ${9:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.}
		defaults: ${10:no}
		provider: ${11:# A dict object containing connection details.}
		save: ${12:no}
		config: ${13:# The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.}
		match: ${14:#line|strict|exact|none}
		before: ${15:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
$0
endsnippet

snippet eos_eapi "Manage and configure Arista EOS eAPI."
- name:
	eos_eapi:
		authorize: ${1:yes|no}
		local_http_port: ${2:8080}
		http_port: ${3:80}
		http: ${4:yes|no}
		https_port: ${5:443}
		auth_pass: ${6:none}
		state: ${7:#started|stopped}
		vrf: ${8:default}
		https: ${9:yes|no}
		provider: ${10:# A dict object containing connection details.}
		config: ${11:nul}
		local_http: ${12:yes|no}
		socket: ${13:yes|no}
$0
endsnippet

snippet eos_facts "Collect facts from remote devices running Arista EOS"
- name:
	eos_facts:
		authorize: ${1:yes|no}
		auth_pass: ${2:none}
		gather_subset: ${3:!config}
		provider: ${4:# A dict object containing connection details.}
$0
endsnippet

snippet eos_system "Manage the system attributes on Arista EOS devices"
- name:
	eos_system:
		authorize: ${1:yes|no}
		state: ${2:#present|absent}
		auth_pass: ${3:none}
		provider: ${4:# A dict object containing connection details.}
		lookup_source: ${5:# Provides one or more source interfaces to use for performing DNS lookups.  The interface provided in C(lookup_source) can only exist in a single VRF.  This argument accepts either a list of interface names or a list of hashes that configure the interface name and VRF name.  See examples.}
		name_servers: ${6:# List of DNS name servers by IP address to use to perform name resolution lookups.  This argument accepts either a list of DNS servers or a list of hashes that configure the name server and VRF name.  See examples.}
		domain_search: ${7:# Provides the list of domain suffixes to append to the hostname for the purpose of doing name resolution. This argument accepts a list of names and will be reconciled with the current active configuration on the running node.}
		hostname: ${8:# Configure the device hostname parameter. This option takes an ASCII string value.}
		domain_name: ${9:# Configure the IP domain name on the remote device to the provided value. Value should be in the dotted name form and will be appended to the C(hostname) to create a fully-qualified domain name.}
$0
endsnippet

snippet eos_user "Manage the collection of local users on EOS devices"
- name:
	eos_user:
		username: ${1:# The username to be configured on the remote Arista EOS device.  This argument accepts a stringv value and is mutually exclusive with the C(users) argument.}
		authorize: ${2:yes|no}
		update_password: ${3:on_create|#always}
		users: ${4:# The set of username objects to be configured on the remote Arista EOS device.  The list entries can either be the username or a hash of username and properties.  This argument is mutually exclusive with the C(username) argument.}
		auth_pass: ${5:none}
		purge: ${6:no}
		privilege: ${7:# The C(privilege) argument configures the privilege level of the user when logged into the system.  This argument accepts integer values in the range of 1 to 15.}
		state: ${8:#present|absent}
		role: ${9:# Configures the role for the username in the device running configuration.  The argument accepts a string value defining the role name.  This argument does not check if the role has been configured on the device.}
		provider: ${10:# A dict object containing connection details.}
		nopassword: ${11:# Defines the username without assigning a password.  This will allow the user to login to the system without being authenticated by a password.}
		sshkey: ${12:# Specifies the SSH public key to configure for the given username.  This argument accepts a valid SSH key value.}
$0
endsnippet

snippet exo_dns_domain "Manages domain records on Exoscale DNS API."
- name:
	exo_dns_domain:
		name: ${1:# Name of the record.}
		state: ${2:#present|absent}
		api_key: ${3:# API key of the Exoscale DNS API.}
		api_secret: ${4:# Secret key of the Exoscale DNS API.}
		api_timeout: ${5:10}
		validate_certs: ${6:yes}
		api_region: ${7:cloudstack}
$0
endsnippet

snippet exo_dns_record "Manages DNS records on Exoscale DNS."
- name:
	exo_dns_record:
		domain: ${1:# Domain the record is related to.}
		multiple: ${2:# Whether there are more than one records with similar C(name).}
		name: ${3:}
		prio: ${4:# Priority of the record.}
		api_secret: ${5:# Secret key of the Exoscale DNS API.}
		api_timeout: ${6:10}
		api_region: ${7:cloudstack}
		content: ${8:# Content of the record.}
		record_type: ${9:#A|ALIAS|CNAME|MX|SPF|URL|TXT|NS|SRV|NAPTR|PTR|AAAA|SSHFP|HINFO|POOL}
		state: ${10:#present|absent}
		ttl: ${11:3600}
		api_key: ${12:# API key of the Exoscale DNS API.}
		validate_certs: ${13:yes}
$0
endsnippet

snippet bigip_device_dns "Manage BIG-IP device DNS settings"
- name:
	bigip_device_dns:
		server: ${1:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${2:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${3:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		search: ${4:# A list of domains that the system searches for local domain lookups, to resolve local host names.}
		cache: ${5:enable|#disable}
		ip_version: ${6:4|6}
		state: ${7:absent|#present}
		server_port: ${8:443}
		forwarders: ${9:# A list of BIND servers that the system can use to perform DNS lookups}
		name_servers: ${10:# A list of name serverz that the system uses to validate DNS lookups}
		validate_certs: ${11:#True|False}
$0
endsnippet

snippet bigip_device_ntp "Manage NTP servers on a BIG-IP"
- name:
	bigip_device_ntp:
		server: ${1:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${2:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${3:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		ntp_servers: ${4:[]}
		state: ${5:absent|#present}
		server_port: ${6:443}
		timezone: ${7:UTC}
		validate_certs: ${8:#True|False}
$0
endsnippet

snippet bigip_device_sshd "Manage the SSHD settings of a BIG-IP"
- name:
	bigip_device_sshd:
		server: ${1:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${2:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${3:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		log_level: ${4:debug|debug1|debug2|debug3|error|fatal|info|quiet|verbose}
		server_port: ${5:443}
		banner_text: ${6:# Specifies the text to include on the pre-login banner that displays when a user attempts to login to the system using SSH.}
		validate_certs: ${7:#True|False}
		allow: ${8:all|IP address, such as 172.27.1.10|IP range, such as 172.27.*.* or 172.27.0.0/255.255.0.0}
		inactivity_timeout: ${9:# Specifies the number of seconds before inactivity causes an SSH session to log out.}
		login: ${10:enabled|disabled}
		banner: ${11:enabled|disabled}
		port: ${12:# Port that you want the SSH daemon to run on.}
$0
endsnippet

snippet bigip_facts "Collect facts from F5 BIG-IP devices"
- name:
	bigip_facts:
		password: ${1:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		server: ${2:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${3:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		include: ${4:address_class|certificate|client_ssl_profile|device|device_group|interface|key|node|pool|provision|rule|self_ip|software|system_info|traffic_group|trunk|virtual_address|virtual_server|vlan}
		filter: ${5:}
		session: ${6:}
		server_port: ${7:443}
		validate_certs: ${8:#True|False}
$0
endsnippet

snippet bigip_gtm_datacenter "Manage Datacenter configuration in BIG-IP"
- name:
	bigip_gtm_datacenter:
		user: ${1:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		server: ${2:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		password: ${3:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		name: ${4:# The name of the data center.}
		description: ${5:# The description of the data center.}
		enabled: ${6:True|False}
		state: ${7:present|absent}
		contact: ${8:# The name of the contact for the data center.}
		location: ${9:# The location of the data center.}
		server_port: ${10:443}
		validate_certs: ${11:#True|False}
$0
endsnippet

snippet bigip_gtm_facts "Collect facts from F5 BIG-IP GTM devices."
- name:
	bigip_gtm_facts:
		password: ${1:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		user: ${2:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		include: ${3:pool|wide_ip|virtual_server}
		server: ${4:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		filter: ${5:# Perform regex filter of response. Filtering is done on the name of the resource. Valid filters are anything that can be provided to Python's C(re) module.}
		server_port: ${6:443}
		validate_certs: ${7:#True|False}
$0
endsnippet

snippet bigip_gtm_virtual_server "Manages F5 BIG-IP GTM virtual servers"
- name:
	bigip_gtm_virtual_server:
		virtual_server_name: ${1:# Virtual server name}
		server: ${2:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${3:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${4:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		virtual_server_server: ${5:# Virtual server server}
		validate_certs: ${6:#True|False}
		state: ${7:#present|absent|enabled|disabled}
		host: ${8:# Virtual server host}
		server_port: ${9:443}
		port: ${10:# Virtual server port}
$0
endsnippet

snippet bigip_gtm_wide_ip "Manages F5 BIG-IP GTM wide ip"
- name:
	bigip_gtm_wide_ip:
		lb_method: ${1:return_to_dns|null|round_robin|ratio|topology|static_persist|global_availability|vs_capacity|least_conn|lowest_rtt|lowest_hops|packet_rate|cpu|hit_ratio|qos|bps|drop_packet|explicit_ip|connection_rate|vs_score}
		user: ${2:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${3:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		wide_ip: ${4:# Wide IP name}
		server: ${5:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		server_port: ${6:443}
		validate_certs: ${7:#True|False}
$0
endsnippet

snippet bigip_hostname "Manage the hostname of a BIG-IP."
- name:
	bigip_hostname:
		password: ${1:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		user: ${2:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		hostname: ${3:# Hostname of the BIG-IP host.}
		server: ${4:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		server_port: ${5:443}
		validate_certs: ${6:#True|False}
$0
endsnippet

snippet bigip_irule "Manage iRules across different modules on a BIG-IP."
- name:
	bigip_irule:
		src: ${1:# The iRule file to interpret and upload to the BIG-IP. Either one of C(src) or C(content) must be provided.}
		name: ${2:# The name of the iRule.}
		module: ${3:ltm|gtm}
		server: ${4:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${5:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${6:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		partition: ${7:Common}
		content: ${8:# When used instead of 'src', sets the contents of an iRule directly to the specified value. This is for simple values, but can be used with lookup plugins for anything complex or with formatting. Either one of C(src) or C(content) must be provided.}
		state: ${9:#present|absent}
		server_port: ${10:443}
		validate_certs: ${11:#True|False}
$0
endsnippet

snippet bigip_monitor_http "Manages F5 BIG-IP LTM http monitors"
- name:
	bigip_monitor_http:
		password: ${1:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		name: ${2:# Monitor name}
		receive: ${3:none}
		send: ${4:none}
		server: ${5:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${6:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		receive_disable: ${7:none}
		partition: ${8:Common}
		parent: ${9:http}
		ip: ${10:none}
		interval: ${11:none}
		server_port: ${12:443}
		state: ${13:#present|absent}
		time_until_up: ${14:none}
		timeout: ${15:none}
		parent_partition: ${16:Common}
		validate_certs: ${17:#True|False}
		port: ${18:none}
$0
endsnippet

snippet bigip_monitor_tcp "Manages F5 BIG-IP LTM tcp monitors"
- name:
	bigip_monitor_tcp:
		password: ${1:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		name: ${2:# Monitor name}
		receive: ${3:none}
		send: ${4:none}
		server: ${5:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${6:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		partition: ${7:Common}
		parent: ${8:#tcp|tcp_echo|tcp_half_open}
		ip: ${9:none}
		interval: ${10:none}
		server_port: ${11:443}
		validate_certs: ${12:#True|False}
		state: ${13:#present|absent}
		time_until_up: ${14:none}
		timeout: ${15:none}
		parent_partition: ${16:Common}
		type: ${17:TTYPE_TCP|TTYPE_TCP_ECHO|TTYPE_TCP_HALF_OPEN}
		port: ${18:none}
$0
endsnippet

snippet bigip_node "Manages F5 BIG-IP LTM nodes"
- name:
	bigip_node:
		password: ${1:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		state: ${2:#present|absent}
		server: ${3:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		host: ${4:}
		user: ${5:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		session_state: ${6:enabled|disabled}
		name: ${7:}
		monitor_state: ${8:enabled|disabled}
		partition: ${9:}
		monitor_type: ${10:and_list|m_of_n}
		server_port: ${11:443}
		quorum: ${12:}
		validate_certs: ${13:#True|False}
		monitors: ${14:}
		description: ${15:}
$0
endsnippet

snippet bigip_pool "Manages F5 BIG-IP LTM pools"
- name:
	bigip_pool:
		name: ${1:}
		server: ${2:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${3:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${4:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		lb_method: ${5:#round_robin|ratio_member|least_connection_member|observed_member|predictive_member|ratio_node_address|least_connection_node_address|fastest_node_address|observed_node_address|predictive_node_address|dynamic_ratio|fastest_app_response|least_sessions|dynamic_ratio_member|l3_addr|weighted_least_connection_member|weighted_least_connection_node_address|ratio_session|ratio_least_connection_member|ratio_least_connection_node_address}
		description: ${6:# Specifies descriptive text that identifies the pool.}
		partition: ${7:}
		slow_ramp_time: ${8:}
		state: ${9:#present|absent}
		service_down_action: ${10:none|reset|drop|reselect}
		reselect_tries: ${11:}
		port: ${12:}
		monitor_type: ${13:and_list|m_of_n}
		host: ${14:}
		server_port: ${15:443}
		validate_certs: ${16:#True|False}
		monitors: ${17:}
		quorum: ${18:}
$0
endsnippet

snippet bigip_pool_member "Manages F5 BIG-IP LTM pool members"
- name:
	bigip_pool_member:
		state: ${1:#present|absent}
		server: ${2:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		host: ${3:# Pool member IP}
		user: ${4:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${5:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		port: ${6:# Pool member port}
		pool: ${7:# Pool name. This pool must exist.}
		session_state: ${8:enabled|disabled}
		ratio: ${9:# Pool member ratio weight. Valid values range from 1 through 100. New pool members -- unless overridden with this value -- default to 1.}
		description: ${10:# Pool member description}
		monitor_state: ${11:enabled|disabled}
		partition: ${12:Common}
		connection_limit: ${13:# Pool member connection limit. Setting this to 0 disables the limit.}
		preserve_node: ${14:True|False}
		server_port: ${15:443}
		rate_limit: ${16:# Pool member rate limit (connections-per-second). Setting this to 0 disables the limit.}
		validate_certs: ${17:#True|False}
$0
endsnippet

snippet bigip_routedomain "Manage route domains on a BIG-IP"
- name:
	bigip_routedomain:
		password: ${1:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		server: ${2:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		id: ${3:# The unique identifying integer representing the route domain.}
		user: ${4:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		flow_eviction_policy: ${5:# The eviction policy to use with this route domain. Apply an eviction policy to provide customized responses to flow overflows and slow flows on the route domain.}
		service_policy: ${6:# Service policy to associate with the route domain.}
		description: ${7:# Specifies descriptive text that identifies the route domain.}
		parent: ${8:# S}
		connection_limit: ${9:# The maximum number of concurrent connections allowed for the route domain. Setting this to C(0) turns off connection limits.}
		strict: ${10:enabled|disabled}
		state: ${11:#present|absent}
		routing_protocol: ${12:BFD|BGP|IS-IS|OSPFv2|OSPFv3|PIM|RIP|RIPng}
		server_port: ${13:443}
		bwc_policy: ${14:# The bandwidth controller for the route domain.}
		vlans: ${15:# VLANs for the system to use in the route domain}
		validate_certs: ${16:#True|False}
$0
endsnippet

snippet bigip_selfip "Manage Self-IPs on a BIG-IP system"
- name:
	bigip_selfip:
		name: ${1:Value of C(address)}
		vlan: ${2:# The VLAN that the new self IPs will be on.}
		netmask: ${3:# The netmasks for the self IP.}
		server: ${4:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${5:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${6:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		allow_service: ${7:# Configure port lockdown for the Self IP. By default, the Self IP has a "default deny" policy. This can be changed to allow TCP and UDP ports as well as specific protocols. This list should contain C(protocol):C(port) values.}
		state: ${8:absent|#present}
		route_domain: ${9:none}
		server_port: ${10:443}
		address: ${11:# The IP addresses for the new self IP. This value is ignored upon update as addresses themselves cannot be changed after they are created.}
		traffic_group: ${12:# The traffic group for the self IP addresses in an active-active, redundant load balancer configuration.}
		validate_certs: ${13:#True|False}
$0
endsnippet

snippet bigip_snat_pool "Manage SNAT pools on a BIG-IP."
- name:
	bigip_snat_pool:
		name: ${1:# T}
		server: ${2:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${3:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${4:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		server_port: ${5:443}
		state: ${6:#present|absent}
		members: ${7:# List of members to put in the SNAT pool. When a C(state) of present is provided, this parameter is required. Otherwise, it is optional.}
		validate_certs: ${8:#True|False}
		append: ${9:True|#False}
$0
endsnippet

snippet bigip_ssl_certificate "Import/Delete certificates from BIG-IP"
- name:
	bigip_ssl_certificate:
		name: ${1:# SSL Certificate Name.  This is the cert/key pair name used when importing a certificate/key into the F5. It also determines the filenames of the objects on the LTM (:Partition:name.cer_11111_1 and :Partition_name.key_11111_1).}
		server: ${2:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		state: ${3:#present|absent}
		user: ${4:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${5:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		validate_certs: ${6:#True|False}
		key_content: ${7:# When used instead of 'key_src', sets the contents of a certificate key directly to the specified value. This is used with lookup plugins or for anything with formatting or templating. Either one of C(key_src), C(key_content), C(cert_src) or C(cert_content) must be provided when C(state) is C(present).}
		partition: ${8:Common}
		server_port: ${9:443}
		cert_src: ${10:# This is the local filename of the certificate. Either one of C(key_src), C(key_content), C(cert_src) or C(cert_content) must be provided when C(state) is C(present).}
		passphrase: ${11:# Passphrase on certificate private key}
		cert_content: ${12:# When used instead of 'cert_src', sets the contents of a certificate directly to the specified value. This is used with lookup plugins or for anything with formatting or templating. Either one of C(key_src), C(key_content), C(cert_src) or C(cert_content) must be provided when C(state) is C(present).}
		key_src: ${13:# This is the local filename of the private key. Either one of C(key_src), C(key_content), C(cert_src) or C(cert_content) must be provided when C(state) is C(present).}
$0
endsnippet

snippet bigip_sys_db "Manage BIG-IP system database variables"
- name:
	bigip_sys_db:
		server: ${1:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${2:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		key: ${3:# The database variable to manipulate.}
		password: ${4:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		server_port: ${5:443}
		value: ${6:# The value to set the key to. At least one of value and state C(reset) are required.}
		state: ${7:#present|reset}
		validate_certs: ${8:#True|False}
$0
endsnippet

snippet bigip_sys_global "Manage BIG-IP global settings."
- name:
	bigip_sys_global:
		server: ${1:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${2:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${3:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		security_banner: ${4:enabled|disabled}
		net_reboot: ${5:enabled|disabled}
		banner_text: ${6:# Specifies the text to present in the advisory banner.}
		console_timeout: ${7:# Specifies the number of seconds of inactivity before the system logs off a user that is logged on.}
		quiet_boot: ${8:# Specifies, when C(enabled), that the system suppresses informational text on the console during the boot cycle. When C(disabled), the system presents messages and informational text on the console during the boot cycle.}
		mgmt_dhcp: ${9:enabled|disabled}
		state: ${10:#present}
		server_port: ${11:443}
		gui_setup: ${12:enabled|disabled}
		validate_certs: ${13:#True|False}
		lcd_display: ${14:enabled|disabled}
$0
endsnippet

snippet bigip_virtual_server "Manages F5 BIG-IP LTM virtual servers"
- name:
	bigip_virtual_server:
		user: ${1:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		destination: ${2:# Destination IP of the virtual server (only host is currently supported). Required when state=present and vs does not exist.}
		name: ${3:# Virtual server name}
		server: ${4:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		password: ${5:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		route_advertisement_state: ${6:disabled}
		fallback_persistence_profile: ${7:# Specifies the persistence profile you want the system to use if it cannot use the specified default persistence profile.}
		validate_certs: ${8:#True|False}
		default_persistence_profile: ${9:# Default Profile which manages the session persistence}
		partition: ${10:Common}
		all_profiles: ${11:# List of all Profiles (HTTP,ClientSSL,ServerSSL,etc) that must be used by the virtual server}
		all_rules: ${12:# List of rules to be applied in priority order}
		enabled_vlans: ${13:# List of vlans to be enabled. When a VLAN named C(ALL) is used, all VLANs will be allowed.}
		state: ${14:#present|absent|enabled|disabled}
		all_policies: ${15:# List of all policies enabled for the virtual server.}
		server_port: ${16:443}
		snat: ${17:#None|Automap|Name of a SNAT pool (eg "/Common/snat_pool_name") to enable SNAT with the specific pool}
		port: ${18:# Port of the virtual server. Required when state=present and vs does not exist. If you specify a value for this field, it must be a number between 0 and 65535.}
		pool: ${19:# Default pool for the virtual server}
		description: ${20:# Virtual server description}
$0
endsnippet

snippet bigip_vlan "Manage VLANs on a BIG-IP system"
- name:
	bigip_vlan:
		name: ${1:# The VLAN to manage. If the special VLAN C(ALL) is specified with the C(state) value of C(absent) then all VLANs will be removed.}
		server: ${2:# The BIG-IP host. This option can be omitted if the environment variable C(F5_SERVER) is set.}
		user: ${3:# The username to connect to the BIG-IP with. This user must have administrative privileges on the device. This option can be omitted if the environment variable C(F5_USER) is set.}
		password: ${4:# The password for the user account used to connect to the BIG-IP. This option can be omitted if the environment variable C(F5_PASSWORD) is set.}
		untagged_interfaces: ${5:# Specifies a list of untagged interfaces and trunks that you want to configure for the VLAN.}
		server_port: ${6:443}
		state: ${7:absent|#present}
		tag: ${8:# Tag number for the VLAN. The tag number can be any integer between 1 and 4094. The system automatically assigns a tag number if you do not specify a value.}
		tagged_interfaces: ${9:# Specifies a list of tagged interfaces and trunks that you want to configure for the VLAN. Use tagged interfaces or trunks when you want to assign a single interface or trunk to multiple VLANs.}
		validate_certs: ${10:#True|False}
		description: ${11:# The description to give to the VLAN.}
$0
endsnippet

snippet fortios_config "Manage fortios firewall config"
- name:
	fortios_config:
		username: ${1:# Configures the username used to authenticate to the remote device.}
		host: ${2:# Specifies the DNS hostname or IP address for connecting to the remote fortios device.}
		password: ${3:# Specifies the password used to authenticate to the remote device.}
		src: ${4:# The I(src) argument provides a path to the configuration file to load into the remote device.}
		backup_path: ${5:# Specifies where to store backup files. Required if I(backup=yes).}
		filter: ${6:}
		backup_filename: ${7:# Specifies the backup filename. If omitted filename will be formated like HOST_config.YYYY-MM-DD@HH:MM:SS}
		timeout: ${8:60}
		backup: ${9:yes|no}
		vdom: ${10:# Specifies on which vdom to apply configuration}
$0
endsnippet

snippet fortios_ipv4_policy "Manage fortios firewall IPv4 policy objects"
- name:
	fortios_ipv4_policy:
		username: ${1:# Configures the username used to authenticate to the remote device.}
		host: ${2:# Specifies the DNS hostname or IP address for connecting to the remote fortios device.}
		password: ${3:# Specifies the password used to authenticate to the remote device.}
		id: ${4:# Policy ID. Warning: policy ID number is different than Policy sequence number. The policy ID is the number assigned at policy creation. The sequence number represents the order in which the Fortigate will evaluate the rule for policy enforcement, and also the order in which rules are listed in the GUI and CLI. These two numbers do not necessarily correlate: this module is based off policy ID. TIP: policy ID can be viewed in the GUI by adding 'ID' to the display columns}
		comment: ${5:# free text to describe policy.}
		timeout: ${6:60}
		schedule: ${7:always}
		application_list: ${8:# Specifies Application Control name.}
		src_intf: ${9:any}
		service_negate: ${10:true|false}
		ips_sensor: ${11:# Specifies IPS Sensor profile name.}
		dst_addr_negate: ${12:true|false}
		backup_filename: ${13:# Specifies the backup filename. If omitted filename will be formated like HOST_config.YYYY-MM-DD@HH:MM:SS}
		fixedport: ${14:true|false}
		backup_path: ${15:# Specifies where to store backup files. Required if I(backup=yes).}
		webfilter_profile: ${16:# Specifies Webfilter profile name.}
		src_addr: ${17:# Specifies source address (or group) object name(s). Required when I(state=present).}
		service: ${18:# Specifies policy service(s), could be a list (ex: ['MAIL','DNS']). Required when I(state=present).}
		poolname: ${19:# Specifies NAT pool name.}
		policy_action: ${20:accept|deny}
		dst_intf: ${21:any}
		av_profile: ${22:# Specifies Antivirus profile name.}
		state: ${23:#present|absent}
		vdom: ${24:# Specifies on which vdom to apply configuration}
		nat: ${25:true|false}
		src_addr_negate: ${26:true|false}
		backup: ${27:yes|no}
		dst_addr: ${28:# Specifies destination address (or group) object name(s). Required when I(state=present).}
$0
endsnippet

snippet dladm_etherstub "Manage etherstubs on Solaris/illumos systems."
- name:
	dladm_etherstub:
		name: ${1:# Etherstub name.}
		state: ${2:#present|absent}
		temporary: ${3:true|false}
$0
endsnippet

snippet dladm_iptun "Manage IP tunnel interfaces on Solaris/illumos systems."
- name:
	dladm_iptun:
		name: ${1:# IP tunnel interface name.}
		state: ${2:#present|absent}
		temporary: ${3:no}
		local_address: ${4:# Literat IP address or hostname corresponding to the tunnel source.}
		type: ${5:#ipv4|ipv6|6to4}
		remote_address: ${6:# Literal IP address or hostname corresponding to the tunnel destination.}
$0
endsnippet

snippet dladm_linkprop "Manage link properties on Solaris/illumos systems."
- name:
	dladm_linkprop:
		link: ${1:# Link interface name.}
		property: ${2:# Specifies the name of the property we want to manage.}
		state: ${3:#present|absent|reset}
		temporary: ${4:no}
		value: ${5:# Specifies the value we want to set for the link property.}
$0
endsnippet

snippet dladm_vlan "Manage VLAN interfaces on Solaris/illumos systems."
- name:
	dladm_vlan:
		link: ${1:# VLAN underlying link name.}
		name: ${2:# VLAN interface name.}
		state: ${3:#present|absent}
		temporary: ${4:no}
		vlan_id: ${5:no}
$0
endsnippet

snippet dladm_vnic "Manage VNICs on Solaris/illumos systems."
- name:
	dladm_vnic:
		name: ${1:# VNIC name.}
		link: ${2:# VNIC underlying link name.}
		state: ${3:#present|absent}
		temporary: ${4:true|false}
		vlan: ${5:no}
		mac: ${6:no}
$0
endsnippet

snippet flowadm "Manage bandwidth resource control and priority for protocols, services and zones."
- name:
	flowadm:
		name: ${1:# -}
		dsfield: ${2:# -}
		temporary: ${3:true|false}
		maxbw: ${4:# -}
		local_port: ${5:# Identifies a service specified by the local port.}
		local_ip: ${6:# Identifies a network flow by the local IP address.}
		remove_ip: ${7:# Identifies a network flow by the remote IP address.}
		priority: ${8:low|#medium|high}
		state: ${9:absent|#present|resetted}
		link: ${10:# Specifiies a link to configure flow on.}
		transport: ${11:# -}
$0
endsnippet

snippet ipadm_addr "Manage IP addresses on an interface."
- name:
	ipadm_addr:
		addrobj: ${1:# Specifies an unique IP address on the system.}
		addrtype: ${2:#static|dhcp|addrconf}
		state: ${3:absent|#present|up|down|enabled|disabled|refreshed}
		temporary: ${4:no}
		address: ${5:# Specifiies an IP address to configure in CIDR notation.}
		wait: ${6:60}
$0
endsnippet

snippet ipadm_addrprop "Manage IP address properties on Solaris/illumos systems."
- name:
	ipadm_addrprop:
		property: ${1:# Specifies the name of the address property we want to manage.}
		addrobj: ${2:# Specifies the address object we want to manage.}
		state: ${3:#present|absent|reset}
		temporary: ${4:no}
		value: ${5:# Specifies the value we want to set for the address property.}
$0
endsnippet

snippet ipadm_if "Manage IP interfaces  on Solaris/illumos systems."
- name:
	ipadm_if:
		name: ${1:# IP interface name.}
		state: ${2:#present|absent|enabled|disabled}
		temporary: ${3:true|false}
$0
endsnippet

snippet ipadm_ifprop "Manage IP interface properties on Solaris/illumos systems."
- name:
	ipadm_ifprop:
		interface: ${1:# Specifies the IP interface we want to manage.}
		protocol: ${2:# Specifies the procotol for which we want to manage properties.}
		property: ${3:# Specifies the name of the property we want to manage.}
		state: ${4:#present|absent|reset}
		temporary: ${5:no}
		value: ${6:# Specifies the value we want to set for the property.}
$0
endsnippet

snippet ipadm_prop "Manage protocol properties on Solaris/illumos systems."
- name:
	ipadm_prop:
		protocol: ${1:# Specifies the procotol for which we want to manage properties.}
		property: ${2:# Specifies the name of property we want to manage.}
		state: ${3:#present|absent|reset}
		temporary: ${4:true|false}
		value: ${5:# Specifies the value we want to set for the property.}
$0
endsnippet

snippet ios_banner "Manage multiline banners on Cisco IOS devices"
- name:
	ios_banner:
		banner: ${1:login|banner}
		authorize: ${2:yes|no}
		state: ${3:#present|absent}
		provider: ${4:# A dict object containing connection details.}
		text: ${5:# The banner text that should be present in the remote device running configuration.  This argument accepts a multiline string. Requires I(state=present).}
		auth_pass: ${6:none}
$0
endsnippet

snippet ios_command "Run commands on remote devices running Cisco IOS"
- name:
	ios_command:
		commands: ${1:# List of commands to send to the remote ios device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.}
		authorize: ${2:yes|no}
		retries: ${3:10}
		auth_pass: ${4:none}
		interval: ${5:1}
		provider: ${6:# A dict object containing connection details.}
		wait_for: ${7:# List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.}
		match: ${8:any|#all}
$0
endsnippet

snippet ios_config "Manage Cisco IOS configuration sections"
- name:
	ios_config:
		multiline_delimiter: ${1:@}
		src: ${2:# Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines).}
		auth_pass: ${3:none}
		force: ${4:true|false}
		backup: ${5:yes|no}
		after: ${6:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.}
		lines: ${7:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.}
		authorize: ${8:yes|no}
		replace: ${9:#line|block}
		parents: ${10:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.}
		defaults: ${11:yes|no}
		provider: ${12:# A dict object containing connection details.}
		save: ${13:yes|no}
		config: ${14:# The C(config) argument allows the playbook designer to supply the base configuration to be used to validate configuration changes necessary.  If this argument is provided, the module will not download the running-config from the remote node.}
		match: ${15:#line|strict|exact|none}
		before: ${16:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
$0
endsnippet

snippet ios_facts "Collect facts from remote devices running IOS"
- name:
	ios_facts:
		authorize: ${1:yes|no}
		auth_pass: ${2:none}
		gather_subset: ${3:!config}
		provider: ${4:# A dict object containing connection details.}
$0
endsnippet

snippet ios_system "Manage the system attributes on Cisco IOS devices"
- name:
	ios_system:
		authorize: ${1:yes|no}
		state: ${2:#present|absent}
		auth_pass: ${3:none}
		provider: ${4:# A dict object containing connection details.}
		lookup_source: ${5:# Provides one or more source interfaces to use for performing DNS lookups.  The interface provided in C(lookup_source) must be a valid interface configured on the device.}
		name_servers: ${6:# List of DNS name servers by IP address to use to perform name resolution lookups.  This argument accepts either a list of DNS servers See examples.}
		domain_search: ${7:# Provides the list of domain suffixes to append to the hostname for the purpose of doing name resolution. This argument accepts a list of names and will be reconciled with the current active configuration on the running node.}
		hostname: ${8:# Configure the device hostname parameter. This option takes an ASCII string value.}
		domain_name: ${9:# Configure the IP domain name on the remote device to the provided value. Value should be in the dotted name form and will be appended to the C(hostname) to create a fully-qualified domain name.}
		lookup_enabled: ${10:# Administrative control for enabling or disabling DNS lookups.  When this argument is set to True, lookups are performed and when it is set to False, lookups are not performed.}
$0
endsnippet

snippet ios_vrf "Manage the collection of VRF definitions on IOS devices"
- name:
	ios_vrf:
		purge: ${1:no}
		rd: ${2:# The router-distinguisher value uniquely identifies the VRF to routing processes on the remote IOS system.  The RD value takes the form of C(A:B) where C(A) and C(B) are both numeric values.}
		state: ${3:#present|absent}
		description: ${4:# Provides a short description of the VRF definition in the current active configuration.  The VRF definition value accepts alphanumeric characters used to provide additional information about the VRF.}
		name: ${5:# The name of the VRF definition to be managed on the remote IOS device.  The VRF definition name is an ASCII string name used to uniquely identify the VRF.  This argument is mutually exclusive with the C(vrfs) argument}
		provider: ${6:# A dict object containing connection details.}
		interfaces: ${7:# Identifies the set of interfaces that should be configured in the VRF.  Interfaces must be routed interfaces in order to be placed into a VRF.}
		auth_pass: ${8:none}
		authorize: ${9:yes|no}
		vrfs: ${10:# The set of VRF definition objects to be configured on the remote IOS device.  Ths list entries can either be the VRF name or a hash of VRF definitions and attributes.  This argument is mutually exclusive with the C(name) argument.}
$0
endsnippet

snippet iosxr_command "Run commands on remote devices running Cisco iosxr"
- name:
	iosxr_command:
		commands: ${1:# List of commands to send to the remote iosxr device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.}
		retries: ${2:10}
		interval: ${3:1}
		provider: ${4:# A dict object containing connection details.}
		wait_for: ${5:# List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.}
		match: ${6:any|#all}
$0
endsnippet

snippet iosxr_config "Manage Cisco IOS XR configuration sections"
- name:
	iosxr_config:
		comment: ${1:configured by iosxr_config}
		src: ${2:# Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines).}
		force: ${3:yes|no}
		config: ${4:# The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.}
		after: ${5:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.}
		lines: ${6:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.}
		replace: ${7:#line|block|config}
		parents: ${8:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.}
		provider: ${9:# A dict object containing connection details.}
		backup: ${10:yes|no}
		match: ${11:#line|strict|exact|none}
		before: ${12:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
$0
endsnippet

snippet iosxr_facts "Collect facts from remote devices running IOS-XR"
- name:
	iosxr_facts:
		gather_subset: ${1:!config}
		provider: ${2:# A dict object containing connection details.}
$0
endsnippet

snippet iosxr_system "Manage the system attributes on Cisco IOS-XR devices"
- name:
	iosxr_system:
		state: ${1:#present|absent}
		provider: ${2:# A dict object containing connection details.}
		lookup_source: ${3:# The C(lookup_source) argument provides one or more source interfaces to use for performing DNS lookups.  The interface provided in C(lookup_source) must be a valid interface configured on the device.}
		name_servers: ${4:# The C(name_serves) argument accepts a list of DNS name servers by way of either FQDN or IP address to use to perform name resolution lookups.  This argument accepts wither a list of DNS servers See examples.}
		domain_search: ${5:# Provides the list of domain suffixes to append to the hostname for the purpose of doing name resolution. This argument accepts a list of names and will be reconciled with the current active configuration on the running node.}
		hostname: ${6:# Configure the device hostname parameter. This option takes an ASCII string value.}
		domain_name: ${7:# Configure the IP domain name on the remote device to the provided value. Value should be in the dotted name form and will be appended to the C(hostname) to create a fully-qualified domain name.}
		lookup_enabled: ${8:# Provides administrative control for enabling or disabling DNS lookups.  When this argument is set to True, lookups are performed and when it is set to False, lookups are not performed.}
$0
endsnippet

snippet junos_command "Run arbitrary commands on an Juniper JUNOS device"
- name:
	junos_command:
		retries: ${1:10}
		commands: ${2:# The commands to send to the remote junos device over the configured provider.  The resulting output from the command is returned.  If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of I(retries) has been exceeded.}
		wait_for: ${3:# Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward.   If the conditional is not true by the configured retries, the task fails.  See examples.}
		rpcs: ${4:# The C(rpcs) argument accepts a list of RPCs to be executed over a netconf session and the results from the RPC execution is return to the playbook via the modules results dictionary.}
		provider: ${5:# A dict object containing connection details.}
		interval: ${6:1}
		match: ${7:any|#all}
$0
endsnippet

snippet junos_config "Manage configuration on devices running Juniper JUNOS"
- name:
	junos_config:
		comment: ${1:configured by junos_config}
		src: ${2:# The I(src) argument provides a path to the configuration file to load into the remote system.  The path can either be a full system path to the configuration file if the value starts with / or relative to the root of the implemented role or playbook. This argument is mutually exclusive with the I(lines) argument.}
		rollback: ${3:# The C(rollback) argument instructs the module to rollback the current configuration to the identifier specified in the argument.  If the specified rollback identifier does not exist on the remote device, the module will fail.  To rollback to the most recent commit, set the C(rollback) argument to 0.}
		confirm: ${4:0}
		lines: ${5:# This argument takes a list of C(set) or C(delete) configuration lines to push into the remote device.  Each line must start with either C(set) or C(delete).  This argument is mutually exclusive with the I(src) argument.}
		update: ${6:#merge|override|replace}
		replace: ${7:yes|no}
		zeroize: ${8:# The C(zeroize) argument is used to completely sanitize the remote device configuration back to initial defaults.  This argument will effectively remove all current configuration statements on the remote device.}
		src_format: ${9:xml|set|text|json}
		provider: ${10:# A dict object containing connection details.}
		backup: ${11:yes|no}
$0
endsnippet

snippet junos_facts "Collect facts from remote devices running Junos"
- name:
	junos_facts:
		gather_subset: ${1:!config}
		provider: ${2:# A dict object containing connection details.}
$0
endsnippet

snippet junos_netconf "Configures the Junos Netconf system service"
- name:
	junos_netconf:
		state: ${1:#present|absent}
		provider: ${2:# A dict object containing connection details.}
		netconf_port: ${3:830}
$0
endsnippet

snippet junos_package "Installs packages on remote devices running Junos"
- name:
	junos_package:
		src: ${1:# The I(src) argument specifies the path to the source package to be installed on the remote device in the advent of a version mismatch. The I(src) argument can be either a localized path or a full path to the package file to install.}
		force: ${2:true|false}
		reboot: ${3:true|false}
		version: ${4:# The I(version) argument can be used to explicitly specify the version of the package that should be installed on the remote device.  If the I(version) argument is not specified, then the version is extracts from the I(src) filename.}
		provider: ${5:# A dict object containing connection details.}
		no_copy: ${6:true|false}
$0
endsnippet

snippet junos_rpc "Runs an arbitrary RPC on the remote device over NetConf"
- name:
	junos_rpc:
		rpc: ${1:# The C(rpc) argument specifies the RPC call to send to the remote devices to be executed.  The RPC Reply message is parsed and the contents are returned to the playbook.}
		output: ${2:xml}
		args: ${3:# The C(args) argument provides a set of arguments for the RPC call and are encoded in the request message.  This argument accepts a set of key=value arguments.}
		provider: ${4:# A dict object containing connection details.}
$0
endsnippet

snippet junos_user "Manage local user accounts on Juniper devices"
- name:
	junos_user:
		purge: ${1:no}
		state: ${2:#present|absent}
		role: ${3:operator|#read-only|super-user|unauthorized}
		sshkey: ${4:# The C(sshkey) argument defines the public SSH key to be configured for the user account on the remote system.  This argument must be a valid SSH key}
		full_name: ${5:# The C(full_name) argument provides the full name of the user account to be created on the remote device.  This argument accepts any text string value.}
		provider: ${6:# A dict object containing connection details.}
		users: ${7:# The C(users) argument defines a list of users to be configured on the remote device.  The list of users will be compared against the current users and only changes will be added or removed from the device configuration.  This argument is mutually exclusive with the name argument.}
		name: ${8:# The C(name) argument defines the username of the user to be created on the system.  This argument must follow appropriate usernaming conventions for the target device running JUNOS.  This argument is mutually exclusive with the C(users) argument.}
$0
endsnippet

snippet cnos_backup "Backup the current running or startup configuration to a remote server on devices running Lenovo CNOS"
- name:
	cnos_backup:
		serverpassword: ${1:# Specify the password for the server relating to the protocol used.}
		username: ${2:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		protocol: ${4:SFTP|SCP|FTP|TFTP}
		configType: ${5:running-config|startup-config}
		host: ${6:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		deviceType: ${7:g8272_cnos|g8296_cnos|g8332_cnos}
		serverusername: ${8:# Specify the username for the server relating to the protocol used.}
		password: ${9:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		rcserverip: ${10:# -}
		rcpath: ${11:# This specifies the full file path where the configuration file will be copied on the remote server. In case the relative path is used as the variable value, the root folder for the user of the server needs to be specified.}
		enablePassword: ${12:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_bgp "Manage BGP resources and attributes on devices running Lenovo CNOS"
- name:
	cnos_bgp:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${2:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		asNum: ${3:# AS number}
		bgpArg1: ${4:address-family|bestpath|bgp|cluster-id|confederation|enforce-first-as|fast-external-failover|graceful-restart|graceful-restart-helper|log-neighbor-changes|maxas-limit|neighbor|router-id|shutdown|synchronization|timers|vrf}
		host: ${5:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		deviceType: ${6:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${7:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		bgpArg8: ${8:Un-reachability Half-life time for the penalty(minutes)|backdoor}
		bgpArg4: ${9:Aggregate prefix|Reachability Half-life time|route-map|Distance for routes external|ebgp or ibgp|IP prefix <network>|IP prefix <network>/<length>|synchronization|Delay value|direct|ospf|static|memory}
		bgpArg5: ${10:as-set|summary-only|Value to start reusing a route|Distance for routes internal|Supported multipath numbers|backdoor|map|route-map}
		bgpArg6: ${11:summary-only|as-set|route-map name|Value to start suppressing a route|Distance for local routes|Network mask|Pointer to route-map entries}
		bgpArg7: ${12:Maximum duration to suppress a stable route(minutes)|backdoor|route-map|Name of the route map}
		bgpArg2: ${13:ipv4 or ipv6|always-compare-med|compare-confed-aspath|compare-routerid|dont-compare-originator-id|tie-break-on-age|as-path|med|identifier|peers}
		bgpArg3: ${14:aggregate-address|client-to-client|dampening|distance|maximum-paths|network|nexthop|redistribute|save|synchronization|ignore or multipath-relax|confed or missing-as-worst or non-deterministic or remove-recv-med or remove-send-med}
		enablePassword: ${15:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_command "Execute a single command on devices running Lenovo CNOS"
- name:
	cnos_command:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		host: ${2:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		deviceType: ${4:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${5:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		clicommand: ${6:# This specifies the CLI command as an attribute to this method. The command is passed using double quotes. The variables can be placed directly on to the CLI commands or can be invoked from the vars directory.}
		enablePassword: ${7:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_conditional_command "Execute a single command based on condition on devices running Lenovo CNOS"
- name:
	cnos_conditional_command:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${2:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		clicommand: ${3:# This specifies the CLI command as an attribute to this method. The command is passed using double quotes. The variables can be placed directly on to the CLI commands or can be invoked from the vars directory.}
		host: ${4:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		flag: ${5:# If a task needs to be executed, you have to set the flag the same as it is specified in the inventory for that device.}
		deviceType: ${6:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${7:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		condition: ${8:# If you specify condition=false in the inventory file against any device, the command execution is skipped for that device.}
		enablePassword: ${9:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_conditional_template "Manage switch configuration using templates based on condition on devices running Lenovo CNOS"
- name:
	cnos_conditional_template:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${2:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		host: ${3:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		flag: ${4:# If a task needs to be executed, you have to set the flag the same as it is specified in the inventory for that device.}
		deviceType: ${5:g8272_cnos|g8296_cnos|g8332_cnos}
		condition: ${6:# If you specify condition=<flag string> in the inventory file against any device, the template execution is done for that device in case it matches the flag setting for that task.}
		password: ${7:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		commandfile: ${8:# This specifies the path to the CNOS command file which needs to be applied. This usually comes from the commands folder. Generally this file is the output of the variables applied on a template file. So this command is preceded by a template module. The command file must contain the Ansible keyword {{ inventory_hostname }} and the condition flag in its filename to ensure that the command file is unique for each switch and condition. If this is omitted, the command file will be overwritten during iteration. For example, commandfile=./commands/clos_leaf_bgp_{{ inventory_hostname }}_LP21_commands.txt}
		enablePassword: ${9:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_factory "Reset the switch's startup configuration to default (factory) on devices running Lenovo CNOS"
- name:
	cnos_factory:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		host: ${2:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		deviceType: ${4:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${5:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		enablePassword: ${6:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_facts "Collect facts on devices running Lenovo CNOS"
- name:
	cnos_facts:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		host: ${2:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		deviceType: ${4:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${5:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		enablePassword: ${6:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_image "Perform firmware upgrade/download from a remote server on devices running Lenovo CNOS"
- name:
	cnos_image:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${2:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		protocol: ${3:SFTP|SCP|FTP|TFTP}
		serverip: ${4:# This specifies the IP Address of the remote server from where the software image will be downloaded.}
		imgpath: ${5:# This specifies the full file path of the image located on the remote server. In case the relative path is used as the variable value, the root folder for the user of the server needs to be specified.}
		host: ${6:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		deviceType: ${7:g8272_cnos|g8296_cnos|g8332_cnos}
		serverusername: ${8:# Specify the username for the server relating to the protocol used.}
		imgtype: ${9:all|boot|os|onie}
		password: ${10:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		serverpassword: ${11:# Specify the password for the server relating to the protocol used.}
		enablePassword: ${12:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_interface "Manage interface configuration on devices running Lenovo CNOS"
- name:
	cnos_interface:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		password: ${2:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		interfaceOption: ${4:None|ethernet|loopback|mgmt|port-aggregation|vlan}
		host: ${5:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		deviceType: ${6:g8272_cnos|g8296_cnos|g8332_cnos}
		interfaceRange: ${7:# This specifies the interface range in which the port aggregation is envisaged}
		interfaceArg1: ${8:aggregation-group|bfd|bridgeport|description|duplex|flowcontrol|ip|ipv6|lacp|lldp|load-interval|mac|mac-address|mac-learn|microburst-detection|mtu|service|service-policy|shutdown|snmp|spanning-tree|speed|storm-control|vlan|vrrp|port-aggregation}
		interfaceArg4: ${9:key-chain|key-id|keyed-md5 or keyed-sha1 or meticulous-keyed-md5 or meticulous-keyed-sha1 or simple|Interval value in milliseconds|Destination IP (Both IPV4 and IPV6)|in or out|MAC address|Time-out value in seconds|class-id|request|Specify the IPv4 address|OSPF area ID as a decimal value|OSPF area ID in IP address format|anycast or secondary|ethernet|vlan|MAC (hardware) address in HHHH.HHHH.HHHH format|Load interval delay in seconds|Specify policy input name|input or output|cost|port-priority|BFD minimum receive interval|source-interface}
		interfaceArg5: ${10:name of key-chain|key-Id Value|key-chain|key-id|BFD minimum receive interval|Value of Hello Multiplier|admin-down or multihop or non-persistent|Vendor class-identifier name|bootfile-name or host-name or log-server or ntp-server or tftp-server-name|Slot/chassis number|Vlan interface|Specify policy input name|Port path cost or auto|Port priority increments of 32}
		interfaceArg6: ${11:Authentication key string|name of key-chain|key-Id Value|Value of Hello Multiplier|admin-down or non-persistent}
		interfaceArg7: ${12:Authentication key string|admin-down}
		enablePassword: ${13:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		interfaceArg2: ${14:aggregation-group number|access or mode or trunk|description|auto or full or half|recieve or send|port-priority|suspend-individual|timeout|receive or transmit or trap-notification|tlv-select|Load interval delay in seconds|counter|Name for the MAC Access List|mac-address in HHHH.HHHH.HHHH format|THRESHOLD  Value in unit of buffer cell|<64-9216>  MTU in bytes-<64-9216> for L2 packet|<576-9216> for L3 IPv4 packet|<1280-9216> for L3 IPv6 packet|enter the instance id|input or output|copp-system-policy|type|1000  or  10000  or   40000 or   auto|broadcast or multicast or unicast|disable or enable or egress-only|Virtual router identifier|destination-ip or destination-mac or destination-port or source-dest-ip or source-dest-mac or source-dest-port or source-interface or source-ip or source-mac or source-port}
		interfaceArg3: ${15:active or on or passive|on or off|LACP port priority|long or short|link-aggregation or mac-phy-status or management-address or max-frame-size or port-description or port-protocol-vlan or port-vlan or power-mdi or protocol-identity or system-capabilities or system-description or system-name or vid-management or vlan-name|counter for load interval|policy input name|all or Copp class name to attach|qos|queing|Enter the allowed traffic level|ipv6}
$0
endsnippet

snippet cnos_portchannel "Manage portchannel (port aggregation) configuration on devices running Lenovo CNOS"
- name:
	cnos_portchannel:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		password: ${2:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		host: ${4:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		deviceType: ${5:g8272_cnos|g8296_cnos|g8332_cnos}
		interfaceRange: ${6:# This specifies the interface range in which the port aggregation is envisaged}
		interfaceArg1: ${7:aggregation-group|bfd|bridgeport|description|duplex|flowcontrol|ip|ipv6|lacp|lldp|load-interval|mac|mac-address|mac-learn|microburst-detection|mtu|service|service-policy|shutdown|snmp|spanning-tree|speed|storm-control|vlan|vrrp|port-aggregation}
		interfaceArg4: ${8:key-chain|key-id|keyed-md5 or keyed-sha1 or meticulous-keyed-md5 or meticulous-keyed-sha1 or simple|Interval value in milliseconds|Destination IP (Both IPV4 and IPV6)|in or out|MAC address|Time-out value in seconds|class-id|request|Specify the IPv4 address|OSPF area ID as a decimal value|OSPF area ID in IP address format|anycast or secondary|ethernet|vlan|MAC (hardware) address in HHHH.HHHH.HHHH format|Load interval delay in seconds|Specify policy input name|input or output|cost|port-priority|BFD minimum receive interval|source-interface}
		interfaceArg5: ${9:name of key-chain|key-Id Value|key-chain|key-id|BFD minimum receive interval|Value of Hello Multiplier|admin-down or multihop or non-persistent|Vendor class-identifier name|bootfile-name or host-name or log-server or ntp-server or tftp-server-name|Slot/chassis number|Vlan interface|Specify policy input name|Port path cost or auto|Port priority increments of 32}
		interfaceArg6: ${10:Authentication key string|name of key-chain|key-Id Value|Value of Hello Multiplier|admin-down or non-persistent}
		interfaceArg7: ${11:Authentication key string|admin-down}
		enablePassword: ${12:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		interfaceArg2: ${13:aggregation-group number|access or mode or trunk|description|auto or full or half|recieve or send|port-priority|suspend-individual|timeout|receive or transmit or trap-notification|tlv-select|Load interval delay in seconds|counter|Name for the MAC Access List|mac-address in HHHH.HHHH.HHHH format|THRESHOLD  Value in unit of buffer cell|<64-9216>  MTU in bytes-<64-9216> for L2 packet|<576-9216> for L3 IPv4 packet|<1280-9216> for L3 IPv6 packet|enter the instance id|input or output|copp-system-policy|type|1000  or  10000  or   40000 or   auto|broadcast or multicast or unicast|disable or enable or egress-only|Virtual router identifier|destination-ip or destination-mac or destination-port or source-dest-ip or source-dest-mac or source-dest-port or source-interface or source-ip or source-mac or source-port}
		interfaceArg3: ${14:active or on or passive|on or off|LACP port priority|long or short|link-aggregation or mac-phy-status or management-address or max-frame-size or port-description or port-protocol-vlan or port-vlan or power-mdi or protocol-identity or system-capabilities or system-description or system-name or vid-management or vlan-name|counter for load interval|policy input name|all or Copp class name to attach|qos|queing|Enter the allowed traffic level|ipv6}
$0
endsnippet

snippet cnos_reload "Perform switch restart on devices running Lenovo CNOS"
- name:
	cnos_reload:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		host: ${2:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		deviceType: ${4:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${5:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		enablePassword: ${6:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_rollback "Roll back the running or startup configuration from a remote server on devices running Lenovo CNOS"
- name:
	cnos_rollback:
		serverpassword: ${1:# Specify the password for the server relating to the protocol used.}
		username: ${2:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		protocol: ${4:SFTP|SCP|FTP|TFTP}
		configType: ${5:running-config|startup-config}
		host: ${6:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		deviceType: ${7:g8272_cnos|g8296_cnos|g8332_cnos}
		serverusername: ${8:# Specify the username for the server relating to the protocol used.}
		password: ${9:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		rcserverip: ${10:# This specifies the IP Address of the remote server from where the backup configuration will be downloaded.}
		rcpath: ${11:# This specifies the full file path of the configuration file located on the remote server. In case the relative path is used as the variable value, the root folder for the user of the server needs to be specified.}
		enablePassword: ${12:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_save "Save the running configuration as the startup configuration on devices running Lenovo CNOS"
- name:
	cnos_save:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		host: ${2:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		deviceType: ${4:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${5:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		enablePassword: ${6:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_showrun "Collect the current running configuration on devices running Lenovo CNOS"
- name:
	cnos_showrun:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		host: ${2:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		deviceType: ${4:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${5:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		enablePassword: ${6:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_template "Manage switch configuration using templates on devices running Lenovo CNOS"
- name:
	cnos_template:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		host: ${2:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		outputfile: ${3:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		deviceType: ${4:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${5:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		commandfile: ${6:# This specifies the path to the CNOS command file which needs to be applied. This usually comes from the commands folder. Generally this file is the output of the variables applied on a template file. So this command is preceded by a template module. Note The command file must contain the Ansible keyword {{ inventory_hostname }} in its filename to ensure that the command file is unique for each switch and condition. If this is omitted, the command file will be overwritten during iteration. For example, commandfile=./commands/clos_leaf_bgp_{{ inventory_hostname }}_commands.txt}
		enablePassword: ${7:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_vlag "Manage VLAG resources and attributes on devices running Lenovo CNOS"
- name:
	cnos_vlag:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${2:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		vlagArg1: ${3:enable|auto-recovery|config-consistency|isl|mac-address-table|peer-gateway|priority|startup-delay|tier-id|vrrp|instance|hlthchk}
		host: ${4:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		deviceType: ${5:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${6:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		vlagArg2: ${7:Interval in seconds|disable or strict|Port Aggregation Number|VLAG priority|Delay time in seconds|VLAG tier-id value|VLAG instance number|keepalive-attempts|keepalive-interval|retry-interval|peer-ip}
		vlagArg3: ${8:enable or port-aggregation|Number of keepalive attempts|Interval in seconds|Interval in seconds|VLAG health check peer IP4 address}
		vlagArg4: ${9:Port Aggregation Number|default or management}
		enablePassword: ${10:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet cnos_vlan "Manage VLAN resources and attributes on devices running Lenovo CNOS"
- name:
	cnos_vlan:
		username: ${1:# Configures the username used to authenticate the connection to the remote device. The value of the username parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		outputfile: ${2:# This specifies the file path where the output of each command execution is saved. Each command that is specified in the merged template file and each response from the device are saved here. Usually the location is the results folder, but you can choose another location based on your write permission.}
		host: ${3:# This is the variable used to search the hosts file at /etc/ansible/hosts and identify the IP address of the device on which the template is going to be applied. Usually the Ansible keyword {{ inventory_hostname }} is specified in the playbook as an abstraction of the group of network elements that need to be configured.}
		vlanArg1: ${4:access-map|dot1q|filter|<1-3999> VLAN ID 1-3999 or range}
		deviceType: ${5:g8272_cnos|g8296_cnos|g8332_cnos}
		password: ${6:# Configures the password used to authenticate the connection to the remote device. The value of the password parameter is used to authenticate the SSH session. While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
		vlanArg5: ${7:access-list name|Slot/chassis number|Port Aggregation Number}
		vlanArg4: ${8:drop or forward or redirect|ip or mac|Interval in seconds|ethernet|port-aggregation|Querier IP address|Querier Timeout in seconds|Query Interval in seconds|Query Max Response Time in seconds|Robustness Variable value|Number of queries sent at startup|Query Interval at startup}
		vlanArg3: ${9:action|match|statistics|enter VLAN id or range of vlan|ascii name for the VLAN|ipv4 or ipv6|active or suspend|fast-leave|last-member-query-interval|mrouter|querier|querier-timeout|query-interval|query-max-response-time|report-suppression|robustness-variable|startup-query-count|startup-query-interval|static-group}
		vlanArg2: ${10:VLAN Access Map name|egress-only|name|flood|state|ip}
		enablePassword: ${11:# Configures the password used to enter Global Configuration command mode on the switch. If the switch does not request this password, the parameter is ignored.While generally the value should come from the inventory file, you can also specify it as a variable. This parameter is optional. If it is not specified, no default value will be used.}
$0
endsnippet

snippet netconf_config "netconf device configuration"
- name:
	netconf_config:
		username: ${1:# the username to authenticate with}
		xml: ${2:# the XML content to send to the device}
		host: ${3:# the hostname or ip address of the netconf device}
		password: ${4:# password of the user to authenticate with}
		hostkey_verify: ${5:yes}
		port: ${6:830}
$0
endsnippet

snippet pn_cluster "CLI command to create/delete a cluster."
- name:
	pn_cluster:
		pn_name: ${1:# Specify the name of the cluster.}
		state: ${2:present|absent}
		pn_cluster_node1: ${3:# Specify the name of the first switch in the cluster.}
		pn_clipassword: ${4:# Provide login password if user is not root.}
		pn_cliusername: ${5:# Provide login username if user is not root.}
		pn_validate: ${6:validate|no-validate}
		pn_cliswitch: ${7:# Target switch to run the cli on.}
		pn_cluster_node2: ${8:# Specify the name of the second switch in the cluster.}
$0
endsnippet

snippet pn_ospf "CLI command to add/remove ospf protocol to a vRouter."
- name:
	pn_ospf:
		state: ${1:#present|absent}
		pn_vrouter_name: ${2:# Specify the name of the vRouter.}
		pn_network_ip: ${3:# Specify the network IP (IPv4 or IPv6) address.}
		pn_clipassword: ${4:# Provide login password if user is not root.}
		pn_ospf_area: ${5:# Stub area number for the configuration. Required for vrouter-ospf-add.}
		pn_cliswitch: ${6:# Target switch to run the CLI on.}
		pn_cliusername: ${7:# Provide login username if user is not root.}
$0
endsnippet

snippet pn_ospfarea "CLI command to add/remove ospf area to/from a vrouter."
- name:
	pn_ospfarea:
		pn_ospf_area: ${1:# Specify the OSPF area number.}
		pn_clipassword: ${2:# Login password.}
		pn_vrouter_name: ${3:# Specify the name of the vRouter.}
		pn_cliusername: ${4:# Login username.}
		state: ${5:present|absent|update}
		pn_prefix_listin: ${6:# OSPF prefix list for filtering incoming packets.}
		pn_prefix_listout: ${7:# OSPF prefix list for filtering outgoing packets.}
		pn_stub_type: ${8:none|stub|stub-no-summary|nssa|nssa-no-summary}
		pn_cliswitch: ${9:# Target switch(es) to run the CLI on.}
		pn_quiet: ${10:yes}
$0
endsnippet

snippet pn_show "Run show commands on nvOS device."
- name:
	pn_show:
		pn_command: ${1:# The C(pn_command) takes a CLI show command as value.}
		pn_parameters: ${2:# Display output using a specific parameter. Use 'all' to display possible output. List of comma separated parameters.}
		pn_options: ${3:# Specify formatting options.}
		pn_clipassword: ${4:# Provide login password if user is not root.}
		pn_cliswitch: ${5:# Target switch(es) to run the cli on.}
		pn_cliusername: ${6:# Provide login username if user is not root.}
$0
endsnippet

snippet pn_trunk "CLI command to create/delete/modify a trunk."
- name:
	pn_trunk:
		pn_name: ${1:# Specify the name for the trunk configuration.}
		state: ${2:present|absent|update}
		pn_unknown_mcast_level: ${3:# Specify an unknown multicast level in percent. The default value is 100%.}
		pn_jumbo: ${4:# Specify if the port can receive jumbo frames.}
		pn_lacp_fallback_timeout: ${5:# Specify the LACP fallback timeout in seconds. The range is between 30 and 60 seconds with a default value of 50 seconds.}
		pn_unknown_ucast_level: ${6:# Specify an unknown unicast level in percent. The default value is 100%.}
		pn_lacp_timeout: ${7:slow|fast}
		pn_loopback: ${8:# Specify loopback if you want to use loopback.}
		pn_speed: ${9:disable|10m|100m|1g|2.5g|10g|40g}
		pn_edge_switch: ${10:# Specify if the switch is an edge switch.}
		pn_host: ${11:# Host facing port control setting.}
		pn_port_macaddr: ${12:# Specify the MAC address of the port.}
		pn_lacp_fallback: ${13:bundle|individual}
		pn_routing: ${14:# Specify if the port participates in routing on the network.}
		pn_clipassword: ${15:# Provide login password if user is not root.}
		pn_mirror_receive: ${16:# Specify if the configuration receives mirrored traffic.}
		pn_egress_rate_limit: ${17:# Specify an egress port data rate limit for the configuration.}
		pn_cliusername: ${18:# Provide login username if user is not root.}
		pn_lacp_mode: ${19:off|passive|active}
		pn_ports: ${20:# Specify the port number(s) for the link(s) to aggregate into the trunk.}
		pn_lacp_priority: ${21:# Specify the LACP priority. This is a number between 1 and 65535 with a default value of 32768.}
		pn_broadcast_level: ${22:# Specify a broadcast level in percent. The default value is 100%.}
		pn_pause: ${23:# Specify if pause frames are sent.}
		pn_cliswitch: ${24:# Target switch(es) to run the cli on.}
		pn_loopvlans: ${25:# Specify a list of looping vlans.}
		pn_description: ${26:# Specify a description for the trunk configuration.}
$0
endsnippet

snippet pn_vlag "CLI command to create/delete/modify vlag."
- name:
	pn_vlag:
		pn_name: ${1:# The C(pn_name) takes a valid name for vlag configuration.}
		state: ${2:present|absent|update}
		pn_lacp_fallback: ${3:bundle|individual}
		pn_lacp_fallback_timeout: ${4:# Specify the LACP fallback timeout in seconds. The range is between 30 and 60 seconds with a default value of 50 seconds.}
		pn_clipassword: ${5:# Provide login password if user is not root.}
		pn_lacp_timeout: ${6:slow|fast}
		pn_cliusername: ${7:# Provide login username if user is not root.}
		pn_lacp_mode: ${8:off|passive|active}
		pn_failover_action: ${9:move|ignore}
		pn_peer_port: ${10:# Specify the peer VLAG port.}
		pn_peer_switch: ${11:# Specify the fabric-name of the peer switch.}
		pn_port: ${12:# Specify the local VLAG port.}
		pn_cliswitch: ${13:# Target switch(es) to run this command on.}
		pn_mode: ${14:active-active|active-standby}
$0
endsnippet

snippet pn_vlan "CLI command to create/delete a VLAN."
- name:
	pn_vlan:
		pn_vlanid: ${1:# Specify a VLAN identifier for the VLAN. This is a value between 2 and 4092.}
		state: ${2:present|absent}
		pn_scope: ${3:fabric|local}
		pn_clipassword: ${4:# Provide login password if user is not root.}
		pn_cliusername: ${5:# Provide login username if user is not root.}
		pn_ports: ${6:# Specifies the switch network data port number, list of ports, or range of ports. Port numbers must ne in the range of 1 to 64.}
		pn_untagged_ports: ${7:# Specifies the ports that should have untagged packets mapped to the VLAN. Untagged packets are packets that do not contain IEEE 802.1Q VLAN tags.}
		pn_cliswitch: ${8:# Target switch(es) to run the cli on.}
		pn_stats: ${9:# Specify if you want to collect statistics for a VLAN. Statistic collection is enabled by default.}
		pn_description: ${10:# Specify a description for the VLAN.}
$0
endsnippet

snippet pn_vrouter "CLI command to create/delete/modify a vrouter."
- name:
	pn_vrouter:
		pn_name: ${1:# Specify the name of the vRouter.}
		state: ${2:present|absent|update}
		pn_rip_redistribute: ${3:static|connected|ospf|bgp}
		pn_bgp_options: ${4:# Specify other BGP options as a whitespaces separated string within single quotes ''.}
		pn_router_id: ${5:# Specify the vRouter IP address.}
		pn_ospf_options: ${6:# Specify other OSPF options as a whitespaces separated string within single quotes ''.}
		pn_bgp_as: ${7:# Specify the Autonomous System Number(ASN) if the vRouter runs Border Gateway Protocol(BGP).}
		pn_ospf_redistribute: ${8:static|connected|bgp|rip}
		pn_clipassword: ${9:# Provide login password if user is not root.}
		pn_bgp_redistribute: ${10:static|connected|rip|ospf}
		pn_router_type: ${11:hardware|software}
		pn_hw_vrrp_id: ${12:# Specifies the VRRP ID for a hardware vrouter.}
		pn_vnet: ${13:# Specify the name of the VNET.}
		pn_cliusername: ${14:# Provide login username if user is not root.}
		pn_service_state: ${15:enable|disable}
		pn_service_type: ${16:dedicated|shared}
		pn_cliswitch: ${17:# Target switch(es) to run the CLI on.}
		pn_bgp_max_paths: ${18:# Specify the maximum number of paths for BGP. This is a number between 1 and 255 or 0 to unset.}
$0
endsnippet

snippet pn_vrouterbgp "CLI command to add/remove/modify vrouter-bgp."
- name:
	pn_vrouterbgp:
		pn_vrouter_name: ${1:# Specify a name for the vRouter service.}
		state: ${2:present|absent|update}
		pn_max_prefix: ${3:# Specify the maximum number of prefixes.}
		pn_route_mapout: ${4:# Specify outbound route map for neighbor.}
		pn_neighbor: ${5:# Specify a neighbor IP address to use for BGP.}
		pn_override_capability: ${6:# Specify if you want to override capability.}
		pn_route_mapin: ${7:# Specify inbound route map for neighbor.}
		pn_soft_reconfig: ${8:# Specify if you want a soft reconfiguration of inbound traffic.}
		pn_ebgp: ${9:# Specify a value for external BGP to accept or attempt BGP connections to external peers, not directly connected, on the network. This is a value between 1 and 255.}
		pn_prefix_listin: ${10:# Specify the prefix list to filter traffic inbound.}
		pn_bfd: ${11:# Specify if you want BFD protocol support for fault detection.}
		pn_password: ${12:# Specify a password, if desired.}
		pn_route_reflector: ${13:# Specify if a route reflector client is used.}
		pn_keepalive: ${14:# Specify BGP neighbor keepalive interval in seconds.}
		pn_max_prefix_warn: ${15:# Specify if you want a warning message when the maximum number of prefixes is exceeded.}
		pn_multiprotocol: ${16:ipv4-unicast|ipv6-unicast}
		pn_clipassword: ${17:# Provide login password if user is not root.}
		pn_default_originate: ${18:# Specify if you want announce default routes to the neighbor or not.}
		pn_cliusername: ${19:# Provide login username if user is not root.}
		pn_weight: ${20:# Specify a default weight value between 0 and 65535 for the neighbor routes.}
		pn_prefix_listout: ${21:# Specify the prefix list to filter traffic outbound.}
		pn_remote_as: ${22:# Specify the remote Autonomous System(AS) number. This value is between 1 and 4294967295.}
		pn_cliswitch: ${23:# Target switch(es) to run the cli on.}
		pn_holdtime: ${24:# Specify BGP neighbor holdtime in seconds.}
		pn_next_hop_self: ${25:# Specify if the next-hop is the same router or not.}
$0
endsnippet

snippet pn_vrouterif "CLI command to add/remove/modify vrouter-interface."
- name:
	pn_vrouterif:
		pn_vrouter_name: ${1:# Specify the name of the vRouter interface.}
		state: ${2:present|absent|update}
		pn_nic_enable: ${3:# Specify if the NIC is enabled or not}
		pn_vrrp_adv_int: ${4:# Specify a VRRP advertisement interval in milliseconds. The range is from 30 to 40950 with a default value of 1000.}
		pn_vrrp_priority: ${5:# Specify the priority for the VRRP interface. This is a value between 1 (lowest) and 255 (highest).}
		pn_alias: ${6:# Specify an alias for the interface.}
		pn_secondary_macs: ${7:# Specify a secondary MAC address for the interface.}
		pn_interface_ip: ${8:# Specify the IP address of the interface in x.x.x.x/n format.}
		pn_vlan: ${9:# Specify the VLAN identifier. This is a value between 1 and 4092.}
		pn_vxlan: ${10:# Specify the VXLAN identifier. This is a value between 1 and 16777215.}
		pn_exclusive: ${11:# Specify if the interface is exclusive to the configuration. Exclusive means that other configurations cannot use the interface. Exclusive is specified when you configure the interface as span interface and allows higher throughput through the interface.}
		pn_nic_str: ${12:# Specify the type of NIC. Used for vrouter-interface remove/modify.}
		pn_clipassword: ${13:# Provide login password if user is not root.}
		pn_vrrp_id: ${14:# Specify the ID for the VRRP interface. The IDs on both vRouters must be the same IS number.}
		pn_cliusername: ${15:# Provide login username if user is not root.}
		pn_interface: ${16:mgmt|data|span}
		pn_l3port: ${17:# Specify a Layer 3 port for the interface.}
		pn_cliswitch: ${18:# Target switch to run the cli on.}
		pn_assignment: ${19:none|dhcp|dhcpv6|autov6}
$0
endsnippet

snippet pn_vrouterlbif "CLI command to add/remove vrouter-loopback-interface."
- name:
	pn_vrouterlbif:
		pn_interface_ip: ${1:# Specify the IP address.}
		state: ${2:present|absent}
		pn_vrouter_name: ${3:# Specify the name of the vRouter.}
		pn_clipassword: ${4:# Provide login password if user is not root.}
		pn_cliusername: ${5:# Provide login username if user is not root.}
		pn_cliswitch: ${6:# Target switch(es) to run the cli on.}
		pn_index: ${7:# Specify the interface index from 1 to 255.}
$0
endsnippet

snippet nxos_aaa_server "Manages AAA server global configuration."
- name:
	nxos_aaa_server:
		server_type: ${1:radius|tacacs}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		state: ${4:#present|default}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		timeout: ${6:10}
		provider: ${7:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		ssh_keyfile: ${8:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		deadtime: ${9:# Duration for which a non-reachable AAA server is skipped, in minutes. Range is 1-1440. Device default is 0.}
		use_ssl: ${10:yes|no}
		password: ${11:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${12:0 (use common port)}
		server_timeout: ${13:# Global AAA server timeout period, in seconds. Range is 1-60. Device default is 5.}
		encrypt_type: ${14:0|7}
		directed_request: ${15:enabled|disabled}
		global_key: ${16:# Global AAA shared secret.}
		validate_certs: ${17:yes|no}
$0
endsnippet

snippet nxos_aaa_server_host "Manages AAA server host-specific configuration."
- name:
	nxos_aaa_server_host:
		server_type: ${1:radius|tacacs}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		address: ${3:# Address or name of the radius or tacacs host.}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		timeout: ${7:10}
		encrypt_type: ${8:0|7}
		provider: ${9:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		auth_port: ${10:# Alternate UDP port for RADIUS authentication.}
		tacacs_port: ${11:# Alternate TCP port TACACS Server.}
		host_timeout: ${12:# Timeout period for specified host, in seconds. Range is 1-60.}
		state: ${13:#present|absent}
		key: ${14:# Shared secret for the specified host.}
		acct_port: ${15:# Alternate UDP port for RADIUS accounting.}
		use_ssl: ${16:yes|no}
		password: ${17:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${18:yes|no}
		port: ${19:0 (use common port)}
$0
endsnippet

snippet nxos_acl "Manages access list entries for ACLs."
- name:
	nxos_acl:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		name: ${3:# Case sensitive name of the access list (ACL).}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		src_port_op: ${5:any|eq|gt|lt|neq|range}
		psh: ${6:enable}
		seq: ${7:# Sequence number of the entry (ACE).}
		src: ${8:# Source ip and mask using IP/MASK notation and supports keyword 'any'.}
		dest: ${9:# Destination ip and mask using IP/MASK notation and supports the keyword 'any'.}
		syn: ${10:enable}
		dscp: ${11:af11|af12|af13|af21|af22|af23|af31|af32|af33|af41|af42|af43|cs1|cs2|cs3|cs4|cs5|cs6|cs7|default|ef}
		time-range: ${12:# Name of time-range to apply.}
		ssh_keyfile: ${13:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		dest_port_op: ${14:any|eq|gt|lt|neq|range}
		rst: ${15:enable}
		use_ssl: ${16:yes|no}
		password: ${17:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		dest_port2: ${18:# Second (end) port when using range operand.}
		established: ${19:enable}
		remark: ${20:# If action is set to remark, this is the description.}
		urg: ${21:enable}
		log: ${22:enable}
		proto: ${23:# Port number or protocol (as supported by the switch).}
		ack: ${24:enable}
		src_port1: ${25:# Port/protocol and also first (lower) port when using range operand.}
		precedence: ${26:critical|flash|flash-override|immediate|internet|network|priority|routine}
		port: ${27:0 (use common port)}
		validate_certs: ${28:yes|no}
		state: ${29:#present|absent|delete_acl}
		timeout: ${30:10}
		provider: ${31:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		action: ${32:permit|deny|remark}
		dest_port1: ${33:# Port/protocol and also first (lower) port when using range operand.}
		fragments: ${34:enable}
		fin: ${35:enable}
		src_port2: ${36:# Second (end) port when using range operand.}
$0
endsnippet

snippet nxos_acl_interface "Manages applying ACLs to interfaces."
- name:
	nxos_acl_interface:
		direction: ${1:ingress|egress}
		name: ${2:# Case sensitive name of the access list (ACL).}
		host: ${3:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		interface: ${4:# Full name of interface, e.g. I(Ethernet1/1).}
		transport: ${5:cli}
		username: ${6:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${7:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${8:#present|absent}
		timeout: ${9:10}
		provider: ${10:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${11:yes|no}
		password: ${12:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${13:yes|no}
		port: ${14:0 (use common port)}
$0
endsnippet

snippet nxos_bgp "Manages BGP configuration."
- name:
	nxos_bgp:
		transport: ${1:cli}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		asn: ${3:# BGP autonomous system number. Valid values are String, Integer in ASPLAIN or ASDOT notation.}
		neighbor_down_fib_accelerate: ${4:true|false}
		confederation_peers: ${5:# AS confederation parameters.}
		confederation_id: ${6:# Routing domain confederation AS.}
		event_history_cli: ${7:size_small|size_medium|size_large|size_disable|default}
		bestpath_always_compare_med: ${8:true|false}
		cluster_id: ${9:# Route Reflector Cluster-ID.}
		shutdown: ${10:true|false}
		log_neighbor_changes: ${11:true|false}
		use_ssl: ${12:yes|no}
		bestpath_aspath_multipath_relax: ${13:true|false}
		port: ${14:0 (use common port)}
		graceful_restart_timers_stalepath_time: ${15:true|false}
		password: ${16:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		maxas_limit: ${17:# Specify Maximum number of AS numbers allowed in the AS-path attribute. Valid values are between 1 and 512.}
		bestpath_med_confed: ${18:true|false}
		isolate: ${19:true|false}
		timer_bgp_keepalive: ${20:# Set BGP keepalive timer.}
		bestpath_cost_community_ignore: ${21:true|false}
		fast_external_fallover: ${22:true|false}
		state: ${23:#present|absent}
		disable_policy_batching: ${24:true|false}
		suppress_fib_pending: ${25:true|false}
		bestpath_med_missing_as_worst: ${26:true|false}
		router_id: ${27:# Router Identifier (ID) of the BGP router VRF instance.}
		timer_bestpath_limit: ${28:# Specify timeout for the first best path after a restart, in seconds.}
		provider: ${29:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		local_as: ${30:# Local AS number to be used within a VRF instance.}
		event_history_periodic: ${31:size_small|size_medium|size_large|size_disable|default}
		timer_bestpath_limit_always: ${32:true|false}
		disable_policy_batching_ipv4_prefix_list: ${33:# Enable/Disable the batching evaluation of prefix advertisements to all peers with prefix list.}
		vrf: ${34:# Name of the VRF. The name 'default' is a valid VRF representing the global BGP.}
		graceful_restart_helper: ${35:true|false}
		timer_bgp_hold: ${36:# Set BGP hold timer.}
		event_history_events: ${37:size_small|size_medium|size_large|size_disable|default}
		disable_policy_batching_ipv6_prefix_list: ${38:# Enable/Disable the batching evaluation of prefix advertisements to all peers with prefix list.}
		event_history_detail: ${39:size_small|size_medium|size_large|size_disable|default}
		ssh_keyfile: ${40:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		graceful_restart: ${41:true|false}
		flush_routes: ${42:true|false}
		enforce_first_as: ${43:true|false}
		bestpath_med_non_deterministic: ${44:true|false}
		username: ${45:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		reconnect_interval: ${46:# The BGP reconnection interval for dropped sessions. Valid values are between 1 and 60.}
		timeout: ${47:10}
		graceful_restart_timers_restart: ${48:true|false}
		validate_certs: ${49:yes|no}
		bestpath_compare_routerid: ${50:true|false}
$0
endsnippet

snippet nxos_bgp_af "Manages BGP Address-family configuration."
- name:
	nxos_bgp_af:
		transport: ${1:cli}
		afi: ${2:ipv4|ipv6|vpnv4|vpnv6|l2vpn}
		safi: ${3:unicast|multicast|evpn}
		host: ${4:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		vrf: ${5:# Name of the VRF. The name 'default' is a valid VRF representing the global bgp.}
		asn: ${6:# BGP autonomous system number. Valid values are String, Integer in ASPLAIN or ASDOT notation.}
		username: ${7:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		dampening_max_suppress_time: ${8:# Specify max suppress time for route-flap dampening stable route. Valid values are integer and keyword 'default'.}
		additional_paths_send: ${9:true|false}
		additional_paths_install: ${10:true|false}
		dampening_state: ${11:true|false}
		additional_paths_receive: ${12:true|false}
		suppress_inactive: ${13:true|false}
		use_ssl: ${14:yes|no}
		dampening_routemap: ${15:# Specify route-map for route-flap dampening. Valid values are a string defining the name of the route-map.}
		distance_ibgp: ${16:# Sets the administrative distance for iBGP routes. Valid values are Integer or keyword 'default'.}
		distance_local: ${17:# Sets the administrative distance for local BGP routes. Valid values are Integer or keyword 'default'.}
		advertise_l2vpn_evpn: ${18:true|false}
		default_information_originate: ${19:true|false}
		networks: ${20:# Networks to configure. Valid value is a list of network prefixes to advertise. The list must be in the form of an array. Each entry in the array must include a prefix address and an optional route-map. For example [['10.0.0.0/16', 'routemap_LA'], ['192.168.1.1', 'Chicago'], ['192.168.2.0/24], ['192.168.3.0/24', 'routemap_NYC']].}
		port: ${21:0 (use common port)}
		state: ${22:#present|absent}
		next_hop_route_map: ${23:# Configure a route-map for valid nexthops. Valid values are a string defining the name of the route-map.}
		provider: ${24:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		table_map_filter: ${25:true|false}
		timeout: ${26:10}
		default_metric: ${27:# Sets default metrics for routes redistributed into BGP. Valid values are Integer or keyword 'default'}
		client_to_client: ${28:true|false}
		dampen_igp_metric: ${29:# Specify dampen value for IGP metric-related changes, in seconds. Valid values are integer and keyword 'default'.}
		additional_paths_selection: ${30:# Configures the capability of selecting additional paths for a prefix. Valid values are a string defining the name of the route-map.}
		maximum_paths_ibgp: ${31:# Configures the maximum number of ibgp equal-cost paths for load sharing. Valid value is an integer in the range 1-64.}
		distance_ebgp: ${32:# Sets the administrative distance for eBGP routes. Valid values are Integer or keyword 'default'.}
		password: ${33:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		redistribute: ${34:# A list of redistribute directives. Multiple redistribute entries are allowed. The list must be in the form of a nested array. the first entry of each array defines the source-protocol to redistribute from; the second entry defines a route-map name. A route-map is highly advised but may be optional on some platforms, in which case it may be omitted from the array list. For example [['direct', 'rm_direct'], ['lisp', 'rm_lisp']].}
		ssh_keyfile: ${35:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		dampening_reuse_time: ${36:# Specify route reuse time for route-flap dampening. Valid values are integer and keyword 'default'.}
		maximum_paths: ${37:# Configures the maximum number of equal-cost paths for load sharing. Valid value is an integer in the range 1-64.}
		inject_map: ${38:# An array of route-map names which will specify prefixes to inject. Each array entry must first specify the inject-map name, secondly an exist-map name, and optionally the copy-attributes keyword which indicates that attributes should be copied from the aggregate. For example [['lax_inject_map', 'lax_exist_map'], ['nyc_inject_map', 'nyc_exist_map', 'copy-attributes'], ['fsd_inject_map', 'fsd_exist_map']].}
		dampening_suppress_time: ${39:# Specify route suppress time for route-flap dampening. Valid values are integer and keyword 'default'.}
		table_map: ${40:# Apply table-map to filter routes downloaded into URIB. Valid values are a string.}
		dampening_half_time: ${41:# Specify decay half-life in minutes for route-flap dampening. Valid values are integer and keyword 'default'.}
		validate_certs: ${42:yes|no}
$0
endsnippet

snippet nxos_bgp_neighbor "Manages BGP neighbors configurations."
- name:
	nxos_bgp_neighbor:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		asn: ${3:# BGP autonomous system number. Valid values are string, Integer in ASPLAIN or ASDOT notation.}
		neighbor: ${4:# Neighbor Identifier. Valid values are string. Neighbors may use IPv4 or IPv6 notation, with or without prefix length.}
		update_source: ${5:# Specify source interface of BGP session and updates.}
		username: ${6:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		maximum_peers: ${7:# Specify Maximum number of peers for this neighbor prefix Valid values are between 1 and 1000, or 'default', which does not impose the limit.}
		timers_holdtime: ${8:# Specify holdtime timer value. Valid values are integers between 0 and 3600 in terms of seconds, or 'default', which is 180.}
		local_as: ${9:# Specify the local-as number for the eBGP neighbor. Valid values are String or Integer in ASPLAIN or ASDOT notation, or 'default', which means not to configure it.}
		pwd_type: ${10:3des|cisco_type_7}
		timers_keepalive: ${11:# Specify keepalive timer value. Valid values are integers between 0 and 3600 in terms of seconds, or 'default', which is 60.}
		dynamic_capability: ${12:true|false}
		vrf: ${13:default}
		shutdown: ${14:true|false}
		low_memory_exempt: ${15:true|false}
		log_neighbor_changes: ${16:enable|disable|inherit}
		remove_private_as: ${17:enable|disable|all|replace-as}
		password: ${18:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		suppress_4_byte_as: ${19:true|false}
		connected_check: ${20:true|false}
		timeout: ${21:10}
		ssh_keyfile: ${22:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		remote_as: ${23:# Specify Autonomous System Number of the neighbor. Valid values are String or Integer in ASPLAIN or ASDOT notation, or 'default', which means not to configure it.}
		ebgp_multihop: ${24:# Specify multihop TTL for a remote peer. Valid values are integers between 2 and 255, or keyword 'default' to disable this property.}
		description: ${25:# Description of the neighbor.}
		pwd: ${26:# Specify the password for neighbor. Valid value is string.}
		port: ${27:0 (use common port)}
		state: ${28:#present|absent}
		transport_passive_only: ${29:true|false}
		capability_negotiation: ${30:true|false}
		provider: ${31:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${32:yes|no}
		validate_certs: ${33:yes|no}
$0
endsnippet

snippet nxos_bgp_neighbor_af "Manages BGP address-family's neighbors configuration."
- name:
	nxos_bgp_neighbor_af:
		transport: ${1:cli}
		afi: ${2:ipv4|ipv6|vpnv4|vpnv6|l2vpn}
		safi: ${3:unicast|multicast|evpn}
		host: ${4:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		asn: ${5:# BGP autonomous system number. Valid values are String, Integer in ASPLAIN or ASDOT notation.}
		neighbor: ${6:# Neighbor Identifier. Valid values are string. Neighbors may use IPv4 or IPv6 notation, with or without prefix length.}
		default_originate: ${7:true|false}
		route_reflector_client: ${8:true|false}
		additional_paths_send: ${9:enable|disable|inherit}
		soo: ${10:# Site-of-origin. Valid values are a string defining a VPN extcommunity or 'default'.}
		additional_paths_receive: ${11:enable|disable|inherit}
		suppress_inactive: ${12:true|false|default}
		unsuppress_map: ${13:# unsuppress-map. Valid values are a string defining a route-map name or 'default'.}
		prefix_list_out: ${14:# Valid values are a string defining a prefix-list name, or 'default'.}
		as_override: ${15:true|false}
		port: ${16:0 (use common port)}
		filter_list_out: ${17:# Valid values are a string defining a filter-list name, or 'default'.}
		allowas_in: ${18:# Activate allowas-in property}
		max_prefix_warning: ${19:true|false}
		max_prefix_threshold: ${20:# Optional threshold percentage at which to generate a warning. Valid values are an integer value. Requires max_prefix_limit.}
		state: ${21:#present|absent}
		provider: ${22:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		advertise_map_non_exist: ${23:# Conditional route advertisement. This property requires two route maps, an advertise-map and an exist-map. Valid values are an array specifying both the advertise-map name and the non-exist-map name, or simply 'default' e.g. ['my_advertise_map', 'my_non_exist_map']. This command is mutually exclusive with the advertise_map_exist property.}
		username: ${24:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		default_originate_route_map: ${25:# Optional route-map for the default_originate property. Can be used independently or in conjunction with C(default_originate). Valid values are a string defining a route-map name, or 'default'.}
		send_community: ${26:none|both|extended|standard|default}
		filter_list_in: ${27:# Valid values are a string defining a filter-list name, or 'default'.}
		weight: ${28:# Weight value. Valid values are an integer value or 'default'.}
		ssh_keyfile: ${29:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		vrf: ${30:default}
		max_prefix_limit: ${31:# maximum-prefix limit value. Valid values are an integer value or 'default'.}
		password: ${32:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		route_map_in: ${33:# Valid values are a string defining a route-map name, or 'default'.}
		soft_reconfiguration_in: ${34:enable|always|inherit}
		max_prefix_interval: ${35:# Optional restart interval. Valid values are an integer. Requires max_prefix_limit.}
		timeout: ${36:10}
		route_map_out: ${37:# Valid values are a string defining a route-map name, or 'default'.}
		next_hop_self: ${38:true|false}
		prefix_list_in: ${39:# Valid values are a string defining a prefix-list name, or 'default'.}
		use_ssl: ${40:yes|no}
		next_hop_third_party: ${41:true|false}
		advertise_map_exist: ${42:# Conditional route advertisement. This property requires two route maps, an advertise-map and an exist-map. Valid values are an array specifying both the advertise-map name and the exist-map name, or simply 'default' e.g. ['my_advertise_map', 'my_exist_map']. This command is mutually exclusive with the advertise_map_non_exist property.}
		validate_certs: ${43:yes|no}
		allowas_in_max: ${44:# Optional max-occurrences value for allowas_in. Valid values are an integer value or 'default'. Can be used independently or in conjunction with allowas_in.}
$0
endsnippet

snippet nxos_command "Run arbitrary command on Cisco NXOS devices"
- name:
	nxos_command:
		commands: ${1:# The commands to send to the remote NXOS device over the configured provider.  The resulting output from the command is returned.  If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		retries: ${5:10}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		password: ${7:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		interval: ${8:1}
		timeout: ${9:10}
		provider: ${10:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${11:yes|no}
		wait_for: ${12:# Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward.   If the conditional is not true by the configured retries, the task fails.  See examples.}
		validate_certs: ${13:yes|no}
		port: ${14:0 (use common port)}
		match: ${15:all}
$0
endsnippet

snippet nxos_config "Manage Cisco NXOS configuration sections"
- name:
	nxos_config:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		force: ${4:true|false}
		timeout: ${5:10}
		after: ${6:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.}
		replace: ${7:#line|block}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${10:0 (use common port)}
		before: ${11:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
		src: ${12:# The I(src) argument provides a path to the configuration file to load into the remote system.  The path can either be a full system path to the configuration file if the value starts with / or relative to the root of the implemented role or playbook. This argument is mutually exclusive with the I(lines) and I(parents) arguments.}
		ssh_keyfile: ${13:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		config: ${14:# The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.}
		lines: ${15:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.}
		validate_certs: ${16:yes|no}
		parents: ${17:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.}
		defaults: ${18:no}
		provider: ${19:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		save: ${20:no}
		backup: ${21:yes|no}
		match: ${22:#line|strict|exact|none}
$0
endsnippet

snippet nxos_evpn_global "Handles the EVPN control plane for VXLAN."
- name:
	nxos_evpn_global:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		nv_overlay_evpn: ${2:true|false}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		timeout: ${6:10}
		provider: ${7:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${10:yes|no}
		port: ${11:0 (use common port)}
$0
endsnippet

snippet nxos_evpn_vni "Manages Cisco EVPN VXLAN Network Identifier (VNI)."
- name:
	nxos_evpn_vni:
		vni: ${1:# The EVPN VXLAN Network Identifier.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		route_distinguisher: ${4:# The VPN Route Distinguisher (RD). The RD is combined with the IPv4 or IPv6 prefix learned by the PE router to create a globally unique address.}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		route_target_import: ${6:# Sets the route-target 'import' extended communities.}
		use_ssl: ${7:yes|no}
		route_target_export: ${8:# Sets the route-target 'import' extended communities.}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${10:0 (use common port)}
		ssh_keyfile: ${11:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		route_target_both: ${12:# Enables/Disables route-target settings for both import and export target communities using a single property.}
		state: ${13:#present|absent}
		timeout: ${14:10}
		provider: ${15:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${16:yes|no}
$0
endsnippet

snippet nxos_facts "Gets facts about NX-OS switches"
- name:
	nxos_facts:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${4:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		gather_subset: ${5:!config}
		timeout: ${6:10}
		provider: ${7:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${10:yes|no}
		port: ${11:0 (use common port)}
$0
endsnippet

snippet nxos_feature "Manage features in NX-OS switches."
- name:
	nxos_feature:
		feature: ${1:# Name of feature.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${6:#enabled|disabled}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${11:yes|no}
		port: ${12:0 (use common port)}
$0
endsnippet

snippet nxos_file_copy "Copy a file to a remote NXOS device over SCP."
- name:
	nxos_file_copy:
		local_file: ${1:# Path to local file. Local directory must exist.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		validate_certs: ${6:yes|no}
		port: ${7:0 (use common port)}
		timeout: ${8:10}
		provider: ${9:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${10:yes|no}
		password: ${11:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		remote_file: ${12:# Remote file path of the copy. Remote directories must exist. If omitted, the name of the local file will be used.}
		file_system: ${13:# The remote file system of the device. If omitted, devices that support a file_system parameter will use their default values.}
$0
endsnippet

snippet nxos_gir "Trigger a graceful removal or insertion (GIR) of the switch."
- name:
	nxos_gir:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		state: ${3:#present|absent}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		system_mode_maintenance_shutdown: ${5:true|false}
		system_mode_maintenance_on_reload_reset_reason: ${6:hw_error|svc_failure|kern_failure|wdog_timeout|fatal_error|lc_failure|match_any|manual_reload}
		system_mode_maintenance: ${7:true|false}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${10:0 (use common port)}
		ssh_keyfile: ${11:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		system_mode_maintenance_dont_generate_profile: ${12:true|false}
		system_mode_maintenance_timeout: ${13:# Keeps the switch in maintenance mode for a specified number of minutes. Range is 5-65535.}
		timeout: ${14:10}
		provider: ${15:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${16:yes|no}
$0
endsnippet

snippet nxos_gir_profile_management "Create a maintenance-mode or normal-mode profile for GIR."
- name:
	nxos_gir_profile_management:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		mode: ${2:maintenance|normal}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		commands: ${5:# List of commands to be included into the profile.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		validate_certs: ${7:yes|no}
		include_defaults: ${8:true|false}
		state: ${9:#present|absent}
		timeout: ${10:10}
		provider: ${11:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${12:yes|no}
		password: ${13:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		config: ${14:# Specify the configuration string to be used for module operations.}
		port: ${15:0 (use common port)}
$0
endsnippet

snippet nxos_hsrp "Manages HSRP configuration on NX-OS switches."
- name:
	nxos_hsrp:
		group: ${1:# HSRP group number.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		interface: ${3:# Full name of interface that is being managed for HSRP.}
		transport: ${4:cli}
		auth_type: ${5:text|md5}
		username: ${6:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${7:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		auth_string: ${8:# Authentication string.}
		vip: ${9:# HSRP virtual IP address.}
		priority: ${10:# HSRP priority.}
		state: ${11:#present|absent}
		version: ${12:1|2}
		timeout: ${13:10}
		provider: ${14:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${15:yes|no}
		password: ${16:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${17:yes|no}
		port: ${18:0 (use common port)}
$0
endsnippet

snippet nxos_igmp "Manages IGMP global configuration."
- name:
	nxos_igmp:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${4:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		enforce_rtr_alert: ${5:true|false}
		flush_routes: ${6:true|false}
		state: ${7:#present|default}
		timeout: ${8:10}
		provider: ${9:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${10:yes|no}
		password: ${11:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${12:yes|no}
		port: ${13:0 (use common port)}
		restart: ${14:true|false}
$0
endsnippet

snippet nxos_igmp_interface "Manages IGMP interface configuration."
- name:
	nxos_igmp_interface:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		interface: ${2:# The full interface name for IGMP configuration. e.g. I(Ethernet1/2).}
		transport: ${3:cli}
		startup_query_interval: ${4:# Query interval used when the IGMP process starts up. The range is from 1 to 18000. The default is 31.}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		group_timeout: ${6:# Sets the group membership timeout for IGMPv2. Values can range from 3 to 65,535 seconds. The default is 260 seconds.}
		password: ${7:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		oif_routemap: ${8:# Configure a routemap for static outgoing interface (OIF).}
		oif_prefix: ${9:# Configure a prefix for static outgoing interface (OIF).}
		use_ssl: ${10:yes|no}
		querier_timeout: ${11:# Sets the querier timeout that the software uses when deciding to take over as the querier. Values can range from 1 to 65535 seconds. The default is 255 seconds.}
		last_member_query_count: ${12:# Sets the number of times that the software sends an IGMP query in response to a host leave message. Values can range from 1 to 5. The default is 2.}
		port: ${13:0 (use common port)}
		restart: ${14:true|false}
		report_llg: ${15:true|false}
		ssh_keyfile: ${16:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		last_member_qrt: ${17:# Sets the query interval waited after sending membership reports before the software deletes the group state. Values can range from 1 to 25 seconds. The default is 1 second.}
		robustness: ${18:# Sets the robustness variable. Values can range from 1 to 7. The default is 2.}
		startup_query_count: ${19:# Query count used when the IGMP process starts up. The range is from 1 to 10. The default is 2.}
		immediate_leave: ${20:true|false}
		state: ${21:#present|default}
		version: ${22:2|3}
		timeout: ${23:10}
		provider: ${24:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		oif_source: ${25:# Configure a source for static outgoing interface (OIF).}
		query_interval: ${26:# Sets the frequency at which the software sends IGMP host query messages. Values can range from 1 to 18000 seconds. he default is 125 seconds.}
		validate_certs: ${27:yes|no}
		query_mrt: ${28:# Sets the response time advertised in IGMP queries. Values can range from 1 to 25 seconds. The default is 10 seconds.}
$0
endsnippet

snippet nxos_igmp_snooping "Manages IGMP snooping global configuration."
- name:
	nxos_igmp_snooping:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		link_local_grp_supp: ${3:true|false}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		group_timeout: ${5:# Group membership timeout value for all VLANs on the device. Accepted values are integer in range 1-10080, I(never) and I(default).}
		use_ssl: ${6:yes|no}
		password: ${7:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${8:0 (use common port)}
		report_supp: ${9:# Global IGMPv1/IGMPv2 Report Suppression.}
		ssh_keyfile: ${10:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		snooping: ${11:true|false}
		v3_report_supp: ${12:true|false}
		state: ${13:#present|default}
		timeout: ${14:10}
		provider: ${15:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${16:yes|no}
$0
endsnippet

snippet nxos_install_os "Set boot options like boot image and kickstart image."
- name:
	nxos_install_os:
		system_image_file: ${1:# Name of the system (or combined) image file on flash.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		kickstart_image_file: ${5:# Name of the kickstart image file on flash.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${11:yes|no}
		port: ${12:0 (use common port)}
$0
endsnippet

snippet nxos_interface "Manages physical attributes of interfaces."
- name:
	nxos_interface:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		state: ${2:#present|absent|default}
		interface: ${3:# Full name of interface, i.e. Ethernet1/1, port-channel10.}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		description: ${7:# Interface description.}
		ip_forward: ${8:enable|disable}
		interface_type: ${9:loopback|portchannel|svi|nve}
		fabric_forwarding_anycast_gateway: ${10:true|false}
		admin_state: ${11:#up|down}
		mode: ${12:layer2|layer3}
		timeout: ${13:10}
		provider: ${14:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${15:yes|no}
		password: ${16:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${17:yes|no}
		port: ${18:0 (use common port)}
$0
endsnippet

snippet nxos_interface_ospf "Manages configuration of an OSPF interface instance."
- name:
	nxos_interface_ospf:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		interface: ${2:# Name of this cisco_interface resource. Valid value is a string.}
		transport: ${3:cli}
		area: ${4:# Ospf area associated with this cisco_interface_ospf instance. Valid values are a string, formatted as an IP address (i.e. "0.0.0.0") or as an integer.}
		ospf: ${5:# Name of the ospf instance.}
		username: ${6:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		message_digest_encryption_type: ${9:cisco_type_7|3des}
		dead_interval: ${10:# Time interval an ospf neighbor waits for a hello packet before tearing down adjacencies. Valid values are an integer or the keyword 'default'.}
		hello_interval: ${11:# Time between sending successive hello packets. Valid values are an integer or the keyword 'default'.}
		use_ssl: ${12:yes|no}
		password: ${13:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${14:0 (use common port)}
		ssh_keyfile: ${15:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		message_digest_algorithm_type: ${16:md5}
		message_digest_key_id: ${17:# Md5 authentication key-id associated with the ospf instance. If this is present, message_digest_encryption_type, message_digest_algorithm_type and message_digest_password are mandatory. Valid value is an integer and 'default'.}
		validate_certs: ${18:yes|no}
		state: ${19:#present|absent}
		cost: ${20:# The cost associated with this cisco_interface_ospf instance.}
		passive_interface: ${21:true|false}
		message_digest_password: ${22:# Specifies the message_digest password. Valid value is a string.}
		message_digest: ${23:true|false}
$0
endsnippet

snippet nxos_ip_interface "Manages L3 attributes for IPv4 and IPv6 interfaces."
- name:
	nxos_ip_interface:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		interface: ${2:# Full name of interface, i.e. Ethernet1/1, vlan10.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		addr: ${6:# IPv4 or IPv6 Address.}
		mask: ${7:# Subnet mask for IPv4 or IPv6 Address in decimal format.}
		state: ${8:#present|absent}
		timeout: ${9:10}
		provider: ${10:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${11:yes|no}
		password: ${12:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${13:yes|no}
		port: ${14:0 (use common port)}
$0
endsnippet

snippet nxos_ntp "Manages core NTP configuration."
- name:
	nxos_ntp:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		password: ${4:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		source_addr: ${6:# Local source address from which NTP messages are sent.}
		use_ssl: ${7:yes|no}
		prefer: ${8:enabled|disabled}
		server: ${9:# Network address of NTP server.}
		state: ${10:#present|absent}
		vrf_name: ${11:# Makes the device communicate with the given NTP server or peer over a specific VRF.}
		timeout: ${12:10}
		provider: ${13:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		peer: ${14:# Network address of NTP peer.}
		key_id: ${15:# Authentication key identifier to use with given NTP server or peer.}
		source_int: ${16:# Local source interface from which NTP messages are sent. Must be fully qualified interface name.}
		validate_certs: ${17:yes|no}
		port: ${18:0 (use common port)}
$0
endsnippet

snippet nxos_ntp_auth "Manages NTP authentication."
- name:
	nxos_ntp_auth:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		md5string: ${3:# MD5 String.}
		key_id: ${4:# Authentication key identifier (numeric).}
		auth_type: ${5:#text|encrypt}
		username: ${6:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		trusted_key: ${7:true|false}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${10:0 (use common port)}
		ssh_keyfile: ${11:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		authentication: ${12:on|off}
		state: ${13:#present|absent}
		timeout: ${14:10}
		provider: ${15:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${16:yes|no}
$0
endsnippet

snippet nxos_ntp_options "Manages NTP options."
- name:
	nxos_ntp_options:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${4:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		logging: ${5:true|false}
		provider: ${6:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		state: ${7:#present|absent}
		master: ${8:true|false}
		timeout: ${9:10}
		stratum: ${10:# If C(master=true), an optional stratum can be supplied (1-15). The device default is 8.}
		use_ssl: ${11:yes|no}
		password: ${12:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${13:yes|no}
		port: ${14:0 (use common port)}
$0
endsnippet

snippet nxos_nxapi "Manage NXAPI configuration on an NXOS device."
- name:
	nxos_nxapi:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		http: ${4:yes|no}
		https_port: ${5:443}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		use_ssl: ${7:yes|no}
		password: ${8:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${9:0 (use common port)}
		timeout: ${10:10}
		http_port: ${11:80}
		sandbox: ${12:yes|no}
		state: ${13:#present|absent}
		https: ${14:yes|no}
		provider: ${15:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${16:yes|no}
$0
endsnippet

snippet nxos_ospf "Manages configuration of an ospf instance."
- name:
	nxos_ospf:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		ospf: ${2:# Name of the ospf instance.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		validate_certs: ${6:yes|no}
		state: ${7:#present|absent}
		timeout: ${8:10}
		provider: ${9:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${10:yes|no}
		password: ${11:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${12:0 (use common port)}
$0
endsnippet

snippet nxos_ospf_vrf "Manages a VRF for an OSPF router."
- name:
	nxos_ospf_vrf:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		ospf: ${3:# Name of the OSPF instance.}
		router_id: ${4:# Router Identifier (ID) of the OSPF router VRF instance.}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		timeout: ${6:10}
		default_metric: ${7:# Specify the default Metric value. Valid values are an integer or the keyword 'default'.}
		ssh_keyfile: ${8:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		vrf: ${9:default}
		timer_throttle_spf_start: ${10:# Specify initial Shortest Path First (SPF) schedule delay. Valid values are an integer, in milliseconds, or the keyword 'default'.}
		use_ssl: ${11:yes|no}
		password: ${12:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		timer_throttle_spf_hold: ${13:# Specify minimum hold time between Shortest Path First (SPF) calculations. Valid values are an integer, in milliseconds, or the keyword 'default'.}
		timer_throttle_lsa_max: ${14:# Specify the max interval for rate-limiting Link-State Advertisement (LSA) generation. Valid values are an integer, in milliseconds, or the keyword 'default'.}
		timer_throttle_spf_max: ${15:# Specify the maximum wait time between Shortest Path First (SPF) calculations. Valid values are an integer, in milliseconds, or the keyword 'default'.}
		timer_throttle_lsa_hold: ${16:# Specify the hold interval for rate-limiting Link-State Advertisement (LSA) generation. Valid values are an integer, in milliseconds, or the keyword 'default'.}
		validate_certs: ${17:yes|no}
		log_adjacency: ${18:log|detail|default}
		timer_throttle_lsa_start: ${19:# Specify the start interval for rate-limiting Link-State Advertisement (LSA) generation. Valid values are an integer, in milliseconds, or the keyword 'default'.}
		port: ${20:0 (use common port)}
		auto_cost: ${21:# Specifies the reference bandwidth used to assign OSPF cost. Valid values are an integer, in Mbps, or the keyword 'default'.}
		provider: ${22:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
$0
endsnippet

snippet nxos_overlay_global "Configures anycast gateway MAC of the switch."
- name:
	nxos_overlay_global:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		anycast_gateway_mac: ${2:# Anycast gateway mac of the switch.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		provider: ${6:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		timeout: ${7:10}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${10:yes|no}
		port: ${11:0 (use common port)}
$0
endsnippet

snippet nxos_pim "Manages configuration of a PIM instance."
- name:
	nxos_pim:
		ssm_range: ${1:# Configure group ranges for Source Specific Multicast (SSM). Valid values are multicast addresses or the keyword 'none'.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		timeout: ${6:10}
		provider: ${7:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${10:yes|no}
		port: ${11:0 (use common port)}
$0
endsnippet

snippet nxos_pim_interface "Manages PIM interface configuration."
- name:
	nxos_pim_interface:
		jp_policy_out: ${1:# Policy for join-prune messages (outbound).}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		interface: ${3:# Full name of the interface such as Ethernet1/33.}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		timeout: ${6:10}
		neighbor_policy: ${7:# Configures a neighbor policy for filtering adjacencies.}
		hello_interval: ${8:true|false}
		use_ssl: ${9:yes|no}
		hello_auth_key: ${10:# Authentication for hellos on this interface.}
		border: ${11:true|false}
		port: ${12:0 (use common port)}
		password: ${13:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		ssh_keyfile: ${14:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		jp_type_in: ${15:prefix|routemap}
		neighbor_type: ${16:prefix|routemap}
		state: ${17:#present|default}
		sparse: ${18:true|false}
		provider: ${19:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		jp_policy_in: ${20:# Policy for join-prune messages (inbound).}
		validate_certs: ${21:yes|no}
		jp_type_out: ${22:prefix|routemap}
$0
endsnippet

snippet nxos_pim_rp_address "Manages configuration of an PIM static RP address instance."
- name:
	nxos_pim_rp_address:
		rp_address: ${1:# Configures a Protocol Independent Multicast (PIM) static rendezvous point (RP) address. Valid values are unicast addresses.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		bidir: ${5:true|false}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		route_map: ${7:# Route map policy for static RP. Valid values are route-map policy names.}
		group_list: ${8:# Group range for static RP. Valid values are multicast addresses.}
		validate_certs: ${9:yes|no}
		timeout: ${10:10}
		provider: ${11:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${12:yes|no}
		password: ${13:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		prefix_list: ${14:# Prefix list policy for static RP. Valid values are prefix-list policy names.}
		port: ${15:0 (use common port)}
$0
endsnippet

snippet nxos_ping "Tests reachability using ping from Nexus switch."
- name:
	nxos_ping:
		dest: ${1:# IP address or hostname (resolvable by switch) of remote node.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		count: ${4:2}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		source: ${7:# Source IP Address.}
		vrf: ${8:# Outgoing VRF.}
		timeout: ${9:10}
		provider: ${10:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${11:yes|no}
		password: ${12:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${13:yes|no}
		port: ${14:0 (use common port)}
$0
endsnippet

snippet nxos_portchannel "Manages port-channel interfaces."
- name:
	nxos_portchannel:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		group: ${3:# Channel-group number for the port-channel.}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		force: ${5:true|false}
		members: ${6:# List of interfaces that will be managed in a given portchannel.}
		min_links: ${7:# Min links required to keep portchannel up.}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${10:0 (use common port)}
		ssh_keyfile: ${11:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${12:#present|absent}
		mode: ${13:active|passive|on}
		timeout: ${14:10}
		provider: ${15:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${16:yes|no}
$0
endsnippet

snippet nxos_reboot "Reboot a network device."
- name:
	nxos_reboot:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${4:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		confirm: ${5:no}
		timeout: ${6:10}
		provider: ${7:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${10:yes|no}
		port: ${11:0 (use common port)}
$0
endsnippet

snippet nxos_rollback "Set a checkpoint or rollback to a checkpoint."
- name:
	nxos_rollback:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		checkpoint_file: ${3:# Name of checkpoint file to create. Mutually exclusive with rollback_to.}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		rollback_to: ${6:# Name of checkpoint file to rollback to. Mutually exclusive with checkpoint_file.}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${11:yes|no}
		port: ${12:0 (use common port)}
$0
endsnippet

snippet nxos_smu "Perform SMUs on Cisco NX-OS devices."
- name:
	nxos_smu:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		pkg: ${2:# Name of the remote package.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		port: ${6:0 (use common port)}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${11:yes|no}
		file_system: ${12:# The remote file system of the device. If omitted, devices that support a file_system parameter will use their default values.}
$0
endsnippet

snippet nxos_snapshot "Manage snapshots of the running states of selected features."
- name:
	nxos_snapshot:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		action: ${3:create|add|compare|delete}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		description: ${5:# Snapshot description to be used when C(action=create).}
		snapshot1: ${6:# First snapshot to be used when C(action=compare).}
		snapshot2: ${7:# Second snapshot to be used when C(action=compare).}
		snapshot_name: ${8:# Snapshot name, to be used when C(action=create) or C(action=delete).}
		use_ssl: ${9:yes|no}
		path: ${10:./}
		password: ${11:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		show_command: ${12:# Specify a new show command, to be used when C(action=add).}
		ssh_keyfile: ${13:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		section: ${14:# Used to name the show command output, to be used when C(action=add).}
		comparison_results_file: ${15:# Name of the file where snapshots comparison will be store.}
		compare_option: ${16:summary|ipv4routes|ipv6routes}
		port: ${17:0 (use common port)}
		element_key1: ${18:# Specify the tags used to distinguish among row entries, to be used when C(action=add).}
		element_key2: ${19:# Specify the tags used to distinguish among row entries, to be used when C(action=add).}
		timeout: ${20:10}
		provider: ${21:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		row_id: ${22:# Specifies the tag of each row entry of the show command's XML output, to be used when C(action=add).}
		validate_certs: ${23:yes|no}
		save_snapshot_locally: ${24:true|false}
$0
endsnippet

snippet nxos_snmp_community "Manages SNMP community configs."
- name:
	nxos_snmp_community:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		community: ${2:# Case-sensitive community string.}
		state: ${3:#present|absent}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		group: ${7:# Group to which the community belongs.}
		acl: ${8:1}
		access: ${9:ro|rw}
		timeout: ${10:10}
		provider: ${11:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${12:yes|no}
		password: ${13:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${14:yes|no}
		port: ${15:0 (use common port)}
$0
endsnippet

snippet nxos_snmp_contact "Manages SNMP contact info."
- name:
	nxos_snmp_contact:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		state: ${2:#present|absent}
		contact: ${3:# Contact information.}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${11:yes|no}
		port: ${12:0 (use common port)}
$0
endsnippet

snippet nxos_snmp_host "Manages SNMP host configuration."
- name:
	nxos_snmp_host:
		snmp_host: ${1:# IP address of hostname of target host.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		state: ${3:#present|absent}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		vrf_filter: ${6:# Name of VRF to filter.}
		udp: ${7:# UDP port number (0-65535).}
		ssh_keyfile: ${8:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		validate_certs: ${9:yes|no}
		src_intf: ${10:# Source interface.}
		community: ${11:# Community string or v3 username.}
		version: ${12:#v2c|v3}
		vrf: ${13:# VRF to use to source traffic to source.}
		timeout: ${14:10}
		provider: ${15:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${16:yes|no}
		password: ${17:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		type: ${18:trap|inform}
		port: ${19:0 (use common port)}
$0
endsnippet

snippet nxos_snmp_location "Manages SNMP location information."
- name:
	nxos_snmp_location:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		location: ${2:# Location information.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${6:#present|absent}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${11:yes|no}
		port: ${12:0 (use common port)}
$0
endsnippet

snippet nxos_snmp_traps "Manages SNMP traps."
- name:
	nxos_snmp_traps:
		group: ${1:aaa|bridge|callhome|cfs|config|entity|feature-control|hsrp|license|link|lldp|ospf|pim|rf|rmon|snmp|storm-control|stpx|sysmgr|system|upgrade|vtp|all}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${6:#enabled|disabled}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${11:yes|no}
		port: ${12:0 (use common port)}
$0
endsnippet

snippet nxos_snmp_user "Manages SNMP users for monitoring."
- name:
	nxos_snmp_user:
		user: ${1:# Name of the user.}
		group: ${2:# Group to which the user will belong to.}
		transport: ${3:cli}
		host: ${4:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		auth: ${6:md5|sha}
		pwd: ${7:# Auth password when using md5 or sha.}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${10:0 (use common port)}
		ssh_keyfile: ${11:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		encrypt: ${12:true|false}
		privacy: ${13:# Privacy password for the user.}
		state: ${14:#present|absent}
		timeout: ${15:10}
		provider: ${16:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${17:yes|no}
$0
endsnippet

snippet nxos_static_route "Manages static route configuration"
- name:
	nxos_static_route:
		prefix: ${1:# Destination prefix of static route.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		state: ${4:present|absent}
		next_hop: ${5:# Next hop address or interface of static route. If interface, it must be the fully-qualified interface name.}
		username: ${6:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		tag: ${7:# Route tag value (numeric).}
		vrf: ${8:default}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${11:0 (use common port)}
		ssh_keyfile: ${12:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		pref: ${13:# Preference or administrative difference of route (range 1-255).}
		route_name: ${14:# Name of the route. Used with the name parameter on the CLI.}
		timeout: ${15:10}
		provider: ${16:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${17:yes|no}
$0
endsnippet

snippet nxos_switchport "Manages Layer 2 switchport interfaces."
- name:
	nxos_switchport:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		interface: ${2:# Full name of the interface, i.e. Ethernet1/1.}
		transport: ${3:cli}
		native_vlan: ${4:# If C(mode=trunk), used as the trunk native VLAN ID.}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		use_ssl: ${6:yes|no}
		password: ${7:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${8:0 (use common port)}
		access_vlan: ${9:# If C(mode=access), used as the access VLAN ID.}
		ssh_keyfile: ${10:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		trunk_vlans: ${11:# If C(mode=trunk), used as the VLAN range to ADD or REMOVE from the trunk.}
		state: ${12:#present|absent|unconfigured}
		trunk_allowed_vlans: ${13:# if C(mode=trunk), these are the only VLANs that will be configured on the trunk, i.e. "2-10,15".}
		mode: ${14:access|trunk}
		timeout: ${15:10}
		provider: ${16:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${17:yes|no}
$0
endsnippet

snippet nxos_system "Manage the system attributes on Cisco NXOS devices"
- name:
	nxos_system:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		domain_search: ${4:# Configures a list of domain name suffixes to search when performing DNS name resolution. This argument accepts either a list of domain names or a list of dicts that configure the domain name and VRF name.  See examples.}
		system_mtu: ${5:# Specifies the mtu, must be an integer.}
		name_servers: ${6:# List of DNS name servers by IP address to use to perform name resolution lookups.  This argument accepts either a list of DNS servers or a list of hashes that configure the name server and VRF name.  See examples.}
		use_ssl: ${7:yes|no}
		password: ${8:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${9:0 (use common port)}
		ssh_keyfile: ${10:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		hostname: ${11:# Configure the device hostname parameter. This option takes an ASCII string value.}
		domain_name: ${12:# Configures the default domain name suffix to be used when referencing this node by its FQDN.  This argument accepts either a list of domain names or a list of dicts that configure the domain name and VRF name.  See examples.}
		state: ${13:#present|absent}
		timeout: ${14:10}
		provider: ${15:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		domain_lookup: ${16:# Enables or disables the DNS lookup feature in Cisco NXOS.  This argument accepts boolean values.  When enabled, the system will try to resolve hostnames using DNS and when disabled, hostnames will not be resolved.}
		validate_certs: ${17:yes|no}
$0
endsnippet

snippet nxos_udld "Manages UDLD global configuration params."
- name:
	nxos_udld:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		reset: ${3:true|false}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		msg_time: ${6:# Message time in seconds for UDLD packets.}
		state: ${7:#present|absent}
		timeout: ${8:10}
		provider: ${9:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${10:yes|no}
		aggressive: ${11:enabled|disabled}
		password: ${12:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${13:yes|no}
		port: ${14:0 (use common port)}
$0
endsnippet

snippet nxos_udld_interface "Manages UDLD interface configuration params."
- name:
	nxos_udld_interface:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		mode: ${2:enabled|disabled|aggressive}
		interface: ${3:# FULL name of the interface, i.e. Ethernet1/1-}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${7:#present|absent}
		timeout: ${8:10}
		provider: ${9:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${10:yes|no}
		password: ${11:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${12:yes|no}
		port: ${13:0 (use common port)}
$0
endsnippet

snippet nxos_user "Manage the collection of local users on Nexus devices"
- name:
	nxos_user:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		update_password: ${4:on_create|#always}
		users: ${5:# The set of username objects to be configured on the remote Cisco Nexus device.  The list entries can either be the username or a hash of username and properties.  This argument is mutually exclusive with the C(name) argument.}
		use_ssl: ${6:yes|no}
		password: ${7:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${8:0 (use common port)}
		name: ${9:# The username to be configured on the remote Cisco Nexus device.  This argument accepts a stringv value and is mutually exclusive with the C(users) argument.}
		ssh_keyfile: ${10:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		sshkey: ${11:# The C(sshkey) argument defines the SSH public key to configure for the username.  This argument accepts a valid SSH key value.}
		purge: ${12:no}
		state: ${13:#present|absent}
		role: ${14:# The C(role) argument configures the role for the username in the device running configuration.  The argument accepts a string value defining the role name.  This argument does not check if the role has been configured on the device.}
		timeout: ${15:10}
		provider: ${16:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${17:yes|no}
$0
endsnippet

snippet nxos_vlan "Manages VLAN resources and attributes."
- name:
	nxos_vlan:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		vlan_state: ${4:#active|suspend}
		admin_state: ${5:#up|down}
		use_ssl: ${6:yes|no}
		vlan_range: ${7:# Range of VLANs such as 2-10 or 2,5,10-15, etc.}
		port: ${8:0 (use common port)}
		vlan_id: ${9:# Single VLAN ID.}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		ssh_keyfile: ${11:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		name: ${12:# Name of VLAN.}
		mapped_vni: ${13:# The Virtual Network Identifier (VNI) ID that is mapped to the VLAN. Valid values are integer and keyword 'default'.}
		state: ${14:#present|absent}
		timeout: ${15:10}
		provider: ${16:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${17:yes|no}
$0
endsnippet

snippet nxos_vpc "Manages global VPC configuration"
- name:
	nxos_vpc:
		domain: ${1:# VPC domain}
		auto_recovery: ${2:true|false}
		peer_gw: ${3:true|false}
		state: ${4:present|absent}
		host: ${5:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${6:cli}
		username: ${7:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${8:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		system_priority: ${9:# System priority device.  Remember they must match between peers.}
		role_priority: ${10:# Role priority for device. Remember lower is better.}
		pkl_vrf: ${11:management}
		delay_restore: ${12:# manages delay restore command and config value in seconds}
		port: ${13:0 (use common port)}
		validate_certs: ${14:yes|no}
		timeout: ${15:10}
		provider: ${16:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${17:yes|no}
		password: ${18:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		pkl_dest: ${19:# Destination (remote) IP address used for peer keepalive link}
		pkl_src: ${20:# Source IP address used for peer keepalive link}
$0
endsnippet

snippet nxos_vpc_interface "Manages interface VPC configuration"
- name:
	nxos_vpc_interface:
		portchannel: ${1:# Group number of the portchannel that will be configured.}
		state: ${2:present|absent}
		host: ${3:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		timeout: ${7:10}
		peer_link: ${8:# Set to true/false for peer link config on associated portchannel.}
		vpc: ${9:# VPC group/id that will be configured on associated portchannel.}
		provider: ${10:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${11:yes|no}
		password: ${12:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${13:yes|no}
		port: ${14:0 (use common port)}
$0
endsnippet

snippet nxos_vrf "Manages global VRF configuration."
- name:
	nxos_vrf:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		vrf: ${2:# Name of VRF to be managed.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		description: ${5:# Description of the VRF.}
		vni: ${6:# Specify virtual network identifier. Valid values are Integer or keyword 'default'.}
		admin_state: ${7:#up|down}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${10:0 (use common port)}
		ssh_keyfile: ${11:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${12:#present|absent}
		route_distinguisher: ${13:# VPN Route Distinguisher (RD). Valid values are a string in one of the route-distinguisher formats (ASN2:NN, ASN4:NN, or IPV4:NN); the keyword 'auto', or the keyword 'default'.}
		timeout: ${14:10}
		provider: ${15:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${16:yes|no}
$0
endsnippet

snippet nxos_vrf_af "Manages VRF AF."
- name:
	nxos_vrf_af:
		afi: ${1:ipv4|ipv6}
		safi: ${2:unicast|multicast}
		host: ${3:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		vrf: ${4:# Name of the VRF.}
		transport: ${5:cli}
		username: ${6:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${7:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${8:#present|absent}
		route_target_both_auto_evpn: ${9:true|false}
		timeout: ${10:10}
		provider: ${11:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${12:yes|no}
		password: ${13:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${14:yes|no}
		port: ${15:0 (use common port)}
$0
endsnippet

snippet nxos_vrf_interface "Manages interface specific VRF configuration."
- name:
	nxos_vrf_interface:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		vrf: ${2:# Name of VRF to be managed.}
		interface: ${3:# Full name of interface to be managed, i.e. Ethernet1/1.}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${7:#present|absent}
		timeout: ${8:10}
		provider: ${9:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${10:yes|no}
		password: ${11:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${12:yes|no}
		port: ${13:0 (use common port)}
$0
endsnippet

snippet nxos_vrrp "Manages VRRP configuration on NX-OS switches."
- name:
	nxos_vrrp:
		interface: ${1:# Full name of interface that is being managed for VRRP.}
		transport: ${2:cli}
		group: ${3:# VRRP group number.}
		host: ${4:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		vip: ${6:# VRRP virtual IP address.}
		admin_state: ${7:shutdown|#no shutdown}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${10:0 (use common port)}
		ssh_keyfile: ${11:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		authentication: ${12:# Clear text authentication string.}
		priority: ${13:# VRRP priority.}
		state: ${14:#present|absent}
		timeout: ${15:10}
		provider: ${16:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		validate_certs: ${17:yes|no}
$0
endsnippet

snippet nxos_vtp_domain "Manages VTP domain configuration."
- name:
	nxos_vtp_domain:
		domain: ${1:# VTP domain name.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		timeout: ${6:10}
		provider: ${7:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${10:yes|no}
		port: ${11:0 (use common port)}
$0
endsnippet

snippet nxos_vtp_password "Manages VTP password configuration."
- name:
	nxos_vtp_password:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		transport: ${2:cli}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		vtp_password: ${4:# VTP password}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		state: ${6:#present|absent}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${11:yes|no}
		port: ${12:0 (use common port)}
$0
endsnippet

snippet nxos_vtp_version "Manages VTP version configuration."
- name:
	nxos_vtp_version:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		version: ${2:1|2}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		timeout: ${6:10}
		provider: ${7:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${8:yes|no}
		password: ${9:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		validate_certs: ${10:yes|no}
		port: ${11:0 (use common port)}
$0
endsnippet

snippet nxos_vxlan_vtep "Manages VXLAN Network Virtualization Endpoint (NVE)."
- name:
	nxos_vxlan_vtep:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		interface: ${2:# Interface name for the VXLAN Network Virtualization Endpoint.}
		transport: ${3:cli}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		description: ${5:# Description of the NVE interface.}
		provider: ${6:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		source_interface_hold_down_time: ${7:# Suppresses advertisement of the NVE loopback address until the overlay has converged.}
		shutdown: ${8:true|false}
		use_ssl: ${9:yes|no}
		password: ${10:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		port: ${11:0 (use common port)}
		ssh_keyfile: ${12:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		host_reachability: ${13:true|false}
		state: ${14:#present|absent}
		timeout: ${15:10}
		source_interface: ${16:# Specify the loopback interface whose IP address should be used for the NVE interface.}
		validate_certs: ${17:yes|no}
$0
endsnippet

snippet nxos_vxlan_vtep_vni "Creates a Virtual Network Identifier member (VNI)"
- name:
	nxos_vxlan_vtep_vni:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.}
		vni: ${2:# ID of the Virtual Network Identifier.}
		interface: ${3:# Interface name for the VXLAN Network Virtualization Endpoint.}
		transport: ${4:cli}
		username: ${5:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		timeout: ${6:10}
		assoc_vrf: ${7:true|false}
		password: ${8:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		suppress_arp: ${9:true|false}
		multicast_group: ${10:# The multicast group (range) of the VNI. Valid values are string and keyword 'default'.}
		validate_certs: ${11:yes|no}
		use_ssl: ${12:yes|no}
		include_defaults: ${13:true|true}
		state: ${14:#present|absent}
		ssh_keyfile: ${15:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		peer_list: ${16:# Set the ingress-replication static peer list. Valid values are an array, a space-separated string of ip addresses, or the keyword 'default'.}
		provider: ${17:# Convenience method that allows all I(nxos) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		ingress_replication: ${18:bgp|static}
		save: ${19:true|false}
		config: ${20:# Configuration string to be used for module operations. If not specified, the module will use the current running configuration.}
		port: ${21:0 (use common port)}
$0
endsnippet

snippet ops_command "Run arbitrary commands on OpenSwitch devices."
- name:
	ops_command:
		commands: ${1:# List of commands to send to the remote ops device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.}
		host: ${2:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.  Note this argument does not affect the SSH argument.}
		transport: ${3:#ssh|cli|rest}
		username: ${4:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the eAPI authentication depending on which transport is used. Note this argument does not affect the SSH transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		retries: ${5:10}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		password: ${7:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(rest) transports.  Note this argument does not affect the SSH transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		interval: ${8:1}
		timeout: ${9:10}
		provider: ${10:# Convenience method that allows all I(openswitch) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${11:yes|no}
		wait_for: ${12:# List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.}
		port: ${13:0 (use common port)}
		match: ${14:any|#all}
$0
endsnippet

snippet ops_config "Manage OpenSwitch configuration using CLI"
- name:
	ops_config:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.  Note this argument does not affect the SSH argument.}
		transport: ${2:#ssh|cli|rest}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the eAPI authentication depending on which transport is used. Note this argument does not affect the SSH transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		src: ${4:# The I(src) argument provides a path to the configuration file to load into the remote system.  The path can either be a full system path to the configuration file if the value starts with / or relative to the root of the implemented role or playbook. This argument is mutually exclusive with the I(lines) and I(parents) arguments.}
		password: ${5:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(rest) transports.  Note this argument does not affect the SSH transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		ssh_keyfile: ${6:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		force: ${7:yes|no}
		after: ${8:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.}
		lines: ${9:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.}
		replace: ${10:#line|block}
		parents: ${11:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.}
		timeout: ${12:10}
		provider: ${13:# Convenience method that allows all I(openswitch) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${14:yes|no}
		save: ${15:yes|no}
		config: ${16:# The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison.}
		port: ${17:0 (use common port)}
		match: ${18:#line|strict|exact|none}
		before: ${19:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
$0
endsnippet

snippet ops_facts "Collect device specific facts from OpenSwitch"
- name:
	ops_facts:
		host: ${1:# Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport.  Note this argument does not affect the SSH argument.}
		transport: ${2:#ssh|cli|rest}
		username: ${3:# Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the eAPI authentication depending on which transport is used. Note this argument does not affect the SSH transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead.}
		password: ${4:# Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(rest) transports.  Note this argument does not affect the SSH transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead.}
		ssh_keyfile: ${5:# Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.}
		gather_subset: ${6:!config}
		timeout: ${7:10}
		provider: ${8:# Convenience method that allows all I(openswitch) arguments to be passed as a dict object.  All constraints (required, choices, etc) must be met either by individual arguments or values in this dict.}
		use_ssl: ${9:yes|no}
		endpoints: ${10:# Accepts a list of endpoints to retrieve from the remote device using the REST API.  The endpoints should be valid endpoints available on the device.  This argument is only valid when the C(transport=rest).}
		config: ${11:True|#False}
		port: ${12:0 (use common port)}
$0
endsnippet

snippet ordnance_config "Manage Ordnance configuration sections"
- name:
	ordnance_config:
		multiline_delimiter: ${1:@}
		src: ${2:# Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines).}
		commands: ${3:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.}
		backup: ${4:yes|no}
		after: ${5:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.}
		replace: ${6:#line|block}
		parents: ${7:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.}
		defaults: ${8:yes|no}
		save: ${9:yes|no}
		config: ${10:# The C(config) argument allows the playbook designer to supply the base configuration to be used to validate configuration changes necessary.  If this argument is provided, the module will not download the running-config from the remote node.}
		match: ${11:#line|strict|exact|none}
		before: ${12:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
$0
endsnippet

snippet ordnance_facts "Collect facts from Ordnance Virtual Routers over SSH"
- name:
	ordnance_facts:
		gather_subset: ${1:!config}
$0
endsnippet

snippet openvswitch_bridge "Manage Open vSwitch bridges"
- name:
	openvswitch_bridge:
		bridge: ${1:# Name of bridge or fake bridge to manage}
		fail_mode: ${2:secure|standalone}
		parent: ${3:# Bridge parent of the fake bridge to manage}
		vlan: ${4:# The VLAN id of the fake bridge to manage (must be between 0 and 4095)}
		state: ${5:#present|absent}
		set: ${6:# Set a single property on a bridge.}
		timeout: ${7:5}
		external_ids: ${8:# A dictionary of external-ids. Omitting this parameter is a No-op. To  clear all external-ids pass an empty value.}
$0
endsnippet

snippet openvswitch_db "Configure open vswitch database."
- name:
	openvswitch_db:
		record: ${1:# Identifies the recoard in the table.}
		key: ${2:# Identifies the key in the record column}
		column: ${3:# Identifies the column in the record.}
		table: ${4:# Identifies the table in the database.}
		value: ${5:# Expected value for the table, record, column and key.}
		timeout: ${6:5}
$0
endsnippet

snippet openvswitch_port "Manage Open vSwitch ports"
- name:
	openvswitch_port:
		bridge: ${1:# Name of bridge to manage}
		port: ${2:# Name of port to manage on the bridge}
		state: ${3:#present|absent}
		set: ${4:# Set a single property on a port.}
		timeout: ${5:5}
		external_ids: ${6:{}}
		tag: ${7:# VLAN tag for this port}
$0
endsnippet

snippet panos_address "Create address service object on PanOS devices"
- name:
	panos_address:
		address_name: ${1:# Human readable name of the address.}
		address: ${2:# IP address with or without mask, range, or FQDN.}
		password: ${3:# Password credentials to use for authentication.}
		ip_address: ${4:# IP address (or hostname) of PAN-OS device being configured.}
		username: ${5:admin}
		description: ${6:# Description of the address object.}
		type: ${7:ip-netmask|fqdn|ip-range}
		tag: ${8:# Tag of the address object.}
		commit: ${9:yes}
$0
endsnippet

snippet panos_admin "Add or modify PAN-OS user accounts password."
- name:
	panos_admin:
		admin_password: ${1:# password for admin user}
		password: ${2:# password for authentication}
		ip_address: ${3:# IP address (or hostname) of PAN-OS device}
		username: ${4:admin}
		role: ${5:# role for admin user}
		commit: ${6:yes}
		admin_username: ${7:admin}
$0
endsnippet

snippet panos_admpwd "change admin password of PAN-OS device using SSH with SSH key"
- name:
	panos_admpwd:
		newpassword: ${1:# password to configure for admin on the PAN-OS device}
		key_filename: ${2:# filename of the SSH Key to use for authentication}
		ip_address: ${3:# IP address (or hostname) of PAN-OS device}
		username: ${4:admin}
$0
endsnippet

snippet panos_cert_gen_ssh "generates a self-signed certificate using SSH protocol with SSH key"
- name:
	panos_cert_gen_ssh:
		password: ${1:# Password credentials to use for auth. Either I(key_filename) or I(password) is required.}
		cert_cn: ${2:# Certificate CN (common name) embeded in the certificate signature.}
		cert_friendly_name: ${3:# Human friendly certificate name (not CN but just a friendly name).}
		key_filename: ${4:# Location of the filename that is used for the auth. Either I(key_filename) or I(password) is required.}
		ip_address: ${5:# IP address (or hostname) of PAN-OS device being configured.}
		signed_by: ${6:# Undersigning authority (CA) that MUST already be presents on the device.}
		rsa_nbits: ${7:2048}
$0
endsnippet

snippet panos_check "check if PAN-OS device is ready for configuration"
- name:
	panos_check:
		password: ${1:# password for authentication}
		ip_address: ${2:# IP address (or hostname) of PAN-OS device}
		username: ${3:admin}
		timeout: ${4:0}
		interval: ${5:0}
$0
endsnippet

snippet panos_commit "commit firewall's candidate configuration"
- name:
	panos_commit:
		password: ${1:# password for authentication}
		ip_address: ${2:# IP address (or hostname) of PAN-OS device}
		username: ${3:admin}
		timeout: ${4:# timeout for commit job}
		interval: ${5:0.5}
		sync: ${6:yes}
$0
endsnippet

snippet panos_dag "create a dynamic address group"
- name:
	panos_dag:
		dag_name: ${1:# name of the dynamic address group}
		password: ${2:# password for authentication}
		ip_address: ${3:# IP address (or hostname) of PAN-OS device}
		dag_filter: ${4:# dynamic filter user by the dynamic address group}
		username: ${5:admin}
		commit: ${6:yes}
$0
endsnippet

snippet panos_import "import file on PAN-OS devices"
- name:
	panos_import:
		password: ${1:# Password for device authentication.}
		ip_address: ${2:# IP address (or hostname) of PAN-OS device.}
		username: ${3:admin}
		category: ${4:software}
		file: ${5:# Location of the file to import into device.}
		url: ${6:# URL of the file that will be imported to device.}
$0
endsnippet

snippet panos_interface "configure data-port network interface for DHCP"
- name:
	panos_interface:
		zone_name: ${1:# N}
		password: ${2:# Password credentials to use for auth.}
		ip_address: ${3:# IP address (or hostname) of PAN-OS device being configured.}
		if_name: ${4:# Name of the interface to configure.}
		username: ${5:admin}
		create_default_route: ${6:false}
		commit: ${7:yes}
$0
endsnippet

snippet panos_lic "apply authcode to a device/instance"
- name:
	panos_lic:
		ip_address: ${1:# IP address (or hostname) of PAN-OS device}
		password: ${2:# password for authentication}
		auth_code: ${3:# authcode to be applied}
		username: ${4:admin}
		force: ${5:false}
$0
endsnippet

snippet panos_loadcfg "load configuration on PAN-OS device"
- name:
	panos_loadcfg:
		password: ${1:# password for authentication}
		ip_address: ${2:# IP address (or hostname) of PAN-OS device}
		username: ${3:admin}
		commit: ${4:yes}
		file: ${5:# configuration file to load}
$0
endsnippet

snippet panos_mgtconfig "configure management settings of device"
- name:
	panos_mgtconfig:
		password: ${1:# password for authentication}
		ip_address: ${2:# IP address (or hostname) of PAN-OS device}
		username: ${3:admin}
		panorama_primary: ${4:# address of primary Panorama server}
		dns_server_secondary: ${5:# address of secondary DNS server}
		dns_server_primary: ${6:# address of primary DNS server}
		panorama_secondary: ${7:# address of secondary Panorama server}
		commit: ${8:yes}
$0
endsnippet

snippet panos_nat_policy "create a policy NAT rule"
- name:
	panos_nat_policy:
		rule_name: ${1:# name of the SNAT rule}
		password: ${2:# password for authentication}
		ip_address: ${3:# IP address (or hostname) of PAN-OS device}
		to_zone: ${4:# destination zone}
		from_zone: ${5:# list of source zones}
		username: ${6:admin}
		snat_bidirectional: ${7:false}
		dnat_port: ${8:# dnat translated port}
		snat_interface_address: ${9:# snat interface address}
		snat_address: ${10:# snat translated address}
		dnat_address: ${11:# dnat translated address}
		service: ${12:any}
		snat_type: ${13:# type of source translation}
		destination: ${14:[u'any']}
		source: ${15:[u'any']}
		override: ${16:false}
		commit: ${17:yes}
		snat_interface: ${18:# snat interface}
$0
endsnippet

snippet panos_pg "create a security profiles group"
- name:
	panos_pg:
		pg_name: ${1:# name of the security profile group}
		password: ${2:# password for authentication}
		ip_address: ${3:# IP address (or hostname) of PAN-OS device}
		username: ${4:admin}
		wildfire: ${5:# name of the wildfire analysis profile}
		data_filtering: ${6:# name of the data filtering profile}
		file_blocking: ${7:# name of the file blocking profile}
		vulnerability: ${8:# name of the vulnerability profile}
		spyware: ${9:# name of the spyware profile}
		url_filtering: ${10:# name of the url filtering profile}
		virus: ${11:# name of the anti-virus profile}
		commit: ${12:yes}
$0
endsnippet

snippet panos_restart "restart a device"
- name:
	panos_restart:
		password: ${1:# password for authentication}
		ip_address: ${2:# IP address (or hostname) of PAN-OS device}
		username: ${3:admin}
$0
endsnippet

snippet panos_security_policy "Create security rule policy on PanOS devices."
- name:
	panos_security_policy:
		password: ${1:# Password credentials to use for auth unless I(api_key) is set.}
		ip_address: ${2:# IP address (or hostname) of PAN-OS device being configured.}
		rule_name: ${3:# Name of the security rule.}
		wildfire_analysis: ${4:# Name of the already defined wildfire_analysis profile.}
		username: ${5:admin}
		vulnerability: ${6:# Name of the already defined vulnerability profile.}
		devicegroup: ${7:# D}
		data_filtering: ${8:# Name of the already defined data_filtering profile.}
		spyware: ${9:# Name of the already defined spyware profile.}
		hip_profiles: ${10:any}
		file_blocking: ${11:# Name of the already defined file_blocking profile.}
		tag: ${12:# Administrative tags that can be added to the rule. Note, tags must be already defined.}
		antivirus: ${13:# Name of the already defined antivirus profile.}
		log_start: ${14:no}
		log_end: ${15:yes}
		url_filtering: ${16:# Name of the already defined url_filtering profile.}
		description: ${17:# Description for the security rule.}
		rule_type: ${18:universal}
		to_zone: ${19:any}
		service: ${20:application-default}
		source: ${21:any}
		destination: ${22:any}
		from_zone: ${23:any}
		source_user: ${24:any}
		application: ${25:any}
		group_profile: ${26:# S}
		action: ${27:allow}
		commit: ${28:yes}
		api_key: ${29:# API key that can be used instead of I(username)/I(password) credentials.}
$0
endsnippet

snippet panos_service "create a service object"
- name:
	panos_service:
		protocol: ${1:# protocol for the service, should be tcp or udp}
		service_name: ${2:# name of the service}
		password: ${3:# password for authentication}
		ip_address: ${4:# IP address (or hostname) of PAN-OS device}
		port: ${5:# destination port}
		username: ${6:admin}
		source_port: ${7:# source port}
		commit: ${8:yes}
$0
endsnippet

snippet sros_command "Run commands on remote devices running Nokia SR OS"
- name:
	sros_command:
		commands: ${1:# List of commands to send to the remote SR OS device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired.}
		retries: ${2:10}
		interval: ${3:1}
		provider: ${4:# A dict object containing connection details.}
		wait_for: ${5:# List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples.}
		match: ${6:any|#all}
$0
endsnippet

snippet sros_config "Manage Nokia SR OS device configuration"
- name:
	sros_config:
		src: ${1:# Specifies the source path to the file that contains the configuration or configuration template to load.  The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines).}
		force: ${2:true|false}
		backup: ${3:yes|no}
		after: ${4:# The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set.}
		lines: ${5:# The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in the device running-config.  Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser.}
		replace: ${6:#line|block}
		parents: ${7:# The ordered set of parents that uniquely identify the section the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands.}
		defaults: ${8:yes|no}
		provider: ${9:# A dict object containing connection details.}
		save: ${10:yes|no}
		config: ${11:# The C(config) argument allows the playbook designer to supply the base configuration to be used to validate configuration changes necessary.  If this argument is provided, the module will not download the running-config from the remote node.}
		match: ${12:#line|strict|exact|none}
		before: ${13:# The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system.}
$0
endsnippet

snippet sros_rollback "Configure Nokia SR OS rollback"
- name:
	sros_rollback:
		state: ${1:#present|absent}
		rescue_location: ${2:# The I(rescue_location) specifies the location of the rescue file.  This argument supports any valid local or remote URL as specified in SR OS}
		remote_max_checkpoints: ${3:# The I(remote_max_checkpoints) argument configures the maximum number of rollback files that can be transferred and saved to a remote location.  Valid values for this argument are in the range of 1 to 50}
		local_max_checkpoints: ${4:# The I(local_max_checkpoints) argument configures the maximum number of rollback files that can be saved on the devices local compact flash.  Valid values for this argument are in the range of 1 to 50}
		provider: ${5:# A dict object containing connection details.}
		rollback_location: ${6:# The I(rollback_location) specifies the location and filename of the rollback checkpoint files.   This argument supports any valid local or remote URL as specified in SR OS}
$0
endsnippet

snippet vyos_command "Run one or more commands on VyOS devices"
- name:
	vyos_command:
		commands: ${1:# The ordered set of commands to execute on the remote device running VyOS.  The output from the command execution is returned to the playbook.  If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has been exceeded.}
		retries: ${2:10}
		interval: ${3:1}
		provider: ${4:# A dict object containing connection details.}
		wait_for: ${5:# Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward.  If the conditional is not true by the configured I(retries), the task fails. See examples.}
		match: ${6:any|#all}
$0
endsnippet

snippet vyos_config "Manage VyOS configuration on remote device"
- name:
	vyos_config:
		comment: ${1:configured by vyos_config}
		src: ${2:# The C(src) argument specifies the path to the source config file to load.  The source config file can either be in bracket format or set format.  The source file can include Jinja2 template variables.}
		provider: ${3:# A dict object containing connection details.}
		config: ${4:# The C(config) argument specifies the base configuration to use to compare against the desired configuration.  If this value is not specified, the module will automatically retrieve the current active configuration from the remote device.}
		lines: ${5:# The ordered set of configuration lines to be managed and compared with the existing configuration on the remote device.}
		save: ${6:yes|no}
		backup: ${7:yes|no}
		match: ${8:#line|none}
$0
endsnippet

snippet vyos_facts "Collect facts from remote devices running VyOS"
- name:
	vyos_facts:
		gather_subset: ${1:!config}
		provider: ${2:# A dict object containing connection details.}
$0
endsnippet

snippet vyos_system "Run `set system` commands on VyOS devices"
- name:
	vyos_system:
		state: ${1:#present|absent}
		name_server: ${2:# A list of name servers to use with the device. Mutually exclusive with I(domain_search)}
		provider: ${3:# A dict object containing connection details.}
		domain_search: ${4:# A list of domain names to search. Mutually exclusive with I(name_server)}
		hostname: ${5:# Configure the device hostname parameter. This option takes an ASCII string value.}
		domain_name: ${6:# The new domain name to apply to the device.}
$0
endsnippet

snippet campfire "Send a message to Campfire"
- name:
	campfire:
		msg: ${1:# The message body.}
		token: ${2:# API token.}
		subscription: ${3:# The subscription name to use.}
		room: ${4:# Room number to which the message should be sent.}
		notify: ${5:56k|bell|bezos|bueller|clowntown|cottoneyejoe|crickets|dadgummit|dangerzone|danielsan|deeper|drama|greatjob|greyjoy|guarantee|heygirl|horn|horror|inconceivable|live|loggins|makeitso|noooo|nyan|ohmy|ohyeah|pushit|rimshot|rollout|rumble|sax|secret|sexyback|story|tada|tmyk|trololo|trombone|unix|vuvuzela|what|whoomp|yeah|yodel}
$0
endsnippet

snippet cisco_spark "Send a message to a Cisco Spark Room or Individual."
- name:
	cisco_spark:
		personal_token: ${1:# Your personal access token required to validate the Spark API.}
		message: ${2:# The message you would like to send.}
		recipient_id: ${3:# The unique identifier associated with the supplied C(recipient_type).}
		recipient_type: ${4:roomId|toPersonEmail|toPersonId}
		message_type: ${5:#text|markdown}
$0
endsnippet

snippet flowdock "Send a message to a flowdock"
- name:
	flowdock:
		type: ${1:inbox|chat}
		token: ${2:# API token.}
		msg: ${3:# Content of the message}
		from_name: ${4:# (inbox only) Name of the message sender}
		from_address: ${5:# (inbox only - required) Email address of the message sender}
		tags: ${6:# tags of the message, separated by commas}
		external_user_name: ${7:# (chat only - required) Name of the "user" sending the message}
		project: ${8:# (inbox only) Human readable identifier for more detailed message categorization}
		source: ${9:# (inbox only - required) Human readable identifier of the application that uses the Flowdock API}
		link: ${10:# (inbox only) Link associated with the message. This will be used to link the message subject in Team Inbox.}
		reply_to: ${11:# (inbox only) Email address for replies}
		subject: ${12:# (inbox only - required) Subject line of the message}
		validate_certs: ${13:#yes|no}
$0
endsnippet

snippet grove "Sends a notification to a grove.io channel"
- name:
	grove:
		message: ${1:# Message content}
		channel_token: ${2:# Token of the channel to post to.}
		service: ${3:ansible}
		url: ${4:# Service URL for the web client}
		icon_url: ${5:# Icon for the service}
		validate_certs: ${6:#yes|no}
$0
endsnippet

snippet hall "Send notification to Hall"
- name:
	hall:
		msg: ${1:# The message you wish to deliver as a notifcation}
		room_token: ${2:# Room token provided to you by setting up the Ansible room integation on U(https://hall.com)}
		title: ${3:# The title of the message}
		picture: ${4:# The full URL to the image you wish to use for the Icon of the message. Defaults to U(http://cdn2.hubspot.net/hub/330046/file-769078210-png/Official_Logos/ansible_logo_black_square_small.png?t=1421076128627)}
$0
endsnippet

snippet hipchat "Send a message to Hipchat."
- name:
	hipchat:
		room: ${1:# ID or name of the room.}
		token: ${2:# API token.}
		msg: ${3:# The message body.}
		from: ${4:Ansible}
		color: ${5:#yellow|red|green|purple|gray|random}
		msg_format: ${6:#text|html}
		api: ${7:https://api.hipchat.com/v1}
		notify: ${8:#yes|no}
		validate_certs: ${9:#yes|no}
$0
endsnippet

snippet irc "Send a message to an IRC channel"
- name:
	irc:
		msg: ${1:# The message body.}
		channel: ${2:# Channel name.  One of nick_to or channel needs to be set.  When both are set, the message will be sent to both of them.}
		style: ${3:bold|underline|reverse|italic}
		key: ${4:# Channel key}
		passwd: ${5:# Server password}
		color: ${6:#none|white|black|blue|green|red|brown|purple|orange|yellow|light_green|teal|light_cyan|light_blue|pink|gray|light_gray}
		server: ${7:localhost}
		topic: ${8:# Set the channel topic}
		nick: ${9:ansible}
		part: ${10:yes}
		nick_to: ${11:# A list of nicknames to send the message to. One of nick_to or channel needs to be set.  When both are defined, the message will be sent to both of them.}
		timeout: ${12:30}
		use_ssl: ${13:no}
		port: ${14:6667}
$0
endsnippet

snippet jabber "Send a message to jabber user or chat room"
- name:
	jabber:
		to: ${1:# user ID or name of the room, when using room use a slash to indicate your nick.}
		user: ${2:# User as which to connect}
		msg: ${3:# The message body.}
		password: ${4:# password for user to connect}
		host: ${5:# host to connect, overrides user info}
		encoding: ${6:# message encoding}
		port: ${7:5222}
$0
endsnippet

snippet mail "Send an email"
- name:
	mail:
		subject: ${1:# The subject of the email being sent.}
		body: ${2:$subject}
		username: ${3:# If SMTP requires username}
		secure: ${4:always|never|#try|starttls}
		cc: ${5:# The email-address(es) the mail is being copied to. This is a comma-separated list, which may contain address and phrase portions.}
		host: ${6:localhost}
		password: ${7:# If SMTP requires password}
		port: ${8:25}
		to: ${9:root}
		from: ${10:root}
		headers: ${11:# A vertical-bar-separated list of headers which should be added to the message. Each individual header is specified as C(header=value) (see example below).}
		charset: ${12:us-ascii}
		bcc: ${13:# The email-address(es) the mail is being 'blind' copied to. This is a comma-separated list, which may contain address and phrase portions.}
		attach: ${14:# A space-separated list of pathnames of files to attach to the message. Attached files will have their content-type set to C(application/octet-stream).}
		timeout: ${15:20}
		subtype: ${16:plain}
$0
endsnippet

snippet mattermost "Send Mattermost notifications"
- name:
	mattermost:
		url: ${1:# Mattermost url (i.e. http://mattermost.yourcompany.com).}
		text: ${2:# Text to send. Note that the module does not handle escaping characters.}
		api_key: ${3:# Mattermost webhook api key. Log into your mattermost site, go to Menu -> Integration -> Incomming Webhook -> Add Incomming Webhook. This will give you full URL. api_key is the last part. http://mattermost.example.com/hooks/C(API_KEY)}
		username: ${4:Ansible}
		icon_url: ${5:https://www.ansible.com/favicon.ico}
		validate_certs: ${6:yes|no}
		channel: ${7:# Channel to send the message to. If absent, the message goes to the channel selected for the I(api_key).}
$0
endsnippet

snippet mqtt "Publish a message on an MQTT topic for the IoT"
- name:
	mqtt:
		topic: ${1:# MQTT topic name}
		payload: ${2:# Payload. The special string C("None") may be used to send a NULL (i.e. empty) payload which is useful to simply notify with the I(topic) or to clear previously retained messages.}
		username: ${3:# Username to authenticate against the broker.}
		certfile: ${4:# The path pointing to the PEM encoded client certificate. If this is not None it will be used as client information for TLS based authentication. Support for this feature is broker dependent.}
		port: ${5:1883}
		server: ${6:localhost}
		client_id: ${7:hostname + pid}
		ca_certs: ${8:# The path to the Certificate Authority certificate files that are to be treated as trusted by this client. If this is the only option given then the client will operate in a similar manner to a web browser. That is to say it will require the broker to have a certificate signed by the Certificate Authorities in ca_certs and will communicate using TLS v1, but will not attempt any form of authentication. This provides basic network encryption but may not be sufficient depending on how the broker is configured.}
		retain: ${9:no}
		password: ${10:# Password for C(username) to authenticate against the broker.}
		keyfile: ${11:# The path pointing to the PEM encoded client private key. If this is not None it will be used as client information for TLS based authentication. Support for this feature is broker dependent.}
		qos: ${12:0|1|2}
$0
endsnippet

snippet nexmo "Send a SMS via nexmo"
- name:
	nexmo:
		src: ${1:# Nexmo Number to send from}
		dest: ${2:# Phone number(s) to send SMS message to}
		api_secret: ${3:# Nexmo API Secret}
		api_key: ${4:# Nexmo API Key}
		msg: ${5:# Message to text to send. Messages longer than 160 characters will be split into multiple messages}
		validate_certs: ${6:#yes|no}
$0
endsnippet

snippet osx_say "Makes an OSX computer to speak."
- name:
	osx_say:
		msg: ${1:# W}
		voice: ${2:# W}
$0
endsnippet

snippet pushbullet "Sends notifications to Pushbullet"
- name:
	pushbullet:
		title: ${1:# Title of the notification.}
		api_key: ${2:# Push bullet API token}
		body: ${3:# Body of the notification, e.g. Details of the fault you're alerting.}
		device: ${4:# The device NAME you wish to send a push notification, as seen on the Pushbullet main page.}
		push_type: ${5:#note|link}
		channel: ${6:# The channel TAG you wish to broadcast a push notification, as seen on the "My Channels" > "Edit your channel" at Pushbullet page.}
$0
endsnippet

snippet pushover "Send notifications via U(https://pushover.net)"
- name:
	pushover:
		msg: ${1:# What message you wish to send.}
		user_key: ${2:# Pushover issued authentication key for your user.}
		app_token: ${3:# Pushover issued token identifying your pushover app.}
		pri: ${4:# Message priority (see U(https://pushover.net) for details.)}
$0
endsnippet

snippet rocketchat "Send notifications to Rocket Chat"
- name:
	rocketchat:
		domain: ${1:# The domain for your environment without protocol. (i.e. C(example.com) or C(chat.example.com))}
		token: ${2:# Rocket Chat Incoming Webhook integration token.  This provides authentication to Rocket Chat's Incoming webhook for posting messages.}
		username: ${3:Ansible}
		protocol: ${4:http|#https}
		attachments: ${5:# Define a list of attachments.}
		color: ${6:#normal|good|warning|danger}
		icon_url: ${7:https://www.ansible.com/favicon.ico}
		icon_emoji: ${8:# Emoji for the message sender. The representation for the available emojis can be got from Rocket Chat. (for example :thumbsup:) (if I(icon_emoji) is set, I(icon_url) will not be used)}
		link_names: ${9:#1|0}
		msg: ${10:# Message to be sent.}
		validate_certs: ${11:#yes|no}
		channel: ${12:# Channel to send the message to. If absent, the message goes to the channel selected for the I(token) specifed during the creation of webhook.}
$0
endsnippet

snippet sendgrid "Sends an email with the SendGrid API"
- name:
	sendgrid:
		from_address: ${1:# the address in the "from" field for the email}
		subject: ${2:# the desired subject for the email}
		to_addresses: ${3:# a list with one or more recipient email addresses}
		username: ${4:# username for logging into the SendGrid account.}
		from_name: ${5:# the name you want to appear in the from field, i.e 'John Doe'}
		cc: ${6:# a list of email addresses to cc}
		bcc: ${7:# a list of email addresses to bcc}
		headers: ${8:# a dict to pass on as headers}
		html_body: ${9:no}
		api_key: ${10:# sendgrid API key to use instead of username/password}
		password: ${11:# password that corresponds to the username}
		attachments: ${12:# a list of relative or explicit paths of files you want to attach (7MB limit as per SendGrid docs)}
$0
endsnippet

snippet slack "Send Slack notifications"
- name:
	slack:
		token: ${1:# Slack integration token.  This authenticates you to the slack service. Prior to 1.8, a token looked like C(3Ffe373sfhRE6y42Fg3rvf4GlK).  In 1.8 and above, ansible adapts to the new slack API where tokens look like C(G922VJP24/D921DW937/3Ffe373sfhRE6y42Fg3rvf4GlK).  If tokens are in the new format then slack will ignore any value of domain.  If the token is in the old format the domain is required.  Ansible has no control of when slack will get rid of the old API.  When slack does that the old format will stop working.  ** Please keep in mind the tokens are not the API tokens but are the webhook tokens.  In slack these are found in the webhook URL which are obtained under the apps and integrations. The incoming webhooks can be added in that area.  In some cases this may be locked by your Slack admin and you must request access.  It is there that the incoming webhooks can be added.  The key is on the end of the URL given to you in that section.}
		username: ${2:Ansible}
		domain: ${3:# Slack (sub)domain for your environment without protocol. (i.e. C(example.slack.com)) In 1.8 and beyond, this is deprecated and may be ignored.  See token documentation for information.}
		attachments: ${4:# Define a list of attachments. This list mirrors the Slack JSON API. For more information, see https://api.slack.com/docs/attachments}
		color: ${5:#normal|good|warning|danger}
		icon_url: ${6:# Url for the message sender's icon (default C(https://www.ansible.com/favicon.ico))}
		parse: ${7:full|none}
		icon_emoji: ${8:# Emoji for the message sender. See Slack documentation for options. (if I(icon_emoji) is set, I(icon_url) will not be used)}
		link_names: ${9:#1|0}
		msg: ${10:# Message to send. Note that the module does not handle escaping characters. Plain-text angle brackets and ampersands should be converted to HTML entities (e.g. & to &amp;) before sending. See Slack's documentation (U(https://api.slack.com/docs/message-formatting)) for more.}
		validate_certs: ${11:#yes|no}
		channel: ${12:# Channel to send the message to. If absent, the message goes to the channel selected for the I(token).}
$0
endsnippet

snippet sns "Send Amazon Simple Notification Service (SNS) messages"
- name:
	sns:
		topic: ${1:# The topic you want to publish to.}
		msg: ${2:# Default message to send.}
		message_structure: ${3:#json|string}
		aws_secret_key: ${4:# AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used.}
		aws_access_key: ${5:# AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.}
		http: ${6:# Message to send to HTTP-only subscription}
		sqs: ${7:# Message to send to SQS-only subscription}
		region: ${8:# The AWS region to use. If not specified then the value of the EC2_REGION environment variable, if any, is used.}
		sms: ${9:# Message to send to SMS-only subscription}
		https: ${10:# Message to send to HTTPS-only subscription}
		message_attributes: ${11:# Dictionary of message attributes. These are optional structured data entries to be sent along to the endpoint.}
		email: ${12:# Message to send to email-only subscription}
		subject: ${13:# Subject line for email delivery.}
$0
endsnippet

snippet telegram "module for sending notifications via telegram"
- name:
	telegram:
		msg: ${1:# What message you wish to send.}
		token: ${2:# Token identifying your telegram bot.}
		chat_id: ${3:# Telegram group or user chat_id}
$0
endsnippet

snippet twilio "Sends a text message to a mobile phone through Twilio."
- name:
	twilio:
		from_number: ${1:# t}
		msg: ${2:# t}
		auth_token: ${3:# u}
		to_number: ${4:# o}
		account_sid: ${5:# u}
		media_url: ${6:# a}
$0
endsnippet

snippet typetalk "Send a message to typetalk"
- name:
	typetalk:
		topic: ${1:# topic id to post message}
		client_secret: ${2:# OAuth2 client secret}
		client_id: ${3:# OAuth2 client ID}
		msg: ${4:# message body}
$0
endsnippet

snippet bower "Manage bower packages with bower"
- name:
	bower:
		path: ${1:# The base path where to install the bower packages}
		state: ${2:#present|absent|latest}
		production: ${3:yes|no}
		name: ${4:# The name of a bower package to install}
		version: ${5:# The version to be installed}
		relative_execpath: ${6:# Relative path to bower executable from install path}
		offline: ${7:yes|no}
$0
endsnippet

snippet bundler "Manage Ruby Gem dependencies with Bundler"
- name:
	bundler:
		executable: ${1:# The path to the bundler executable}
		chdir: ${2:temporary working directory}
		gemfile: ${3:Gemfile in current directory}
		clean: ${4:True|False}
		user_install: ${5:True|False}
		extra_args: ${6:# A space separated string of additional commands that can be applied to the Bundler command. Refer to the Bundler documentation for more information}
		state: ${7:#present|latest}
		deployment_mode: ${8:True|False}
		binstub_directory: ${9:# Only applies if state is C(present). Specifies the directory to install any gem bins files to. When executed the bin files will run within the context of the Gemfile and fail if any required gem dependencies are not installed. If C(chdir) is set then this path is relative to C(chdir)}
		exclude_groups: ${10:# A list of Gemfile groups to exclude during operations. This only applies when state is C(present). Bundler considers this a 'remembered' property for the Gemfile and will automatically exclude groups in future operations even if C(exclude_groups) is not set}
		local: ${11:True|False}
		gem_path: ${12:RubyGems gem paths}
$0
endsnippet

snippet composer "Dependency Manager for PHP"
- name:
	composer:
		working_dir: ${1:# Directory of your project (see --working-dir).}
		no_scripts: ${2:True|#False}
		prefer_source: ${3:True|#False}
		prefer_dist: ${4:True|#False}
		command: ${5:install}
		arguments: ${6:# Composer arguments like required package, version and so on.}
		ignore_platform_reqs: ${7:True|#False}
		no_dev: ${8:#True|False}
		no_plugins: ${9:True|#False}
		optimize_autoloader: ${10:#True|False}
$0
endsnippet

snippet cpanm "Manages Perl library dependencies."
- name:
	cpanm:
		executable: ${1:# Override the path to the cpanm executable}
		name: ${2:# The name of the Perl library to install. You may use the "full distribution path", e.g.  MIYAGAWA/Plack-0.99_05.tar.gz}
		installdeps: ${3:no}
		system_lib: ${4:no}
		mirror_only: ${5:no}
		from_path: ${6:# The local directory from where to install}
		version: ${7:no}
		mirror: ${8:no}
		locallib: ${9:no}
		notest: ${10:no}
$0
endsnippet

snippet easy_install "Installs Python libraries"
- name:
	easy_install:
		name: ${1:# A Python library name}
		virtualenv: ${2:# an optional I(virtualenv) directory path to install into. If the I(virtualenv) does not exist, it is created automatically}
		virtualenv_site_packages: ${3:yes|#no}
		virtualenv_command: ${4:virtualenv}
		state: ${5:#present|latest}
		executable: ${6:# The explicit executable or a pathname to the executable to be used to run easy_install for a specific version of Python installed in the system. For example C(easy_install-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run easy_install for the Python 3.3 installation.}
$0
endsnippet

snippet gem "Manage Ruby gems"
- name:
	gem:
		name: ${1:# The name of the gem to be managed.}
		include_dependencies: ${2:#yes|no}
		executable: ${3:# Override the path to the gem executable}
		repository: ${4:# The repository from which the gem will be installed}
		build_flags: ${5:# Allow adding build flags for gem compilation}
		include_doc: ${6:no}
		user_install: ${7:yes}
		pre_release: ${8:no}
		env_shebang: ${9:no}
		state: ${10:#present|absent|latest}
		version: ${11:# Version of the gem to be installed/removed.}
		gem_source: ${12:# The path to a local gem used as installation source.}
$0
endsnippet

snippet maven_artifact "Downloads an Artifact from a Maven Repository"
- name:
	maven_artifact:
		group_id: ${1:# The Maven groupId coordinate}
		artifact_id: ${2:# The maven artifactId coordinate}
		dest: ${3:no}
		state: ${4:#present|absent}
		username: ${5:# The username to authenticate as to the Maven Repository. Use AWS secret key of the repository is hosted on S3}
		extension: ${6:jar}
		version: ${7:latest}
		timeout: ${8:10}
		repository_url: ${9:http://repo1.maven.org/maven2}
		password: ${10:# The password to authenticate with to the Maven Repository. Use AWS secret access key of the repository is hosted on S3}
		validate_certs: ${11:#yes|no}
		classifier: ${12:# The maven classifier coordinate}
$0
endsnippet

snippet npm "Manage node.js packages with npm"
- name:
	npm:
		executable: ${1:# The executable location for npm.}
		name: ${2:# The name of a node.js library to install}
		global: ${3:yes|no}
		ignore_scripts: ${4:yes|no}
		state: ${5:#present|absent|latest}
		production: ${6:yes|no}
		registry: ${7:# The registry to install modules from.}
		version: ${8:# The version to be installed}
		path: ${9:# The base path where to install the node.js libraries}
$0
endsnippet

snippet pear "Manage pear/pecl packages"
- name:
	pear:
		name: ${1:# Name of the package to install, upgrade, or remove.}
		state: ${2:#present|absent|latest}
$0
endsnippet

snippet pip "Manages Python library dependencies."
- name:
	pip:
		virtualenv: ${1:# An optional path to a I(virtualenv) directory to install into. It cannot be specified together with the 'executable' parameter (added in 2.1). If the virtualenv does not exist, it will be created before installing packages. The optional virtualenv_site_packages, virtualenv_command, and virtualenv_python options affect the creation of the virtualenv.}
		virtualenv_site_packages: ${2:yes|#no}
		virtualenv_command: ${3:virtualenv}
		chdir: ${4:# cd into this directory before running the command}
		requirements: ${5:# The path to a pip requirements file, which should be local to the remote system. File can be specified as a relative path if using the chdir option.}
		name: ${6:# The name of a Python library to install or the url of the remote package.}
		virtualenv_python: ${7:# The Python executable used for creating the virtual environment. For example C(python3.5), C(python2.7). When not specified, the Python version used to run the ansible module is used.}
		editable: ${8:yes}
		umask: ${9:# The system umask to apply before installing the pip package. This is useful, for example, when installing on systems that have a very restrictive umask by default (e.g., 0077) and you want to pip install packages which are to be used by all users. Note that this requires you to specify desired umask mode in octal, with a leading 0 (e.g., 0077).}
		executable: ${10:# The explicit executable or a pathname to the executable to be used to run pip for a specific version of Python installed in the system. For example C(pip-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation. It cannot be specified together with the 'virtualenv' parameter (added in 2.1). By default, it will take the appropriate version for the python interpreter use by ansible, e.g. pip3 on python 3, and pip2 or pip on python 2.}
		extra_args: ${11:# Extra arguments passed to pip.}
		state: ${12:#present|absent|latest|forcereinstall}
		version: ${13:# The version number to install of the Python library specified in the I(name) parameter}
$0
endsnippet

snippet apk "Manages apk packages"
- name:
	apk:
		state: ${1:#present|absent|latest}
		upgrade: ${2:yes|no}
		update_cache: ${3:yes|no}
		name: ${4:# A package name, like C(foo), or mutliple packages, like C(foo, bar).}
$0
endsnippet

snippet apt "Manages apt-packages"
- name:
	apt:
		dpkg_options: ${1:force-confdef,force-confold}
		upgrade: ${2:#no|yes|safe|full|dist}
		force: ${3:yes|#no}
		name: ${4:# A package name, like C(foo), or package specifier with version, like C(foo=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported.  Note that the apt-get commandline supports implicit regex matches here but we do not because it can let typos through easier (If you typo C(foo) as C(fo) apt-get would install packages that have "fo" in their name with a warning and a prompt for the user.  Since we don't have warnings and prompts before installing we disallow this.  Use an explicit fnmatch pattern if you want wildcarding)}
		purge: ${5:yes|no}
		allow_unauthenticated: ${6:yes|#no}
		state: ${7:latest|absent|#present|build-dep}
		autoremove: ${8:yes|no}
		update_cache: ${9:yes|no}
		default_release: ${10:# Corresponds to the C(-t) option for I(apt) and sets pin priorities}
		only_upgrade: ${11:no}
		cache_valid_time: ${12:0}
		deb: ${13:# Path to a .deb package on the remote machine.}
		install_recommends: ${14:yes|no}
$0
endsnippet

snippet apt_key "Add or remove an apt key"
- name:
	apt_key:
		keyserver: ${1:none}
		url: ${2:none}
		data: ${3:none}
		keyring: ${4:none}
		state: ${5:absent|#present}
		file: ${6:none}
		validate_certs: ${7:#yes|no}
		id: ${8:none}
$0
endsnippet

snippet apt_repository "Add and remove APT repositories"
- name:
	apt_repository:
		repo: ${1:none}
		state: ${2:absent|#present}
		update_cache: ${3:#yes|no}
		mode: ${4:420}
		codename: ${5:# Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (e.g. Debian or Mint)}
		validate_certs: ${6:#yes|no}
		filename: ${7:# Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added.}
$0
endsnippet

snippet apt_rpm "apt_rpm package manager"
- name:
	apt_rpm:
		pkg: ${1:# name of package to install, upgrade or remove.}
		state: ${2:absent|#present}
		update_cache: ${3:yes|no}
$0
endsnippet

snippet dnf "Manages packages with the I(dnf) package manager"
- name:
	dnf:
		name: ${1:# Package name, or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file.}
		list: ${2:# Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. See examples.}
		disable_gpg_check: ${3:yes|#no}
		conf_file: ${4:# The remote dnf configuration file to use for the transaction.}
		state: ${5:#present|latest|absent}
		disablerepo: ${6:# I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".}
		enablerepo: ${7:# I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".}
		installroot: ${8:/}
$0
endsnippet

snippet dpkg_selections "Dpkg package selection selections"
- name:
	dpkg_selections:
		selection: ${1:install|hold|deinstall|purge}
		name: ${2:# Name of the package}
$0
endsnippet

snippet homebrew "Package manager for Homebrew"
- name:
	homebrew:
		install_options: ${1:# options flags to install a package}
		state: ${2:head|latest|#present|absent|linked|unlinked}
		name: ${3:# name of package to install/remove}
		update_homebrew: ${4:yes|no}
		path: ${5:/usr/local/bin}
		upgrade_all: ${6:yes|no}
$0
endsnippet

snippet homebrew_cask "Install/uninstall homebrew casks."
- name:
	homebrew_cask:
		name: ${1:# name of cask to install/remove}
		update_homebrew: ${2:yes|no}
		path: ${3:/usr/local/bin}
		state: ${4:#present|absent}
		install_options: ${5:# options flags to install a package}
$0
endsnippet

snippet homebrew_tap "Tap a Homebrew repository."
- name:
	homebrew_tap:
		name: ${1:# The GitHub user/organization repository to tap.}
		url: ${2:# The optional git URL of the repository to tap. The URL is not assumed to be on GitHub, and the protocol doesn't have to be HTTP. Any location and protocol that git can handle is fine.}
		state: ${3:#present|absent}
$0
endsnippet

snippet layman "Manage Gentoo overlays"
- name:
	layman:
		name: ${1:# The overlay id to install, synchronize, or uninstall. Use 'ALL' to sync all of the installed overlays (can be used only when C(state=updated)).}
		list_url: ${2:# An URL of the alternative overlays list that defines the overlay to install. This list will be fetched and saved under C(${overlay_defs})/${name}.xml), where C(overlay_defs) is readed from the Layman's configuration.}
		validate_certs: ${3:#yes|no}
		state: ${4:#present|absent|updated}
$0
endsnippet

snippet macports "Package manager for MacPorts"
- name:
	macports:
		name: ${1:# name of package to install/remove}
		state: ${2:#present|absent|active|inactive}
		update_cache: ${3:yes|#no}
$0
endsnippet

snippet openbsd_pkg "Manage packages on OpenBSD."
- name:
	openbsd_pkg:
		state: ${1:present|latest|absent}
		name: ${2:# Name of the package.}
		ports_dir: ${3:/usr/ports}
		clean: ${4:True|#False}
		quick: ${5:True|#False}
		build: ${6:True|#False}
$0
endsnippet

snippet opkg "Package manager for OpenWrt"
- name:
	opkg:
		name: ${1:# name of package to install/remove}
		force: ${2:|depends|maintainer|reinstall|overwrite|downgrade|space|postinstall|remove|checksum|removal-of-dependent-packages}
		state: ${3:#present|absent}
		update_cache: ${4:yes|#no}
$0
endsnippet

snippet package "Generic OS package manager"
- name:
	package:
		state: ${1:# Whether to install (C(present), C(latest)), or remove (C(absent)) a package.}
		name: ${2:# Package name, or package specifier with version, like C(name-1.0).}
		use: ${3:auto}
$0
endsnippet

snippet pacman "Manage packages with I(pacman)"
- name:
	pacman:
		state: ${1:#present|absent|latest}
		upgrade: ${2:yes|no}
		force: ${3:yes|no}
		name: ${4:# Name of the package to install, upgrade, or remove.}
		update_cache: ${5:yes|no}
		recurse: ${6:yes|no}
$0
endsnippet

snippet pkg5 "Manages packages with the Solaris 11 Image Packaging System"
- name:
	pkg5:
		name: ${1:# An FRMI of the package(s) to be installed/removed/updated.}
		accept_licenses: ${2:True|#False}
		state: ${3:#present|latest|absent}
$0
endsnippet

snippet pkg5_publisher "Manages Solaris 11 Image Packaging System publishers"
- name:
	pkg5_publisher:
		name: ${1:# The publisher's name.}
		origin: ${2:# A path or URL to the repository.}
		state: ${3:#present|absent}
		mirror: ${4:# A path or URL to the repository mirror.}
		enabled: ${5:True|False}
		sticky: ${6:True|False}
$0
endsnippet

snippet pkgin "Package manager for SmartOS, NetBSD, et al."
- name:
	pkgin:
		state: ${1:#present|absent}
		upgrade: ${2:yes|no}
		force: ${3:yes|no}
		name: ${4:# Name of package to install/remove;}
		full_upgrade: ${5:yes|no}
		update_cache: ${6:yes|no}
		clean: ${7:yes|no}
$0
endsnippet

snippet pkgng "Package manager for FreeBSD >= 9.0"
- name:
	pkgng:
		name: ${1:# Name of package to install/remove.}
		chroot: ${2:# Pkg will chroot in the specified environment.}
		cached: ${3:yes|no}
		pkgsite: ${4:# For pkgng versions before 1.1.4, specify packagesite to use for downloading packages. If not specified, use settings from C(/usr/local/etc/pkg.conf).}
		state: ${5:#present|absent}
		rootdir: ${6:# For pkgng versions 1.5 and later, pkg will install all packages within the specified root directory.}
		autoremove: ${7:yes|no}
		annotation: ${8:# A comma-separated list of keyvalue-pairs of the form C(<+/-/:><key>[=<value>]). A C(+) denotes adding an annotation, a C(-) denotes removing an annotation, and C(:) denotes modifying an annotation. If setting or modifying annotations, a value must be provided.}
$0
endsnippet

snippet pkgutil "Manage CSW-Packages on Solaris"
- name:
	pkgutil:
		state: ${1:present|absent|latest}
		name: ${2:# Package name, e.g. (C(CSWnrpe))}
		site: ${3:# Specifies the repository path to install the package from.}
		update_catalog: ${4:no}
$0
endsnippet

snippet portage "Package manager for Gentoo"
- name:
	portage:
		nodeps: ${1:yes|no}
		onlydeps: ${2:yes|no}
		newuse: ${3:yes|no}
		oneshot: ${4:yes|no}
		update: ${5:yes|no}
		deep: ${6:yes|no}
		sync: ${7:web|yes|no}
		keepgoing: ${8:yes|no}
		depclean: ${9:yes|no}
		jobs: ${10:# Specifies the number of packages to build simultaneously.}
		noreplace: ${11:yes|no}
		loadavg: ${12:# Specifies that no new builds should be started if there are}
		verbose: ${13:yes|no}
		getbinpkg: ${14:yes|no}
		package: ${15:# Package atom or set, e.g. C(sys-apps/foo) or C(>foo-2.13) or C(@world)}
		quiet: ${16:yes|no}
		state: ${17:#present|installed|emerged|absent|removed|unmerged|latest}
		changed_use: ${18:yes|no}
		usepkgonly: ${19:yes|no}
$0
endsnippet

snippet portinstall "Installing packages from FreeBSD's ports system"
- name:
	portinstall:
		name: ${1:# name of package to install/remove}
		state: ${2:#present|absent}
		use_packages: ${3:yes|no}
$0
endsnippet

snippet pulp_repo "Add or remove Pulp repos from a remote host."
- name:
	pulp_repo:
		relative_url: ${1:# Relative URL for the local repository.}
		name: ${2:# Name of the repo to add or remove. This correlates to repo-id in Pulp.}
		feed: ${3:# Upstream feed URL to receive updates from.}
		repo_type: ${4:rpm}
		pulp_host: ${5:http://127.0.0.1}
		force_basic_auth: ${6:yes|#no}
		importer_ssl_client_cert: ${7:# Certificate used as the client certificate when synchronizing the repository. This is used to communicate authentication information to the feed source. The value to this option must be the full path to the certificate. The specified file may be the certificate itself or a single file containing both the certificate and private key. This can be the file content or the path to the file.}
		proxy_port: ${8:# Proxy port setting for the pulp repository importer.}
		serve_http: ${9:no}
		wait_for_completion: ${10:yes|#no}
		add_export_distributor: ${11:no}
		url_password: ${12:# The password for use in HTTP basic authentication to the pulp API. If the I(url_username) parameter is not specified, the I(url_password) parameter will not be used.}
		importer_ssl_client_key: ${13:# Private key to the certificate specified in I(importer_ssl_client_cert), assuming it is not included in the certificate file itself. This can be the file content or the path to the file.}
		publish_distributor: ${14:# Distributor to use when state is C(publish). The default is to publish all distributors.}
		proxy_host: ${15:# Proxy url setting for the pulp repository importer. This is in the format scheme://host.}
		state: ${16:#present|absent|sync|publish}
		serve_https: ${17:yes}
		importer_ssl_ca_cert: ${18:# CA certificate string used to validate the feed source SSL certificate. This can be the file content or the path to the file.}
		url_username: ${19:# The username for use in HTTP basic authentication to the pulp API.}
		validate_certs: ${20:#yes|no}
$0
endsnippet

snippet redhat_subscription "Manage registration and subscriptions to RHSM using the C(subscription-manager) command"
- name:
	redhat_subscription:
		username: ${1:# access.redhat.com or Sat6  username}
		server_hostname: ${2:Current value from C(/etc/rhsm/rhsm.conf) is the default}
		password: ${3:# access.redhat.com or Sat6 password}
		consumer_type: ${4:# The type of unit to register, defaults to system}
		org_id: ${5:# Organization ID to use in conjunction with activationkey}
		consumer_id: ${6:# References an existing consumer ID to resume using a previous registration
for this system. If the  system's identity certificate is lost or corrupted,
this option allows it to resume using its previous identity and subscriptions.
The default is to not specify a consumer ID so a new ID is created.
}
		environment: ${7:# Register with a specific environment in the destination org. Used with Red Hat Satellite 6.x or Katello}
		force_register: ${8:no}
		state: ${9:#present|absent}
		autosubscribe: ${10:no}
		activationkey: ${11:# supply an activation key for use with registration}
		server_insecure: ${12:Current value from C(/etc/rhsm/rhsm.conf) is the default}
		consumer_name: ${13:# Name of the system to register, defaults to the hostname}
		rhsm_baseurl: ${14:Current value from C(/etc/rhsm/rhsm.conf) is the default}
		pool: ${15:^$}
$0
endsnippet

snippet rhn_channel "Adds or removes Red Hat software channels"
- name:
	rhn_channel:
		sysname: ${1:# name of the system as it is known in RHN/Satellite}
		name: ${2:# name of the software channel}
		url: ${3:# The full url to the RHN/Satellite api}
		password: ${4:# the user's password}
		user: ${5:# RHN/Satellite user}
		state: ${6:present}
$0
endsnippet

snippet rhn_register "Manage Red Hat Network registration using the C(rhnreg_ks) command"
- name:
	rhn_register:
		username: ${1:# Red Hat Network username}
		systemorgid: ${2:# supply an organizational id for use with registration}
		enable_eus: ${3:no}
		server_url: ${4:Current value of I(serverURL) from C(/etc/sysconfig/rhn/up2date) is the default}
		channels: ${5:[]}
		state: ${6:#present|absent}
		sslcacert: ${7:# supply a custom ssl CA certificate file for use with registration}
		activationkey: ${8:# supply an activation key for use with registration}
		profilename: ${9:# supply an profilename for use with registration}
		password: ${10:# Red Hat Network password}
$0
endsnippet

snippet rpm_key "Adds or removes a gpg key from the rpm db"
- name:
	rpm_key:
		key: ${1:# Key that will be modified. Can be a url, a file, or a keyid if the key already exists in the database.}
		state: ${2:#present|absent}
		validate_certs: ${3:#yes|no}
$0
endsnippet

snippet slackpkg "Package manager for Slackware >= 12.2"
- name:
	slackpkg:
		name: ${1:# name of package to install/remove}
		state: ${2:#present|absent|latest}
		update_cache: ${3:True|#False}
$0
endsnippet

snippet sorcery "Package manager for Source Mage GNU/Linux"
- name:
	sorcery:
		depends: ${1:# Comma-separated list of _optional_ dependencies to build a spell (or make sure it is built) with; use +/- in front of dependency to turn it on/off ('+' is optional though)}
		update_cache: ${2:yes|#no}
		name: ${3:# Name of the spell}
		state: ${4:#present|latest|absent|cast|dispelled|rebuild}
		update: ${5:yes|#no}
		cache_valid_time: ${6:# Time in seconds to invalidate grimoire collection on update}
$0
endsnippet

snippet svr4pkg "Manage Solaris SVR4 packages"
- name:
	svr4pkg:
		state: ${1:present|absent}
		name: ${2:# Package name, e.g. C(SUNWcsr)}
		category: ${3:true|false}
		src: ${4:# Specifies the location to install the package from. Required when C(state=present).}
		zone: ${5:current|#all}
		response_file: ${6:# Specifies the location of a response file to be used if package expects input on install. (added in Ansible 1.4)}
		proxy: ${7:# HTTP[s] proxy to be used if C(src) is a URL.}
$0
endsnippet

snippet swdepot "Manage packages with swdepot package manager (HP-UX)"
- name:
	swdepot:
		state: ${1:present|latest|absent}
		name: ${2:}
		depot: ${3:}
$0
endsnippet

snippet swupd "Manages updates and bundles in ClearLinux systems."
- name:
	swupd:
		contenturl: ${1:# URL pointing to the contents of available bundles. If not specified, the contents are retrieved from clearlinux.org.}
		name: ${2:# Name of the (I)bundle to install or remove.}
		format: ${3:# The format suffix for version file downloads. For example [1,2,3,staging,etc]. If not specified, the default format is used.}
		url: ${4:# Overrides both I(contenturl) and I(versionurl).}
		verify: ${5:# Verify content for OS version.}
		update: ${6:no}
		manifest: ${7:# The manifest contains information about the bundles at certaion version of the OS. Specify a Manifest version to verify against that version or leave unspecified to verify against the current version.}
		state: ${8:#present|absent}
		versionurl: ${9:# URL for version string download.}
$0
endsnippet

snippet urpmi "Urpmi manager"
- name:
	urpmi:
		pkg: ${1:# name of package to install, upgrade or remove.}
		update_cache: ${2:yes|no}
		state: ${3:absent|#present}
		force: ${4:yes|no}
		no-recommends: ${5:yes|no}
$0
endsnippet

snippet xbps "Manage packages with XBPS"
- name:
	xbps:
		recurse: ${1:yes|no}
		state: ${2:#present|absent|latest}
		upgrade: ${3:yes|no}
		update_cache: ${4:yes|no}
		name: ${5:# Name of the package to install, upgrade, or remove.}
$0
endsnippet

snippet yum "Manages packages with the I(yum) package manager"
- name:
	yum:
		name: ${1:# Package name, or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: yum -y update. You can also pass a url or a local path to a rpm file (using state=present).  To operate on several packages this can accept a comma separated list of packages or (as of 2.0) a list of packages.}
		exclude: ${2:# Package name(s) to exclude when state=present, or latest}
		list: ${3:# Package name to run the equivalent of yum list <package> against.}
		disable_gpg_check: ${4:yes|#no}
		conf_file: ${5:# The remote yum configuration file to use for the transaction.}
		state: ${6:#present|installed|latest|absent|removed}
		disablerepo: ${7:# I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".}
		update_cache: ${8:yes|#no}
		enablerepo: ${9:# I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a ",".}
		skip_broken: ${10:yes|#no}
		validate_certs: ${11:#yes|no}
		installroot: ${12:/}
$0
endsnippet

snippet yum_repository "Add or remove YUM repositories"
- name:
	yum_repository:
		name: ${1:# Unique repository ID.}
		seuser: ${2:# User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.}
		ip_resolve: ${3:4|6|IPv4|IPv6|#whatever}
		enabled: ${4:#yes|no}
		proxy_password: ${5:# Username to use for proxy.}
		mode: ${6:# Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers (like 0644). Leaving off the leading zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).}
		owner: ${7:# Name of the user that should own the file/directory, as would be fed to I(chown).}
		bandwidth: ${8:0}
		cost: ${9:1000}
		file: ${10:# File to use to save the repo in. Defaults to the value of I(name).}
		mirrorlist_expire: ${11:21600}
		exclude: ${12:# List of packages to exclude from updates or installs. This should be a space separated list. Shell globs using wildcards (eg. C(*) and C(?)) are allowed.}
		attributes: ${13:# Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).}
		keepalive: ${14:yes|#no}
		repo_gpgcheck: ${15:yes|#no}
		sslverify: ${16:#yes|no}
		failovermethod: ${17:#roundrobin|priority}
		unsafe_writes: ${18:no}
		deltarpm_metadata_percentage: ${19:100}
		gpgkey: ${20:# A URL pointing to the ASCII-armored GPG key file for the repository.}
		serole: ${21:# Role part of SELinux file context, C(_default) feature works as for I(seuser).}
		http_caching: ${22:#all|packages|none}
		priority: ${23:99}
		state: ${24:absent|#present}
		mirrorlist: ${25:# Specifies a URL to a file containing a list of baseurls.}
		params: ${26:# Option used to allow the user to overwrite any of the other options. To remove an option, set the value of the option to C(null).}
		setype: ${27:# Type part of SELinux file context, C(_default) feature works as for I(seuser).}
		gpgcheck: ${28:yes|#no}
		include: ${29:# Include external configuration file. Both, local path and URL is supported. Configuration file will be inserted at the position of the I(include=) line. Included files may contain further include lines. Yum will abort with an error if an inclusion loop is detected.}
		proxy_username: ${30:# Password for this proxy.}
		username: ${31:# Username to use for basic authentication to a repo or really any url.}
		metadata_expire: ${32:21600}
		description: ${33:# A human readable string describing the repository.}
		retries: ${34:10}
		selevel: ${35:s0}
		sslclientcert: ${36:# Path to the SSL client certificate yum should use to connect to repos/remote sites.}
		baseurl: ${37:# URL to the directory where the yum repository's 'repodata' directory lives.}
		gpgcakey: ${38:# A URL pointing to the ASCII-armored CA key file for the repository.}
		s3_enabled: ${39:yes|#no}
		includepkgs: ${40:# List of packages you want to only use from a repository. This should be a space separated list. Shell globs using wildcards (eg. C(*) and C(?)) are allowed. Substitution variables (e.g. C($releasever)) are honored here.}
		enablegroups: ${41:#yes|no}
		group: ${42:# Name of the group that should own the file/directory, as would be fed to I(chown).}
		password: ${43:# Password to use with the username for basic authentication.}
		ui_repoid_vars: ${44:releasever basearch}
		protect: ${45:yes|#no}
		ssl_check_cert_permissions: ${46:yes|#no}
		throttle: ${47:# Enable bandwidth throttling for downloads.}
		deltarpm_percentage: ${48:75}
		sslclientkey: ${49:# Path to the SSL client key yum should use to connect to repos/remote sites.}
		metalink: ${50:# Specifies a URL to a metalink file for the repomd.xml, a list of mirrors for the entire repository are generated by converting the mirrors for the repomd.xml file to a I(baseurl).}
		reposdir: ${51:/etc/yum.repos.d}
		skip_if_unavailable: ${52:yes|#no}
		keepcache: ${53:0|#1}
		sslcacert: ${54:# Path to the directory containing the databases of the certificate authorities yum should use to verify SSL certificates.}
		timeout: ${55:30}
		async: ${56:#yes|no}
		metadata_expire_filter: ${57:never|read-only:past|#read-only:present|read-only:future}
		proxy: ${58:# URL to the proxy server that yum should use. Set to C(_none_) to disable the global proxy setting.}
$0
endsnippet

snippet zypper "Manage packages on SUSE and openSUSE"
- name:
	zypper:
		name: ${1:# Package name C(name) or package specifier.}
		force: ${2:yes|#no}
		disable_gpg_check: ${3:yes|#no}
		state: ${4:#present|latest|absent}
		oldpackage: ${5:yes|#no}
		update_cache: ${6:yes|#no}
		disable_recommends: ${7:#yes|no}
		type: ${8:#package|patch|pattern|product|srcpackage|application}
$0
endsnippet

snippet zypper_repository "Add and remove Zypper repositories"
- name:
	zypper_repository:
		repo: ${1:none}
		name: ${2:none}
		auto_import_keys: ${3:yes|#no}
		enabled: ${4:#yes|no}
		disable_gpg_check: ${5:yes|#no}
		priority: ${6:# Set priority of repository. Packages will always be installed from the repository with the smallest priority number.}
		state: ${7:absent|#present}
		autorefresh: ${8:#yes|no}
		overwrite_multiple: ${9:yes|#no}
		runrefresh: ${10:yes|#no}
		description: ${11:none}
$0
endsnippet

snippet wakeonlan "Send a magic Wake-on-LAN (WoL) broadcast packet"
- name:
	wakeonlan:
		mac: ${1:# MAC address to send Wake-on-LAN broadcast packet for.}
		broadcast: ${2:255.255.255.255}
		port: ${3:7}
$0
endsnippet

snippet foreman "Manage Foreman Resources"
- name:
	foreman:
		username: ${1:# Username on Foreman server}
		password: ${2:# Password for user accessing Foreman server}
		params: ${3:# Parameters associated to the entity resource to set or edit in dictionary format (e.g. name, description)}
		server_url: ${4:# URL of Foreman server}
		entity: ${5:# The Foreman resource that the action will be performed on (e.g. organization, host)}
$0
endsnippet

snippet katello "Manage Katello Resources"
- name:
	katello:
		username: ${1:# Username on Foreman server}
		password: ${2:# Password for user accessing Foreman server}
		params: ${3:# Parameters associated to the entity resource to set or edit in dictionary format (e.g. name, description)}
		server_url: ${4:# URL of Foreman server}
		entity: ${5:# The Foreman resource that the action will be performed on (e.g. organization, host)}
$0
endsnippet

snippet hpilo_boot "Boot system using specific media through HP iLO interface"
- name:
	hpilo_boot:
		host: ${1:# The HP iLO hostname/address that is linked to the physical system.}
		state: ${2:boot_always|#boot_once|connect|disconnect|no_boot|poweroff}
		force: ${3:yes|no}
		media: ${4:cdrom|floppy|hdd|#network|normal|usb}
		image: ${5:# The URL of a cdrom, floppy or usb boot media image. protocol://username:password@hostname:port/filename}
		password: ${6:admin}
		login: ${7:Administrator}
$0
endsnippet

snippet hpilo_facts "Gather facts through an HP iLO interface"
- name:
	hpilo_facts:
		host: ${1:# The HP iLO hostname/address that is linked to the physical system.}
		password: ${2:admin}
		login: ${3:Administrator}
$0
endsnippet

snippet hponcfg "Configure HP iLO interface using hponcfg"
- name:
	hponcfg:
		path: ${1:# The XML file as accepted by hponcfg}
		minfw: ${2:# The minimum firmware level needed}
$0
endsnippet

snippet ipmi_boot "Management of order of boot devices"
- name:
	ipmi_boot:
		bootdev: ${1:network -- Request network boot|hd -- Boot from hard drive|safe -- Boot from hard drive, requesting 'safe mode'|optical -- boot from CD/DVD/BD drive|setup -- Boot into setup utility|default -- remove any IPMI directed boot device request}
		name: ${2:# Hostname or ip address of the BMC.}
		user: ${3:# Username to use to connect to the BMC.}
		password: ${4:# Password to connect to the BMC.}
		persistent: ${5:no}
		uefiboot: ${6:no}
		state: ${7:present -- Request system turn on|absent -- Request system turn on}
		port: ${8:623}
$0
endsnippet

snippet ipmi_power "Power management for machine"
- name:
	ipmi_power:
		state: ${1:on -- Request system turn on|off -- Request system turn off without waiting for OS to shutdown|shutdown -- Have system request OS proper shutdown|reset -- Request system reset without waiting for OS|boot -- If system is off, then 'on', else 'reset'}
		name: ${2:# Hostname or ip address of the BMC.}
		password: ${3:# Password to connect to the BMC.}
		user: ${4:# Username to use to connect to the BMC.}
		timeout: ${5:300}
		port: ${6:623}
$0
endsnippet

snippet stacki_host "Add or remove host to stacki front-end"
- name:
	stacki_host:
		name: ${1:# Name of the host to be added to Stacki.}
		stacki_user: ${2:# Username for authenticating with Stacki API, but if not specified, the environment variable C(stacki_user) is used instead.}
		stacki_endpoint: ${3:# URL for the Stacki API Endpoint.}
		stacki_password: ${4:# Password for authenticating with Stacki API, but if not specified, the environment variable C(stacki_password) is used instead.}
		prim_intf_ip: ${5:# IP Address for the primary network interface.}
		prim_intf: ${6:# Name of the primary network interface.}
		force_install: ${7:# Set value to True to force node into install state if it already exists in stacki.}
		prim_intf_mac: ${8:# MAC Address for the primary PXE boot network interface.}
$0
endsnippet

snippet bzr "Deploy software (or files) from bzr branches"
- name:
	bzr:
		dest: ${1:# Absolute path of where the branch should be cloned to.}
		name: ${2:# SSH or HTTP protocol address of the parent branch.}
		executable: ${3:# Path to bzr executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.}
		version: ${4:head}
		force: ${5:yes|#no}
$0
endsnippet

snippet git "Deploy software (or files) from git checkouts"
- name:
	git:
		dest: ${1:# Absolute path of where the repository should be checked out to. This parameter is required, unless C(clone) is set to C(no) This change was made in version 1.8.3. Prior to this version, the C(dest) parameter was always required.}
		repo: ${2:# git, SSH, or HTTP(S) protocol address of the git repository.}
		force: ${3:yes|#no}
		track_submodules: ${4:yes|#no}
		reference: ${5:# Reference repository (see "git clone --reference ...")}
		accept_hostkey: ${6:yes|#no}
		clone: ${7:#yes|no}
		update: ${8:#yes|no}
		ssh_opts: ${9:# Creates a wrapper script and exports the path as GIT_SSH which git then automatically uses to override ssh arguments. An example value could be "-o StrictHostKeyChecking=no"}
		bare: ${10:yes|#no}
		verify_commit: ${11:yes|#no}
		recursive: ${12:#yes|no}
		executable: ${13:# Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.}
		remote: ${14:origin}
		refspec: ${15:# Add an additional refspec to be fetched. If version is set to a I(SHA-1) not reachable from any branch or tag, this option may be necessary to specify the ref containing the I(SHA-1). Uses the same syntax as the 'git fetch' command. An example value could be "refs/meta/config".}
		umask: ${16:# The umask to set before doing any checkouts, or any other repository maintenance.}
		depth: ${17:# Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is C(1), otherwise ignored. Needs I(git>=1.9.1) to work correctly.}
		version: ${18:HEAD}
		key_file: ${19:# Specify an optional private key file to use for the checkout.}
$0
endsnippet

snippet git_config "Read and write git configuration"
- name:
	git_config:
		repo: ${1:# Path to a git repository for reading and writing values from a specific repo.}
		scope: ${2:local|global|system}
		list_all: ${3:yes|no}
		name: ${4:# The name of the setting. If no value is supplied, the value will be read from the config if it has been set.}
		value: ${5:# When specifying the name of a single setting, supply a value to set that setting to the given value.}
$0
endsnippet

snippet github_hooks "Manages github service hooks."
- name:
	github_hooks:
		repo: ${1:# This is the API url for the repository you want to manage hooks for. It should be in the form of: https://api.github.com/repos/user:/repo:. Note this is different than the normal repo url.}
		oauthkey: ${2:# The oauth key provided by github. It can be found/generated on github under "Edit Your Profile" >> "Applications" >> "Personal Access Tokens"}
		user: ${3:# Github username.}
		action: ${4:create|cleanall|list|clean504}
		content_type: ${5:#json|form}
		validate_certs: ${6:#yes|no}
		hookurl: ${7:# When creating a new hook, this is the url that you want github to post to. It is only required when creating a new hook.}
$0
endsnippet

snippet github_key "Manage GitHub access keys."
- name:
	github_key:
		token: ${1:# GitHub Access Token with permission to list and create public keys.}
		name: ${2:# SSH key name}
		pubkey: ${3:none}
		force: ${4:#yes|no}
		state: ${5:#present|absent}
$0
endsnippet

snippet github_release "Interact with GitHub Releases"
- name:
	github_release:
		repo: ${1:# Repository name}
		action: ${2:latest_release}
		token: ${3:# Github Personal Access Token for authenticating}
		user: ${4:# The GitHub account that owns the repository}
$0
endsnippet

snippet gitlab_group "Creates/updates/deletes Gitlab Groups"
- name:
	gitlab_group:
		name: ${1:# Name of the group you want to create.}
		server_url: ${2:# Url of Gitlab server, with protocol (http or https).}
		login_user: ${3:# Gitlab user name.}
		login_token: ${4:# Gitlab token for logging in.}
		state: ${5:#present|absent}
		login_password: ${6:# Gitlab password for login_user}
		path: ${7:# The path of the group you want to create, this will be server_url/group_path}
		validate_certs: ${8:yes}
$0
endsnippet

snippet gitlab_project "Creates/updates/deletes Gitlab Projects"
- name:
	gitlab_project:
		server_url: ${1:# Url of Gitlab server, with protocol (http or https).}
		name: ${2:# The name of the project}
		merge_requests_enabled: ${3:yes}
		import_url: ${4:no}
		login_user: ${5:# Gitlab user name.}
		login_password: ${6:# Gitlab password for login_user}
		group: ${7:# The name of the group of which this projects belongs to.}
		wiki_enabled: ${8:yes}
		visibility_level: ${9:0}
		description: ${10:# An description for the project.}
		snippets_enabled: ${11:yes}
		login_token: ${12:# Gitlab token for logging in.}
		state: ${13:#present|absent}
		issues_enabled: ${14:yes}
		path: ${15:# The path of the project you want to create, this will be server_url/<group>/path}
		validate_certs: ${16:yes}
		public: ${17:no}
$0
endsnippet

snippet gitlab_user "Creates/updates/deletes Gitlab Users"
- name:
	gitlab_user:
		username: ${1:# The username of the user.}
		name: ${2:# Name of the user you want to create}
		server_url: ${3:# Url of Gitlab server, with protocol (http or https).}
		password: ${4:# The password of the user.}
		email: ${5:# The email that belongs to the user.}
		group: ${6:# Add user as an member to this group.}
		sshkey_file: ${7:# The ssh key itself.}
		sshkey_name: ${8:# The name of the sshkey}
		login_user: ${9:# Gitlab user name.}
		login_token: ${10:# Gitlab token for logging in.}
		access_level: ${11:# The access level to the group. One of the following can be used.}
		state: ${12:#present|absent}
		login_password: ${13:# Gitlab password for login_user}
		validate_certs: ${14:yes}
$0
endsnippet

snippet hg "Manages Mercurial (hg) repositories."
- name:
	hg:
		repo: ${1:# The repository address.}
		dest: ${2:# Absolute path of where the repository should be cloned to. This parameter is required, unless clone and update are set to no}
		executable: ${3:# Path to hg executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.}
		force: ${4:yes|#no}
		clone: ${5:#yes|no}
		update: ${6:#yes|no}
		purge: ${7:yes|#no}
		revision: ${8:# Equivalent C(-r) option in hg command which could be the changeset, revision number, branch name or even tag.}
$0
endsnippet

snippet subversion "Deploys a subversion repository."
- name:
	subversion:
		dest: ${1:# Absolute path where the repository should be deployed.}
		repo: ${2:# The subversion URL to the repository.}
		username: ${3:# --username parameter passed to svn.}
		executable: ${4:# Path to svn executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.}
		force: ${5:yes|#no}
		update: ${6:#yes|no}
		switch: ${7:#yes|no}
		export: ${8:yes|#no}
		password: ${9:# --password parameter passed to svn.}
		checkout: ${10:#yes|no}
		revision: ${11:HEAD}
$0
endsnippet

snippet infini_export "Create, Delete or Modify NFS Exports on Infinibox"
- name:
	infini_export:
		name: ${1:# Export name. Should always start with C(/). (ex. name=/data)}
		system: ${2:# Infinibox Hostname or IPv4 Address.}
		filesystem: ${3:# Name of exported file system.}
		inner_path: ${4:/}
		client_list: ${5:All Hosts(*), RW, no_root_squash: True}
		state: ${6:#present|absent}
		user: ${7:# Infinibox User username with sufficient priveledges ( see notes ).}
		password: ${8:# Infinibox User password.}
$0
endsnippet

snippet infini_export_client "Create, Delete or Modify NFS Client(s) for existing exports on Infinibox"
- name:
	infini_export_client:
		system: ${1:# Infinibox Hostname or IPv4 Address.}
		client: ${2:# Client IP or Range. Ranges can be defined as follows 192.168.0.1-192.168.0.254.}
		export: ${3:# Name of the export.}
		no_root_squash: ${4:yes|no}
		password: ${5:# Infinibox User password.}
		state: ${6:#present|absent}
		user: ${7:# Infinibox User username with sufficient priveledges ( see notes ).}
		access_mode: ${8:#RW|RO}
$0
endsnippet

snippet infini_fs "Create, Delete or Modify filesystems on Infinibox"
- name:
	infini_fs:
		name: ${1:# File system name.}
		system: ${2:# Infinibox Hostname or IPv4 Address.}
		pool: ${3:# Pool that will host file system.}
		state: ${4:#present|absent}
		user: ${5:# Infinibox User username with sufficient priveledges ( see notes ).}
		password: ${6:# Infinibox User password.}
		size: ${7:# File system size in MB, GB or TB units. See examples.}
$0
endsnippet

snippet infini_host "Create, Delete and Modify Hosts on Infinibox"
- name:
	infini_host:
		name: ${1:# Host Name}
		system: ${2:# Infinibox Hostname or IPv4 Address.}
		volume: ${3:# Volume name to map to the host}
		state: ${4:#present|absent}
		user: ${5:# Infinibox User username with sufficient priveledges ( see notes ).}
		password: ${6:# Infinibox User password.}
		wwns: ${7:# List of wwns of the host}
$0
endsnippet

snippet infini_pool "Create, Delete and Modify Pools on Infinibox"
- name:
	infini_pool:
		name: ${1:# Pool Name}
		system: ${2:# Infinibox Hostname or IPv4 Address.}
		ssd_cache: ${3:yes|no}
		state: ${4:#present|absent}
		user: ${5:# Infinibox User username with sufficient priveledges ( see notes ).}
		password: ${6:# Infinibox User password.}
		vsize: ${7:# Pool Virtual Capacity in MB, GB or TB units. If pool vsize is not set on pool creation, Virtual Capacity will be equal to Physical Capacity. See examples.}
		size: ${8:# Pool Physical Capacity in MB, GB or TB units. If pool size is not set on pool creation, size will be equal to 1TB. See examples.}
$0
endsnippet

snippet infini_vol "Create, Delete or Modify volumes on Infinibox"
- name:
	infini_vol:
		name: ${1:# Volume Name}
		system: ${2:# Infinibox Hostname or IPv4 Address.}
		pool: ${3:# Pool that volume will reside on}
		state: ${4:#present|absent}
		user: ${5:# Infinibox User username with sufficient priveledges ( see notes ).}
		password: ${6:# Infinibox User password.}
		size: ${7:# Volume size in MB, GB or TB units. See examples.}
$0
endsnippet

snippet na_cdot_aggregate "Manage NetApp cDOT aggregates."
- name:
	na_cdot_aggregate:
		username: ${1:# This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required. For more information, please read the documentation U(https://goo.gl/BRu78Z).}
		state: ${2:present|absent}
		hostname: ${3:# The hostname or IP address of the ONTAP instance.}
		name: ${4:# The name of the aggregate to manage.}
		password: ${5:# Password for the specified user.}
		disk_count: ${6:# Number of disks to place into the aggregate, including parity disks.}
$0
endsnippet

snippet na_cdot_license "Manage NetApp cDOT protocol and feature licenses"
- name:
	na_cdot_license:
		username: ${1:# This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required. For more information, please read the documentation U(https://goo.gl/BRu78Z).}
		hostname: ${2:# The hostname or IP address of the ONTAP instance.}
		password: ${3:# Password for the specified user.}
		licenses: ${4:# List of licenses to add or remove.}
		remove_unused: ${5:true|false}
		remove_expired: ${6:true|false}
		serial_number: ${7:# Serial number of the node associated with the license.}
$0
endsnippet

snippet na_cdot_lun "Manage  NetApp cDOT luns"
- name:
	na_cdot_lun:
		username: ${1:# This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required. For more information, please read the documentation U(https://goo.gl/BRu78Z).}
		name: ${2:# The name of the lun to manage.}
		hostname: ${3:# The hostname or IP address of the ONTAP instance.}
		vserver: ${4:# The name of the vserver to use.}
		state: ${5:present|absent}
		password: ${6:# Password for the specified user.}
		force_remove: ${7:no}
		flexvol_name: ${8:# The name of the FlexVol the lun should exist on.}
		size_unit: ${9:bytes|b|kb|mb|#gb|tb|pb|eb|zb|yb}
		force_resize: ${10:no}
		force_remove_fenced: ${11:no}
		size: ${12:# The size of the lun in C(size_unit).}
$0
endsnippet

snippet na_cdot_qtree "Manage qtrees"
- name:
	na_cdot_qtree:
		vserver: ${1:# The name of the vserver to use.}
		username: ${2:# This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required. For more information, please read the documentation U(https://goo.gl/BRu78Z).}
		state: ${3:present|absent}
		hostname: ${4:# The hostname or IP address of the ONTAP instance.}
		name: ${5:# The name of the Qtree to manage.}
		password: ${6:# Password for the specified user.}
		flexvol_name: ${7:# The name of the FlexVol the Qtree should exist on. Required when C(state=present).}
$0
endsnippet

snippet na_cdot_svm "Manage NetApp cDOT svm"
- name:
	na_cdot_svm:
		username: ${1:# This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required. For more information, please read the documentation U(https://goo.gl/BRu78Z).}
		name: ${2:# The name of the SVM to manage.}
		hostname: ${3:# The hostname or IP address of the ONTAP instance.}
		state: ${4:present|absent}
		password: ${5:# Password for the specified user.}
		root_volume_aggregate: ${6:# The aggregate on which the root volume will be created.}
		root_volume_security_style: ${7:unix|ntfs|mixed|unified}
		root_volume: ${8:# Root volume of the SVM. Required when C(state=present).}
$0
endsnippet

snippet na_cdot_user "useradmin configuration and management"
- name:
	na_cdot_user:
		vserver: ${1:# The name of the vserver to use.}
		application: ${2:console|http|ontapi|rsh|snmp|sp|ssh|telnet}
		state: ${3:present|absent}
		name: ${4:# The name of the user to manage.}
		authentication_method: ${5:community|password|publickey|domain|nsswitch|usm}
		username: ${6:# This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required. For more information, please read the documentation U(https://goo.gl/BRu78Z).}
		password: ${7:# Password for the specified user.}
		hostname: ${8:# The hostname or IP address of the ONTAP instance.}
		role_name: ${9:# The name of the role. Required when C(state=present)}
		set_password: ${10:# Password for the user account.}
$0
endsnippet

snippet na_cdot_user_role "useradmin configuration and management"
- name:
	na_cdot_user_role:
		username: ${1:# This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required. For more information, please read the documentation U(https://goo.gl/BRu78Z).}
		name: ${2:# The name of the role to manage.}
		hostname: ${3:# The hostname or IP address of the ONTAP instance.}
		vserver: ${4:# The name of the vserver to use.}
		state: ${5:present|absent}
		password: ${6:# Password for the specified user.}
		command_directory_name: ${7:# The command or command directory to which the role has an access.}
		access_level: ${8:none|readonly|#all}
$0
endsnippet

snippet na_cdot_volume "Manage NetApp cDOT volumes"
- name:
	na_cdot_volume:
		username: ${1:# This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required. For more information, please read the documentation U(https://goo.gl/BRu78Z).}
		password: ${2:# Password for the specified user.}
		name: ${3:# The name of the lun to manage.}
		hostname: ${4:# The hostname or IP address of the ONTAP instance.}
		vserver: ${5:# Name of the vserver to use.}
		state: ${6:present|absent}
		size_unit: ${7:bytes|b|kb|mb|#gb|tb|pb|eb|zb|yb}
		online: ${8:#True|False}
		infinite: ${9:True|#False}
		aggregate_name: ${10:# The name of the aggregate the flexvol should exist on. Required when C(state=present).}
		size: ${11:# The size of the volume in (size_unit). Required when C(state=present).}
$0
endsnippet

snippet netapp_e_amg "Create, Remove, and Update Asynchronous Mirror Groups"
- name:
	netapp_e_amg:
		name: ${1:# The name of the async array you wish to target, or create.}
		secondaryArrayId: ${2:# The ID of the secondary array to be used in mirroing process}
		api_password: ${3:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		state: ${4:# A C(state) of present will either create or update the async mirror group.}
		api_username: ${5:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_url: ${6:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		ssid: ${7:# The ID of the array to manage. This value must be unique for each array.}
		syncIntervalMinutes: ${8:10}
		recoveryWarnThresholdMinutes: ${9:20}
		repoUtilizationWarnThreshold: ${10:80}
		interfaceType: ${11:iscsi|fibre}
		manualSync: ${12:no}
		syncWarnThresholdMinutes: ${13:10}
		validate_certs: ${14:yes}
$0
endsnippet

snippet netapp_e_amg_role "Update the role of a storage array within an Asynchronous Mirror Group (AMG)."
- name:
	netapp_e_amg_role:
		ssid: ${1:# The ID of the primary storage array for the async mirror action}
		api_password: ${2:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		role: ${3:primary|secondary}
		api_username: ${4:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_url: ${5:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		force: ${6:no}
		validate_certs: ${7:yes}
		noSync: ${8:True|#False}
$0
endsnippet

snippet netapp_e_amg_sync "Conduct synchronization actions on asynchronous member groups."
- name:
	netapp_e_amg_sync:
		api_password: ${1:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		state: ${2:running|suspended}
		api_username: ${3:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_url: ${4:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		name: ${5:# The name of the async mirror group you wish to target}
		ssid: ${6:# The ID of the storage array containing the AMG you wish to target}
		delete_recovery_point: ${7:True|#False}
		validate_certs: ${8:yes}
$0
endsnippet

snippet netapp_e_auth "Sets or updates the password for a storage array."
- name:
	netapp_e_auth:
		new_password: ${1:# The password you would like to set. Cannot be more than 30 characters.}
		ssid: ${2:# the identifier of the storage array in the Web Services Proxy.}
		name: ${3:# The name of the storage array. Note that if more than one storage array with this name is detected, the task will fail and you'll have to use the ID instead.}
		api_password: ${4:# The password used to authenticate against the API}
		current_password: ${5:# The current admin password. This is not required if the password hasn't been set before.}
		api_username: ${6:# The username used to authenticate against the API}
		validate_certs: ${7:yes}
		set_admin: ${8:no}
		api_url: ${9:# The full API url.}
$0
endsnippet

snippet netapp_e_facts "Get facts about NetApp E-Series arrays"
- name:
	netapp_e_facts:
		api_password: ${1:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_username: ${2:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		ssid: ${3:# The ID of the array to manage. This value must be unique for each array.}
		api_url: ${4:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		validate_certs: ${5:yes}
$0
endsnippet

snippet netapp_e_flashcache "Manage NetApp SSD caches"
- name:
	netapp_e_flashcache:
		ssid: ${1:# The ID of the array to manage (as configured on the web services proxy).}
		api_password: ${2:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		state: ${3:#present|absent}
		api_username: ${4:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_url: ${5:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		name: ${6:# The name of the SSD cache to manage}
		cache_size_min: ${7:# The minimum size (in size_units) of the ssd cache. The cache will be expanded if this exceeds the current size of the cache.}
		io_type: ${8:#filesystem|database|media}
		disk_count: ${9:# The minimum number of disks to use for building the cache. The cache will be expanded if this number exceeds the number of disks already in place}
		size_unit: ${10:bytes|b|kb|mb|#gb|tb|pb|eb|zb|yb}
		validate_certs: ${11:yes}
$0
endsnippet

snippet netapp_e_host "manage eseries hosts"
- name:
	netapp_e_host:
		ssid: ${1:# the id of the storage array you wish to act against}
		api_password: ${2:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_username: ${3:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_url: ${4:# The url to the SANtricity WebServices Proxy or embedded REST API, for example C(https://prod-1.wahoo.acme.com/devmgr/v2).}
		host_type_index: ${5:# The index that maps to host type you wish to create. It is recommended to use the M(netapp_e_facts) module to gather this information. Alternatively you can use the WSP portal to retrieve the information.}
		name: ${6:# If the host doesnt yet exist, the label to assign at creation time.}
		group: ${7:# the group you want the host to be a member of}
		validate_certs: ${8:yes}
		ports: ${9:# a list of of dictionaries of host ports you wish to associate with the newly created host}
$0
endsnippet

snippet netapp_e_hostgroup "Manage NetApp Storage Array Host Groups"
- name:
	netapp_e_hostgroup:
		ssid: ${1:# The ID of the array to manage (as configured on the web services proxy).}
		api_password: ${2:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		state: ${3:present|absent}
		api_username: ${4:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_url: ${5:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		new_name: ${6:# specify this when you need to update the name of a host group}
		hosts:: ${7:# a list of host names/labels to add to the group}
		validate_certs: ${8:yes}
		id: ${9:# The id number of the host group to manage. Either this or C(name) must be supplied.}
		name: ${10:# The name of the host group to manage. Either this or C(id_num) must be supplied.}
$0
endsnippet

snippet netapp_e_lun_mapping "Create or Remove LUN Mappings"
- name:
	netapp_e_lun_mapping:
		volume_name: ${1:# The name of the volume you wish to include in the mapping.}
		state: ${2:present|absent}
		ssid: ${3:# The storage system array identifier.}
		api_password: ${4:# The password used to authenticate against the API. This can optionally be set via an environment variable, API_PASSWORD}
		target_type: ${5:host|group}
		target: ${6:# The name of host or hostgroup you wish to assign to the mapping}
		api_username: ${7:# The username used to authenticate against the API. This can optionally be set via an environment variable, API_USERNAME}
		validate_certs: ${8:yes}
		lun: ${9:0}
		api_url: ${10:# The full API url. Example: http://ENDPOINT:8080/devmgr/v2}
$0
endsnippet

snippet netapp_e_snapshot_group "Manage snapshot groups"
- name:
	netapp_e_snapshot_group:
		api_password: ${1:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		name: ${2:# The name to give the snapshot group}
		state: ${3:present|absent}
		storage_pool_name: ${4:# The name of the storage pool on which to allocate the repository volume.}
		api_username: ${5:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		base_volume_name: ${6:# The name of the base volume or thin volume to use as the base for the new snapshot group.}
		api_url: ${7:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		repo_pct: ${8:20}
		warning_threshold: ${9:80}
		rollback_priority: ${10:highest|high|#medium|low|lowest|__UNDEFINED}
		delete_limit: ${11:30}
		full_policy: ${12:#purgepit|unknown|failbasewrites|__UNDEFINED}
		validate_certs: ${13:yes}
$0
endsnippet

snippet netapp_e_snapshot_images "Create and delete snapshot images"
- name:
	netapp_e_snapshot_images:
		state: ${1:create|remove}
		api_url: ${2:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		snapshot_group: ${3:# The name of the snapshot group in which you want to create a snapshot image.}
		api_username: ${4:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_password: ${5:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		validate_certs: ${6:yes}
$0
endsnippet

snippet netapp_e_snapshot_volume "Manage E/EF-Series snapshot volumes."
- name:
	netapp_e_snapshot_volume:
		snapshot_image_id: ${1:# The identifier of the snapshot image used to create the new snapshot volume.}
		ssid: ${2:# storage array ID}
		api_password: ${3:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		view_mode: ${4:modeUnknown|readWrite|readOnly|__UNDEFINED}
		state: ${5:absent|present}
		storage_pool_name: ${6:# Name of the storage pool on which to allocate the repository volume.}
		api_username: ${7:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_url: ${8:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		name: ${9:# The name you wish to give the snapshot volume}
		repo_percentage: ${10:20}
		full_threshold: ${11:85}
		validate_certs: ${12:yes}
$0
endsnippet

snippet netapp_e_storage_system "Add/remove arrays from the Web Services Proxy"
- name:
	netapp_e_storage_system:
		ssid: ${1:# The ID of the array to manage. This value must be unique for each array.}
		api_password: ${2:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_username: ${3:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		state: ${4:present|absent}
		api_url: ${5:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		controller_addresses: ${6:# The list addresses for the out-of-band management adapter or the agent host. Mutually exclusive of array_wwn parameter.}
		meta_tags: ${7:# Optional meta tags to associate to this storage system}
		array_wwn: ${8:# The WWN of the array to manage. Only necessary if in-band managing multiple arrays on the same agent host.  Mutually exclusive of controller_addresses parameter.}
		array_password: ${9:# The management password of the array to manage, if set.}
		enable_trace: ${10:no}
		validate_certs: ${11:yes}
$0
endsnippet

snippet netapp_e_storagepool "Manage disk groups and disk pools"
- name:
	netapp_e_storagepool:
		api_password: ${1:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_url: ${2:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		name: ${3:# The name of the storage pool to manage}
		ssid: ${4:# The ID of the array to manage (as configured on the web services proxy).}
		raid_level: ${5:raidAll|raid0|raid1|raid3|raid5|raid6|raidDiskPool}
		state: ${6:present|absent}
		api_username: ${7:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		criteria_min_usable_capacity: ${8:# The minimum size of the storage pool (in size_unit). The pool will be expanded if this value exceeds itscurrent size.}
		criteria_drive_type: ${9:hdd|ssd}
		remove_volumes: ${10:no}
		criteria_drive_min_size: ${11:# The minimum individual drive size (in size_unit) to consider when choosing drives for the storage pool.}
		reserve_drive_count: ${12:# Set the number of drives reserved by the storage pool for reconstruction operations. Only valide on raid disk pools.}
		criteria_size_unit: ${13:bytes|b|kb|mb|#gb|tb|pb|eb|zb|yb}
		criteria_drive_require_fde: ${14:# Whether full disk encryption ability is required for drives to be added to the storage pool}
		criteria_drive_interface_type: ${15:sas|sas4k|fibre|fibre520b|scsi|sata|pata}
		secure_pool: ${16:true|false}
		criteria_drive_count: ${17:# The number of disks to use for building the storage pool. The pool will be expanded if this number exceeds the number of disks already in place}
		validate_certs: ${18:yes}
		erase_secured_drives: ${19:true|false}
$0
endsnippet

snippet netapp_e_volume "Manage storage volumes (standard and thin)"
- name:
	netapp_e_volume:
		api_password: ${1:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		api_url: ${2:# The url to the SANtricity WebServices Proxy or embedded REST API.}
		name: ${3:# The name of the volume to manage}
		ssid: ${4:# The ID of the array to manage (as configured on the web services proxy).}
		state: ${5:present|absent}
		storage_pool_name: ${6:# Required only when requested state is 'present'.  The name of the storage pool the volume should exist on.}
		api_username: ${7:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		thin_volume_repo_size: ${8:# Initial size of the thin volume repository volume (in size_unit)}
		size: ${9:# Required only when state = 'present'.  The size of the volume in (size_unit).}
		segment_size_kb: ${10:512}
		thin_provision: ${11:yes|no|true|false}
		ssd_cache_enabled: ${12:yes|no|true|false}
		data_assurance_enabled: ${13:no}
		size_unit: ${14:bytes|b|kb|mb|#gb|tb|pb|eb|zb|yb}
		thin_volume_max_repo_size: ${15:same as size (in size_unit)}
		validate_certs: ${16:yes}
$0
endsnippet

snippet netapp_e_volume_copy "Create volume copy pairs"
- name:
	netapp_e_volume_copy:
		api_url: ${1:# The url to the SANtricity WebServices Proxy or embedded REST API, for example C(https://prod-1.wahoo.acme.com/devmgr/v2).}
		api_password: ${2:# The password to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		state: ${3:present|absent}
		api_username: ${4:# The username to authenticate with the SANtricity WebServices Proxy or embedded REST API.}
		create_copy_pair_if_does_not_exist: ${5:#True|False}
		search_volume_id: ${6:# Searches for all valid potential target and source volumes that could be used in a copy_pair}
		source_volume_id: ${7:# The the id of the volume copy source.}
		destination_volume_id: ${8:# The the id of the volume copy destination.}
		volume_copy_pair_id: ${9:# The the id of a given volume copy pair}
		start_stop_copy: ${10:# starts a re-copy or stops a copy in progress}
		validate_certs: ${11:yes}
$0
endsnippet

snippet sf_account_manager "Manage SolidFire accounts"
- name:
	sf_account_manager:
		password: ${1:# Password for the specified user.}
		name: ${2:# Unique username for this account. (May be 1 to 64 characters in length).}
		hostname: ${3:# The hostname or IP address of the SolidFire cluster.}
		username: ${4:# Please ensure that the user has the adequate permissions. For more information, please read the official documentation U(https://goo.gl/ddJa4Q).}
		state: ${5:present|absent}
		new_name: ${6:# New name for the user account.}
		status: ${7:# Status of the account.}
		initiator_secret: ${8:# CHAP secret to use for the initiator. Should be 12-16 characters long and impenetrable.}
		attributes: ${9:# L}
		target_secret: ${10:# CHAP secret to use for the target (mutual CHAP authentication).}
		account_id: ${11:# The ID of the account to manage or update.}
$0
endsnippet

snippet sf_check_connections "Check connectivity to MVIP and SVIP."
- name:
	sf_check_connections:
		username: ${1:# Please ensure that the user has the adequate permissions. For more information, please read the official documentation U(https://goo.gl/ddJa4Q).}
		hostname: ${2:# The hostname or IP address of the SolidFire cluster.}
		password: ${3:# Password for the specified user.}
		svip: ${4:# Optionally, use to test connection of a different SVIP.}
		skip: ${5:svip|mvip}
		mvip: ${6:# Optionally, use to test connection of a different MVIP.}
$0
endsnippet

snippet sf_snapshot_schedule_manager "Manage SolidFire snapshot schedules"
- name:
	sf_snapshot_schedule_manager:
		username: ${1:# Please ensure that the user has the adequate permissions. For more information, please read the official documentation U(https://goo.gl/ddJa4Q).}
		name: ${2:# Name for the snapshot schedule.}
		hostname: ${3:# The hostname or IP address of the SolidFire cluster.}
		state: ${4:present|absent}
		password: ${5:# Password for the specified user.}
		time_interval_days: ${6:1}
		time_interval_minutes: ${7:0}
		time_interval_hours: ${8:0}
		paused: ${9:# Pause / Resume a schedule.}
		schedule_id: ${10:# The schedule ID for the schedule that you want to update or delete.}
		snapshot_name: ${11:# Name for the created snapshots.}
		volumes: ${12:# Volume IDs that you want to set the snapshot schedule for.}
		starting_date: ${13:# Starting date for the schedule.}
		recurring: ${14:# Should the schedule recur?}
		retention: ${15:# Retention period for the snapshot.}
$0
endsnippet

snippet sf_volume_access_group_manager "Manage SolidFire Volume Access Groups"
- name:
	sf_volume_access_group_manager:
		username: ${1:# Please ensure that the user has the adequate permissions. For more information, please read the official documentation U(https://goo.gl/ddJa4Q).}
		password: ${2:# Password for the specified user.}
		name: ${3:# Name of the volume access group. It is not required to be unique, but recommended.}
		hostname: ${4:# The hostname or IP address of the SolidFire cluster.}
		state: ${5:present|absent}
		virtual_network_id: ${6:# The ID of the SolidFire Virtual Network ID to associate the volume access group with.}
		volumes: ${7:# List of volumes to initially include in the volume access group. If unspecified, the access group will start without any volumes.}
		initiators: ${8:# List of initiators to include in the volume access group. If unspecified, the access group will start out without configured initiators.}
		attributes: ${9:# L}
		virtual_network_tags: ${10:# The ID of the VLAN Virtual Network Tag to associate the volume access group with.}
		volume_access_group_id: ${11:# The ID of the volume access group to modify or delete.}
$0
endsnippet

snippet sf_volume_manager "Manage SolidFire volumes"
- name:
	sf_volume_manager:
		username: ${1:# Please ensure that the user has the adequate permissions. For more information, please read the official documentation U(https://goo.gl/ddJa4Q).}
		name: ${2:# The name of the volume to manage.}
		hostname: ${3:# The hostname or IP address of the SolidFire cluster.}
		account_id: ${4:# Account ID for the owner of this volume.}
		state: ${5:present|absent}
		password: ${6:# Password for the specified user.}
		qos: ${7:# I}
		size_unit: ${8:bytes|b|kb|mb|#gb|tb|pb|eb|zb|yb}
		access: ${9:readOnly|readWrite|locked|replicationTarget}
		volume_id: ${10:# The ID of the volume to manage or update.}
		512emulation: ${11:# Should the volume provide 512-byte sector emulation?}
		attributes: ${12:# A}
		size: ${13:# The size of the volume in (size_unit).}
$0
endsnippet

snippet zfs "Manage zfs"
- name:
	zfs:
		state: ${1:present|absent}
		name: ${2:# File system, snapshot or volume name e.g. C(rpool/myfs)}
		origin: ${3:# Snapshot from which to create a clone}
		key_value: ${4:# The C(zfs) module takes key=value pairs for zfs properties to be set. See the zfs(8) man page for more information.}
$0
endsnippet

snippet zfs_facts "Gather facts about ZFS datasets."
- name:
	zfs_facts:
		name: ${1:# ZFS dataset name.}
		parsable: ${2:no}
		depth: ${3:# Specifiies recurion depth.}
		type: ${4:#all|filesystem|volume|snapshot|bookmark}
		recurse: ${5:no}
		properties: ${6:all}
$0
endsnippet

snippet zpool_facts "Gather facts about ZFS pools."
- name:
	zpool_facts:
		parsable: ${1:no}
		name: ${2:# ZFS pool name.}
		properties: ${3:all}
$0
endsnippet

snippet aix_inittab "Manages the inittab on AIX."
- name:
	aix_inittab:
		action: ${1:respawn|wait|once|boot|bootwait|powerfail|powerwait|off|hold|ondemand|initdefault|sysinit}
		command: ${2:# W}
		name: ${3:# N}
		runlevel: ${4:# R}
		state: ${5:#present|absent}
		insertafter: ${6:# A}
$0
endsnippet

snippet alternatives "Manages alternative programs for common commands"
- name:
	alternatives:
		path: ${1:# The path to the real executable that the link should point to.}
		name: ${2:# The generic name of the link.}
		priority: ${3:50}
		link: ${4:# The path to the symbolic link that should point to the real executable.}
$0
endsnippet

snippet at "Schedule the execution of a command or script file via the at command."
- name:
	at:
		count: ${1:# The count of units in the future to execute the command or script file.}
		units: ${2:minutes|hours|days|weeks}
		state: ${3:#present|absent}
		command: ${4:# A command to be executed in the future.}
		unique: ${5:no}
		script_file: ${6:# An existing script file to be executed in the future.}
$0
endsnippet

snippet authorized_key "Adds or removes an SSH authorized key"
- name:
	authorized_key:
		user: ${1:# The username on the remote host whose authorized_keys file will be modified}
		key: ${2:# The SSH public key(s), as a string or (since 1.9) url (https://github.com/username.keys)}
		exclusive: ${3:yes|#no}
		key_options: ${4:# A string of ssh key options to be prepended to the key in the authorized_keys file}
		state: ${5:#present|absent}
		path: ${6:(homedir)+/.ssh/authorized_keys}
		validate_certs: ${7:#yes|no}
		manage_dir: ${8:#yes|no}
$0
endsnippet

snippet beadm "Manage ZFS boot environments on FreeBSD/Solaris/illumos systems."
- name:
	beadm:
		name: ${1:# ZFS boot environment name.}
		state: ${2:#present|absent|activated|mounted|unmounted}
		force: ${3:true|false}
		mountpoint: ${4:no}
		snapshot: ${5:no}
		options: ${6:no}
		description: ${7:no}
$0
endsnippet

snippet capabilities "Manage Linux capabilities"
- name:
	capabilities:
		capability: ${1:# Desired capability to set (with operator and flags, if state is C(present)) or remove (if state is C(absent))}
		path: ${2:# Specifies the path to the file to be managed.}
		state: ${3:#present|absent}
$0
endsnippet

snippet cron "Manage cron.d and crontab entries."
- name:
	cron:
		cron_file: ${1:# If specified, uses this file instead of an individual user's crontab. If this is a relative path, it is interpreted with respect to /etc/cron.d. (If it is absolute, it will typically be /etc/crontab). To use the C(cron_file) parameter you must specify the C(user) as well.}
		month: ${2:*}
		disabled: ${3:no}
		job: ${4:# The command to execute or, if env is set, the value of environment variable. Required if state=present.}
		special_time: ${5:reboot|yearly|annually|monthly|weekly|daily|hourly}
		user: ${6:root}
		insertafter: ${7:# Used with C(state=present) and C(env). If specified, the environment variable will be inserted after the declaration of specified environment variable.}
		insertbefore: ${8:# Used with C(state=present) and C(env). If specified, the environment variable will be inserted before the declaration of specified environment variable.}
		day: ${9:*}
		minute: ${10:*}
		name: ${11:# Description of a crontab entry or, if env is set, the name of environment variable. Required if state=absent. Note that if name is not set and state=present, then a new crontab entry will always be created, regardless of existing ones.}
		hour: ${12:*}
		reboot: ${13:yes|#no}
		state: ${14:#present|absent}
		weekday: ${15:*}
		env: ${16:yes|#no}
		backup: ${17:yes|no}
$0
endsnippet

snippet cronvar "Manage variables in crontabs"
- name:
	cronvar:
		name: ${1:# Name of the crontab variable.}
		insertbefore: ${2:# Used with C(state=present). If specified, the variable will be inserted just before the variable specified.}
		cron_file: ${3:# If specified, uses this file instead of an individual user's crontab. Without a leading /, this is assumed to be in /etc/cron.d.  With a leading /, this is taken as absolute.}
		value: ${4:# The value to set this variable to.  Required if state=present.}
		state: ${5:#present|absent}
		user: ${6:root}
		insertafter: ${7:# Used with C(state=present). If specified, the variable will be inserted after the variable specified.}
		backup: ${8:no}
$0
endsnippet

snippet crypttab "Encrypted Linux block devices"
- name:
	crypttab:
		state: ${1:present|absent|opts_present|opts_absent}
		name: ${2:# Name of the encrypted block device as it appears in the C(/etc/crypttab) file, or optionaly prefixed with C(/dev/mapper/), as it appears in the filesystem. I(/dev/mapper/) will be stripped from I(name).}
		backing_device: ${3:# Path to the underlying block device or file, or the UUID of a block-device prefixed with I(UUID=)}
		path: ${4:/etc/crypttab}
		password: ${5:none}
		opts: ${6:# A comma-delimited list of options. See C(crypttab(5) ) for details.}
$0
endsnippet

snippet debconf "Configure a .deb package"
- name:
	debconf:
		name: ${1:# Name of package to configure.}
		value: ${2:# Value to set the configuration to}
		vtype: ${3:string|password|boolean|select|multiselect|note|error|title|text|seen}
		question: ${4:# A debconf configuration setting}
		unseen: ${5:no}
$0
endsnippet

snippet facter "Runs the discovery program I(facter) on the remote system"
- name:
	facter:
$0
endsnippet

snippet filesystem "Makes file system on block device"
- name:
	filesystem:
		dev: ${1:# Target block device.}
		fstype: ${2:# File System type to be created.}
		resizefs: ${3:yes|#no}
		force: ${4:yes|#no}
		opts: ${5:# List of options to be passed to mkfs command.}
$0
endsnippet

snippet firewalld "Manage arbitrary ports/services with firewalld"
- name:
	firewalld:
		state: ${1:enabled|disabled}
		zone: ${2:work|drop|internal|external|trusted|home|dmz|public|block}
		service: ${3:# Name of a service to add/remove to/from firewalld - service must be listed in output of firewall-cmd --get-services.}
		masquerade: ${4:# The masquerade setting you would like to enable/disable to/from zones within firewalld}
		immediate: ${5:no}
		source: ${6:# The source/network you would like to add/remove to/from firewalld}
		permanent: ${7:# Should this configuration be in the running firewalld configuration or persist across reboots. As of Ansible version 2.3, permanent operations can operate on firewalld configs when it's not running (requires firewalld >= 3.0.9)}
		timeout: ${8:0}
		interface: ${9:# The interface you would like to add/remove to/from a zone in firewalld}
		port: ${10:# Name of a port or port range to add/remove to/from firewalld. Must be in the form PORT/PROTOCOL or PORT-PORT/PROTOCOL for port ranges.}
		rich_rule: ${11:# Rich rule to add/remove to/from firewalld.}
$0
endsnippet

snippet gconftool2 "Edit GNOME Configurations"
- name:
	gconftool2:
		state: ${1:get|present|absent}
		key: ${2:# A GConf preference key is an element in the GConf repository that corresponds to an application preference. See man gconftool-2(1)}
		value_type: ${3:int|bool|float|string}
		direct: ${4:yes|no}
		value: ${5:# Preference keys typically have simple values such as strings, integers, or lists of strings and integers. This is ignored if the state is "get". See man gconftool-2(1)}
		config_source: ${6:# Specify a configuration source to use rather than the default path. See man gconftool-2(1)}
$0
endsnippet

snippet getent "a wrapper to the unix getent utility"
- name:
	getent:
		database: ${1:# the name of a getent database supported by the target system (passwd, group, hosts, etc).}
		fail_key: ${2:yes}
		split: ${3:# character used to split the database values into lists/arrays such as ':' or '	', otherwise  it will try to pick one depending on the database}
		key: ${4:}
$0
endsnippet

snippet gluster_volume "Manage GlusterFS volumes"
- name:
	gluster_volume:
		name: ${1:# The volume name}
		state: ${2:present|absent|started|stopped}
		force: ${3:# If brick is being created in the root partition, module will fail. Set force to true to override this behaviour}
		replicas: ${4:# Replica count for volume}
		bricks: ${5:# Brick paths on servers. Multiple brick paths can be separated by commas}
		quota: ${6:# Quota value for limit-usage (be sure to use 10.0MB instead of 10MB, see quota list)}
		stripes: ${7:# Stripe count for volume}
		cluster: ${8:# List of hosts to use for probing and brick setup}
		host: ${9:# Override local hostname (for peer probing purposes)}
		arbiter: ${10:# Arbiter count for volume}
		redundancies: ${11:# Redundancy count for volume}
		transport: ${12:#tcp|rdma|tcp,rdma}
		disperses: ${13:# Disperse count for volume}
		directory: ${14:# Directory for limit-usage}
		start_on_create: ${15:#yes|no}
		rebalance: ${16:yes|#no}
		options: ${17:# A dictionary/hash with options/settings for the volume}
$0
endsnippet

snippet group "Add or remove groups"
- name:
	group:
		name: ${1:# Name of the group to manage.}
		state: ${2:#present|absent}
		gid: ${3:# Optional I(GID) to set for the group.}
		system: ${4:yes|#no}
$0
endsnippet

snippet hostname "Manage hostname"
- name:
	hostname:
		name: ${1:# Name of the host}
$0
endsnippet

snippet iptables "Modify the systems iptables"
- name:
	iptables:
		comment: ${1:# This specifies a comment that will be added to the rule}
		protocol: ${2:# The protocol of the rule or of the packet to check. The specified protocol can be one of tcp, udp, udplite, icmp, esp, ah, sctp or the special keyword "all", or it can be a numeric value, representing one of these protocols or a different one. A protocol name from /etc/protocols is also allowed. A "!" argument before the protocol inverts the test.  The number zero is equivalent to all. "all" will match with all protocols and is taken as default when this option is omitted.}
		goto: ${3:# This specifies that the processing should continue in a user specified chain. Unlike the jump argument return will not continue processing in this chain but instead in the chain that called us via jump.}
		chain: ${4:# Chain to operate on. This option can either be the name of a user defined chain or any of the builtin chains: 'INPUT', 'FORWARD', 'OUTPUT', 'PREROUTING', 'POSTROUTING', 'SECMARK', 'CONNSECMARK'.}
		fragment: ${5:# This means that the rule only refers to second and further fragments of fragmented packets. Since there is no way to tell the source or destination ports of such a packet (or ICMP type), such a packet will not match any rules which specify them. When the "!" argument precedes fragment argument, the rule will only match head fragments, or unfragmented packets.}
		out_interface: ${6:# Name of an interface via which a packet is going to be sent (for packets entering the FORWARD, OUTPUT and POSTROUTING chains). When the "!" argument is used before the interface name, the sense is inverted. If the interface name ends in a "+", then any interface which begins with this name will match. If this option is omitted, any interface name will match.}
		to_source: ${7:# This specifies a source address to use with SNAT: without this, the source address is never altered.}
		limit_burst: ${8:# Specifies the maximum burst before the above limit kicks in.}
		ctstate: ${9:[]}
		jump: ${10:# This specifies the target of the rule; i.e., what to do if the packet matches it. The target can be a user-defined chain (other than the one this rule is in), one of the special builtin targets which decide the fate of the packet immediately, or an extension (see EXTENSIONS below).  If this option is omitted in a rule (and the goto paramater is not used), then matching the rule will have no effect on the packet's fate, but the counters on the rule will be incremented.}
		policy: ${11:# Set the policy for the chain to the given target. Valid targets are ACCEPT, DROP, QUEUE, RETURN. Only built in chains can have policies. This parameter requires the chain parameter. Ignores all other parameters.}
		source_port: ${12:# Source port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped.}
		to_ports: ${13:# This specifies a destination port or range of ports to use: without this, the destination port is never altered. This is only valid if the rule also specifies one of the following protocols: tcp, udp, dccp or sctp.}
		flush: ${14:# Flushes the specified table and chain of all rules. If no chain is specified then the entire table is purged. Ignores all other parameters.}
		table: ${15:#filter|nat|mangle|raw|security}
		destination_port: ${16:# Destination port or port range specification. This can either be a service name or a port number. An inclusive range can also be specified, using the format first:last. If the first port is omitted, '0' is assumed; if the last is omitted, '65535' is assumed. If the first port is greater than the second one they will be swapped.}
		icmp_type: ${17:# This allows specification of the ICMP type, which can be a numeric ICMP type, type/code pair, or one of the ICMP type names shown by the command 'iptables -p icmp -h'}
		to_destination: ${18:# This specifies a destination address to use with DNAT: without this, the destination address is never altered.}
		in_interface: ${19:# Name of an interface via which a packet was received (only for packets entering the INPUT, FORWARD and PREROUTING chains). When the "!" argument is used before the interface name, the sense is inverted. If the interface name ends in a "+", then any interface which begins with this name will match. If this option is omitted, any interface name will match.}
		uid_owner: ${20:# Specifies the UID or username to use in match by owner rule.}
		set_dscp_mark_class: ${21:# This allows specifying a predefined DiffServ class which will be translated to the corresponding DSCP mark. Mutually exclusive with C(set_dscp_mark).}
		destination: ${22:# Destination specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A "!" argument before the address specification inverts the sense of the address.}
		set_dscp_mark: ${23:# This allows specifying a DSCP mark to be added to packets. It takes either an integer or hex value. Mutually exclusive with C(set_dscp_mark_class).}
		reject_with: ${24:# Specifies the error packet type to return while rejecting.}
		source: ${25:# Source specification. Address can be either a network name, a hostname, a network IP address (with /mask), or a plain IP address. Hostnames will be resolved once only, before the rule is submitted to the kernel. Please note that specifying any name to be resolved with a remote query such as DNS is a really bad idea. The mask can be either a network mask or a plain number, specifying the number of 1's at the left side of the network mask. Thus, a mask of 24 is equivalent to 255.255.255.0. A "!" argument before the address specification inverts the sense of the address.}
		state: ${26:#present|absent}
		limit: ${27:# Specifies the maximum average number of matches to allow per second. The number can specify units explicitly, using `/second', `/minute', `/hour' or `/day', or parts of them (so `5/second' is the same as `5/s').}
		action: ${28:#append|insert}
		set_counters: ${29:# This enables the administrator to initialize the packet and byte counters of a rule (during INSERT, APPEND, REPLACE operations).}
		ip_version: ${30:#ipv4|ipv6}
		match: ${31:[]}
$0
endsnippet

snippet java_cert "Uses keytool to import/remove key from java keystore(cacerts)"
- name:
	java_cert:
		keystore_pass: ${1:# Keystore password.}
		keystore_create: ${2:# Create keystore if it doesn't exist}
		cert_alias: ${3:# Imported certificate alias.}
		executable: ${4:keytool}
		cert_port: ${5:443}
		state: ${6:#present|absent}
		cert_url: ${7:# Basic URL to fetch SSL certificate from. One of cert_url or cert_path is required to load certificate.}
		cert_path: ${8:# Local path to load certificate from. One of cert_url or cert_path is required to load certificate.}
		keystore_path: ${9:# Path to keystore.}
$0
endsnippet

snippet kernel_blacklist "Blacklist kernel modules"
- name:
	kernel_blacklist:
		name: ${1:# Name of kernel module to black- or whitelist.}
		blacklist_file: ${2:# If specified, use this blacklist file instead of C(/etc/modprobe.d/blacklist-ansible.conf).}
		state: ${3:#present|absent}
$0
endsnippet

snippet known_hosts "Add or remove a host from the C(known_hosts) file"
- name:
	known_hosts:
		name: ${1:# The host to add or remove (must match a host specified in key)}
		path: ${2:(homedir)+/.ssh/known_hosts}
		state: ${3:#present|absent}
		hash_host: ${4:no}
		key: ${5:# The SSH public host key, as a string (required if state=present, optional when state=absent, in which case all keys for the host are removed). The key must be in the right format for ssh (see sshd(1), section "SSH_KNOWN_HOSTS FILE FORMAT")}
$0
endsnippet

snippet locale_gen "Creates or removes locales."
- name:
	locale_gen:
		name: ${1:# Name and encoding of the locale, such as "en_GB.UTF-8".}
		state: ${2:#present|absent}
$0
endsnippet

snippet lvg "Configure LVM volume groups"
- name:
	lvg:
		vg: ${1:# The name of the volume group.}
		vg_options: ${2:# Additional options to pass to C(vgcreate) when creating the volume group.}
		pvs: ${3:# List of comma-separated devices to use as physical devices in this volume group. Required when creating or resizing volume group.}
		force: ${4:yes|#no}
		pesize: ${5:4}
		state: ${6:#present|absent}
$0
endsnippet

snippet lvol "Configure LVM logical volumes"
- name:
	lvol:
		vg: ${1:# The volume group this logical volume is part of.}
		lv: ${2:# The name of the logical volume.}
		pvs: ${3:# Comma separated list of physical volumes e.g. /dev/sda,/dev/sdb}
		force: ${4:yes|#no}
		state: ${5:#present|absent}
		snapshot: ${6:# The name of the snapshot volume}
		active: ${7:#yes|no}
		shrink: ${8:yes}
		opts: ${9:# Free-form options to be passed to the lvcreate command}
		size: ${10:# The size of the logical volume, according to lvcreate(8) --size, by default in megabytes or optionally with one of [bBsSkKmMgGtTpPeE] units; or according to lvcreate(8) --extents as a percentage of [VG|PVS|FREE]; Float values must begin with a digit. Resizing using percentage values was not supported prior to 2.1.}
$0
endsnippet

snippet make "Run targets in a Makefile"
- name:
	make:
		chdir: ${1:# cd into this directory before running make}
		params: ${2:none}
		target: ${3:none}
$0
endsnippet

snippet modprobe "Add or remove kernel modules"
- name:
	modprobe:
		name: ${1:# Name of kernel module to manage.}
		state: ${2:#present|absent}
		params: ${3:}
$0
endsnippet

snippet mount "Control active and configured mount points"
- name:
	mount:
		state: ${1:present|absent|mounted|unmounted}
		path: ${2:# Path to the mount point (e.g. C(/mnt/files)).}
		src: ${3:# Device to be mounted on I(path). Required when I(state) set to C(present) or C(mounted).}
		dump: ${4:0}
		passno: ${5:0}
		fstab: ${6:/etc/fstab (/etc/vfstab on Solaris)}
		boot: ${7:yes|no}
		fstype: ${8:# Filesystem type. Required when I(state) is C(present) or C(mounted).}
		opts: ${9:# Mount options (see fstab(5), or vfstab(4) on Solaris).}
$0
endsnippet

snippet ohai "Returns inventory data from I(Ohai)"
- name:
	ohai:
$0
endsnippet

snippet open_iscsi "Manage iscsi targets with open-iscsi"
- name:
	open_iscsi:
		auto_node_startup: ${1:True|False}
		target: ${2:# the iscsi target name}
		show_nodes: ${3:True|False}
		node_auth: ${4:CHAP}
		node_pass: ${5:# discovery.sendtargets.auth.password}
		discover: ${6:True|False}
		portal: ${7:# the ip address of the iscsi target}
		login: ${8:True|False}
		node_user: ${9:# discovery.sendtargets.auth.username}
		port: ${10:3260}
$0
endsnippet

snippet openwrt_init "Manage services on OpenWrt."
- name:
	openwrt_init:
		name: ${1:# Name of the service.}
		pattern: ${2:# If the service does not respond to the 'running' command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a 'running' result.  If the string is found, the service will be assumed to be running.}
		state: ${3:started|stopped|restarted|reloaded}
		enabled: ${4:yes|no}
$0
endsnippet

snippet osx_defaults "osx_defaults allows users to read, write, and delete Mac OS X user defaults from Ansible"
- name:
	osx_defaults:
		key: ${1:# The key of the user preference}
		domain: ${2:NSGlobalDomain}
		array_add: ${3:true|false}
		host: ${4:# The host on which the preference should apply. The special value "currentHost" corresponds to the "-currentHost" switch of the defaults commandline tool.}
		type: ${5:array|bool|boolean|date|float|int|integer|#string}
		state: ${6:#present|absent}
		value: ${7:# The value to write. Only required when state = present.}
$0
endsnippet

snippet pam_limits "Modify Linux PAM limits"
- name:
	pam_limits:
		domain: ${1:# A username, @groupname, wildcard, uid/gid range.}
		value: ${2:# The value of the limit.}
		limit_item: ${3:core|data|fsize|memlock|nofile|rss|stack|cpu|nproc|as|maxlogins|maxsyslogins|priority|locks|sigpending|msgqueue|nice|rtprio|chroot}
		limit_type: ${4:hard|soft|-}
		comment: ${5:}
		use_max: ${6:yes|#no}
		dest: ${7:/etc/security/limits.conf}
		use_min: ${8:yes|#no}
		backup: ${9:yes|#no}
$0
endsnippet

snippet pamd "Manage PAM Modules"
- name:
	pamd:
		control: ${1:# The control of the PAM rule being modified.  This may be a complicated control with brackets.  If this is the case, be sure to put "[bracketed controls]" in quotes.  The type, control and module_path all must match a rule to be modified.}
		name: ${2:# The name generally refers to the PAM service file to change, for example system-auth.}
		module_path: ${3:# The module path of the PAM rule being modified.  The type, control and module_path all must match a rule to be modified.}
		type: ${4:# The type of the PAM rule being modified.  The type, control and module_path all must match a rule to be modified.}
		new_module_path: ${5:# The control to assign to the new rule.}
		new_type: ${6:# The type to assign to the new rule.}
		state: ${7:#updated|before|after|args_present|args_absent}
		new_control: ${8:# The control to assign to the new rule.}
		path: ${9:/etc/pam.d/}
		module_arguments: ${10:# When state is 'updated', the module_arguments will replace existing module_arguments.  When state is 'args_absent' args matching those listed in module_arguments will be removed.  When state is 'args_present' any args listed in module_arguments are added if missing from the existing rule.  Furthermore, if the module argument takes a value denoted by '=', the value will be changed to that specified in module_arguments.}
$0
endsnippet

snippet parted "Configure block device partitions"
- name:
	parted:
		device: ${1:# T}
		part_start: ${2:0%}
		part_end: ${3:100%}
		name: ${4:# Sets the name for the partition number (GPT, Mac, MIPS and PC98 only).}
		align: ${5:none|cylinder|minimal|#optimal}
		number: ${6:# The number of the partition to work with or the number of the partition that will be created. Required when performing any action on the disk, except fetching information.}
		label: ${7:aix|amiga|bsd|dvh|gpt|loop|mac|#msdos|pc98|sun|}
		state: ${8:present|absent|#info}
		part_type: ${9:primary|extended|logical}
		flags: ${10:# A}
		unit: ${11:s|B|KB|#KiB|MB|MiB|GB|GiB|TB|TiB|%|cyl|chs|compact}
$0
endsnippet

snippet ping "Try to connect to host, verify a usable python and return C(pong) on success."
- name:
	ping:
$0
endsnippet

snippet puppet "Runs puppet"
- name:
	puppet:
		logdest: ${1:#stdout|syslog}
		execute: ${2:# Execute a specific piece of Puppet code. It has no effect with a puppetmaster.}
		facter_basename: ${3:ansible}
		tags: ${4:# A comma-separated list of puppet tags to be used.}
		puppetmaster: ${5:# The hostname of the puppetmaster to contact.}
		certname: ${6:# The name to use when handling certificates.}
		manifest: ${7:# Path to the manifest file to run puppet apply on.}
		environment: ${8:# Puppet environment to be used.}
		timeout: ${9:30m}
		facts: ${10:# A dict of values to pass in as persistent external facter facts}
$0
endsnippet

snippet runit "Manage runit services."
- name:
	runit:
		name: ${1:# Name of the service to manage.}
		state: ${2:started|stopped|restarted|killed|reloaded|once}
		enabled: ${3:yes|no}
		service_dir: ${4:/var/service}
		service_src: ${5:/etc/sv}
$0
endsnippet

snippet seboolean "Toggles SELinux booleans."
- name:
	seboolean:
		state: ${1:yes|no}
		name: ${2:# Name of the boolean to configure}
		persistent: ${3:yes|no}
$0
endsnippet

snippet sefcontext "Manages SELinux file context mapping definitions"
- name:
	sefcontext:
		setype: ${1:# SELinux type for the specified target.}
		target: ${2:# Target path (expression).}
		reload: ${3:yes}
		ftype: ${4:a}
		selevel: ${5:# SELinux range for the specified target.}
		seuser: ${6:# SELinux user for the specified target.}
		state: ${7:#present|absent}
$0
endsnippet

snippet selinux "Change policy and state of SELinux"
- name:
	selinux:
		state: ${1:enforcing|permissive|disabled}
		policy: ${2:# name of the SELinux policy to use (example: C(targeted)) will be required if state is not C(disabled)}
		conf: ${3:/etc/selinux/config}
$0
endsnippet

snippet selinux_permissive "Change permissive domain in SELinux policy"
- name:
	selinux_permissive:
		domain: ${1:# the domain that will be added or removed from the list of permissive domains}
		permissive: ${2:True|False}
		no_reload: ${3:True|False}
		store: ${4:# name of the SELinux policy store to use}
$0
endsnippet

snippet seport "Manages SELinux network port type definitions"
- name:
	seport:
		setype: ${1:# SELinux type for the specified port.}
		proto: ${2:tcp|udp}
		state: ${3:#present|absent}
		ports: ${4:# Ports or port ranges, separated by a comma}
		reload: ${5:yes}
$0
endsnippet

snippet service "Manage services."
- name:
	service:
		name: ${1:# Name of the service.}
		use: ${2:auto}
		pattern: ${3:# If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.  If the string is found, the service will be assumed to be running.}
		enabled: ${4:yes|no}
		state: ${5:started|stopped|restarted|reloaded}
		sleep: ${6:# If the service is being C(restarted) then sleep this many seconds between the stop and start command. This helps to workaround badly behaving init scripts that exit immediately after signaling a process to stop.}
		arguments: ${7:# Additional arguments provided on the command line}
		runlevel: ${8:default}
$0
endsnippet

snippet setup "Gathers facts about remote hosts"
- name:
	setup:
		filter: ${1:*}
		gather_subset: ${2:all}
		fact_path: ${3:/etc/ansible/facts.d}
		gather_timeout: ${4:10}
$0
endsnippet

snippet solaris_zone "Manage Solaris zones"
- name:
	solaris_zone:
		name: ${1:# Zone name.}
		state: ${2:#present|installed|started|running|stopped|absent|configured|attached|detached}
		install_options: ${3:empty string}
		sparse: ${4:no}
		create_options: ${5:empty string}
		root_password: ${6:# The password hash for the root account. If not specified, the zone's root account will not have a password.}
		timeout: ${7:600}
		path: ${8:# The path where the zone will be created. This is required when the zone is created, but not used otherwise.}
		config: ${9:empty string}
		attach_options: ${10:empty string}
$0
endsnippet

snippet svc "Manage daemontools services."
- name:
	svc:
		name: ${1:# Name of the service to manage.}
		service_dir: ${2:/service}
		downed: ${3:yes|no}
		enabled: ${4:yes|no}
		state: ${5:started|stopped|restarted|reloaded|once}
		service_src: ${6:# directory where services are defined, the source of symlinks to service_dir.}
$0
endsnippet

snippet sysctl "Manage entries in sysctl.conf."
- name:
	sysctl:
		name: ${1:# The dot-separated path (aka I(key)) specifying the sysctl variable.}
		reload: ${2:#yes|no}
		state: ${3:#present|absent}
		sysctl_set: ${4:yes|no}
		ignoreerrors: ${5:yes|no}
		sysctl_file: ${6:/etc/sysctl.conf}
		value: ${7:# Desired value of the sysctl key.}
$0
endsnippet

snippet systemd "Manage services."
- name:
	systemd:
		name: ${1:# Name of the service. When using in a chroot environment you always need to specify the full name i.e. (crond.service).}
		masked: ${2:yes|no}
		state: ${3:started|stopped|restarted|reloaded}
		no_block: ${4:yes|no}
		enabled: ${5:yes|no}
		daemon_reload: ${6:yes|no}
		user: ${7:yes|no}
$0
endsnippet

snippet timezone "Configure timezone setting"
- name:
	timezone:
		hwclock: ${1:# Whether the hardware clock is in UTC or in local timezone. Default is to keep current setting. Note that this option is recommended not to change and may fail to configure, especially on virtual environments such as AWS. B(At least one of name and hwclock are required.) I(Only used on Linux.)}
		name: ${2:# Name of the timezone for the system clock. Default is to keep current setting. B(At least one of name and hwclock are required.)}
$0
endsnippet

snippet ufw "Manage firewall with UFW"
- name:
	ufw:
		direction: ${1:in|out|incoming|outgoing|routed}
		from_port: ${2:# Source port.}
		to_ip: ${3:any}
		to_port: ${4:# Destination port.}
		from_ip: ${5:any}
		interface: ${6:# Specify interface for rule.}
		name: ${7:# Use profile located in C(/etc/ufw/applications.d)}
		insert: ${8:# Insert the corresponding rule as rule number NUM}
		logging: ${9:on|off|low|medium|high|full}
		log: ${10:yes|no}
		proto: ${11:any|tcp|udp|ipv6|esp|ah}
		route: ${12:yes|no}
		rule: ${13:allow|deny|reject|limit}
		state: ${14:enabled|disabled|reloaded|reset}
		policy: ${15:allow|deny|reject}
		delete: ${16:yes|no}
$0
endsnippet

snippet user "Manage user accounts"
- name:
	user:
		name: ${1:# Name of the user to create, remove or modify.}
		comment: ${2:# Optionally sets the description (aka I(GECOS)) of user account.}
		ssh_key_bits: ${3:default set by ssh-keygen}
		update_password: ${4:#always|on_create}
		non_unique: ${5:yes|#no}
		force: ${6:yes|#no}
		ssh_key_type: ${7:rsa}
		expires: ${8:# An expiry time for the user in epoch, it will be ignored on platforms that do not support this. Currently supported on Linux and FreeBSD.}
		ssh_key_passphrase: ${9:# Set a passphrase for the SSH key.  If no passphrase is provided, the SSH key will default to having no passphrase.}
		groups: ${10:# Puts the user in  list of groups. When set to the empty string ('groups='), the user is removed from all groups except the primary group.}
		home: ${11:# Optionally set the user's home directory.}
		move_home: ${12:yes|#no}
		password: ${13:# Optionally set the user's password to this crypted value.  See the user example in the github examples directory for what this looks like in a playbook. See U(http://docs.ansible.com/ansible/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module) for details on various ways to generate these password values. Note on Darwin system, this value has to be cleartext. Beware of security issues.}
		skeleton: ${14:# Optionally set a home skeleton directory. Requires createhome option!}
		generate_ssh_key: ${15:yes|#no}
		append: ${16:yes|#no}
		uid: ${17:# Optionally sets the I(UID) of the user.}
		ssh_key_comment: ${18:ansible-generated on $HOSTNAME}
		group: ${19:# Optionally sets the user's primary group (takes a group name).}
		createhome: ${20:#yes|no}
		system: ${21:yes|#no}
		remove: ${22:yes|#no}
		seuser: ${23:# Optionally sets the seuser type (user_u) on selinux enabled systems.}
		state: ${24:#present|absent}
		ssh_key_file: ${25:.ssh/id_rsa}
		login_class: ${26:# Optionally sets the user's login class for FreeBSD, OpenBSD and NetBSD systems.}
		shell: ${27:# Optionally set the user's shell.}
$0
endsnippet

snippet meta "Execute Ansible 'actions'"
- name:
	meta:
		${1:free_form=noop|flush_handlers|refresh_inventory|clear_facts|clear_host_errors|end_play}
$0
endsnippet

snippet assert "Asserts given expressions are true"
- name:
	assert:
		that: ${1:# A string expression of the same form that can be passed to the 'when' statement}
		msg: ${2:# The customized message used for a failing assertion}
$0
endsnippet

snippet async_status "Obtain status of asynchronous task"
- name:
	async_status:
		jid: ${1:# Job or task identifier}
		mode: ${2:#status|cleanup}
$0
endsnippet

snippet debug "Print statements during execution"
- name:
	debug:
		msg: ${1:Hello world!}
		var: ${2:# A variable name to debug.  Mutually exclusive with the 'msg' option.}
		verbosity: ${3:0}
$0
endsnippet

snippet fail "Fail with custom message"
- name:
	fail:
		msg: ${1:'Failed as requested from task'}
$0
endsnippet

snippet include "include a play or task list."
- name:
	include:
		free-form: ${1:# This module allows you to specify the name of the file directly w/o any other options.}
$0
endsnippet

snippet include_role "Load and execute a role"
- name:
	include_role:
		name: ${1:# The name of the role to be executed.}
		allow_duplicates: ${2:yes}
		tasks_from: ${3:main}
		vars_from: ${4:main}
		defaults_from: ${5:main}
		private: ${6:# If True the variables from defaults/ and vars/ in a role will not be made available to the rest of the play.}
$0
endsnippet

snippet include_vars "Load variables from files, dynamically within a task."
- name:
	include_vars:
		ignore_files: ${1:# List of file names to ignore.}
		free-form: ${2:# This module allows you to specify the 'file' option directly w/o any other options. There is no 'free-form' option, this is just an indicator, see example below.}
		files_matching: ${3:# Limit the files that are loaded within any directory to this regular expression.}
		depth: ${4:0}
		extensions: ${5:[u'yaml', u'yml', u'json']}
		file: ${6:# The file name from which variables should be loaded.}
		dir: ${7:# The directory name from which the variables should be loaded.}
		name: ${8:# The name of a variable into which assign the included vars, if omitted (null) they will be made top level vars.}
$0
endsnippet

snippet pause "Pause playbook execution"
- name:
	pause:
		seconds: ${1:# A positive number of seconds to pause for.}
		minutes: ${2:# A positive number of minutes to pause for.}
		prompt: ${3:# Optional text to use for the prompt message.}
$0
endsnippet

snippet set_fact "Set host facts from a task"
- name:
	set_fact:
		key_value: ${1:# The C(set_fact) module takes key=value pairs as variables to set in the playbook scope. Or alternatively, accepts complex arguments using the C(args:) statement.}
$0
endsnippet

snippet set_stats "Set stats for the current ansible run"
- name:
	set_stats:
		data: ${1:# A dictionary of which each key represents a stat (or variable) you want to keep track of}
		aggregate: ${2:yes}
		per_host: ${3:no}
$0
endsnippet

snippet wait_for "Waits for a condition before continuing."
- name:
	wait_for:
		active_connection_states: ${1:[u'ESTABLISHED', u'SYN_SENT', u'SYN_RECV', u'FIN_WAIT1', u'FIN_WAIT2', u'TIME_WAIT']}
		host: ${2:127.0.0.1}
		connect_timeout: ${3:5}
		delay: ${4:0}
		state: ${5:present|#started|stopped|absent|drained}
		sleep: ${6:1}
		timeout: ${7:300}
		exclude_hosts: ${8:# list of hosts or IPs to ignore when looking for active TCP connections for C(drained) state}
		search_regex: ${9:# Can be used to match a string in either a file or a socket connection. Defaults to a multiline regex.}
		path: ${10:# path to a file on the filesytem that must exist before continuing}
		port: ${11:# port number to poll}
$0
endsnippet

snippet wait_for_connection "Waits until remote system is reachable/usable"
- name:
	wait_for_connection:
		delay: ${1:0}
		sleep: ${2:1}
		connect_timeout: ${3:5}
		timeout: ${4:600}
$0
endsnippet

snippet apache2_mod_proxy "Set and/or get members' attributes of an Apache httpd 2.4 mod_proxy balancer pool"
- name:
	apache2_mod_proxy:
		balancer_vhost: ${1:# (ipv4|ipv6|fqdn):port of the Apache httpd 2.4 mod_proxy balancer pool.}
		tls: ${2:true|false}
		member_host: ${3:# (ipv4|ipv6|fqdn) of the balancer member to get or to set attributes to. Port number is autodetected and should not be specified here. If undefined, apache2_mod_proxy module will return a members list of dictionaries of all the current balancer pool members' attributes.}
		validate_certs: ${4:true|false}
		state: ${5:present|absent|enabled|disabled|drained|hot_standby|ignore_errors}
		balancer_url_suffix: ${6:/balancer-manager/}
$0
endsnippet

snippet apache2_module "enables/disables a module of the Apache2 webserver"
- name:
	apache2_module:
		name: ${1:# name of the module to enable/disable}
		state: ${2:#present|absent}
		force: ${3:True|False}
		ignore_configcheck: ${4:True|False}
$0
endsnippet

snippet deploy_helper "Manages some of the steps common in deploying projects."
- name:
	deploy_helper:
		path: ${1:# the root path of the project. Alias I(dest). Returned in the C(deploy_helper.project_path) fact.}
		unfinished_filename: ${2:DEPLOY_UNFINISHED}
		keep_releases: ${3:5}
		current_path: ${4:current}
		state: ${5:#present|finalize|absent|clean|query}
		shared_path: ${6:shared}
		releases_path: ${7:releases}
		clean: ${8:yes}
		release: ${9:# the release version that is being deployed. Defaults to a timestamp format %Y%m%d%H%M%S (i.e. '20141119223359'). This parameter is optional during C(state=present), but needs to be set explicitly for C(state=finalize). You can use the generated fact C(release={{ deploy_helper.new_release }}).}
$0
endsnippet

snippet django_manage "Manages a Django application."
- name:
	django_manage:
		app_path: ${1:# The path to the root of the Django application where B(manage.py) lives.}
		command: ${2:cleanup|collectstatic|flush|loaddata|migrate|runfcgi|syncdb|test|validate}
		virtualenv: ${3:# An optional path to a I(virtualenv) installation to use while running the manage application.}
		settings: ${4:# The Python path to the application's settings module, such as 'myapp.settings'.}
		pythonpath: ${5:# A directory to add to the Python path. Typically used to include the settings module if it is located external to the application directory.}
		database: ${6:# The database to target. Used by the 'createcachetable', 'flush', 'loaddata', and 'syncdb' commands.}
		apps: ${7:# A list of space-delimited apps to target. Used by the 'test' command.}
		cache_table: ${8:# The name of the table used for database-backed caching. Used by the 'createcachetable' command.}
		merge: ${9:# Will run out-of-order or missing migrations as they are not rollback migrations, you can only use this parameter with 'migrate' command}
		skip: ${10:# Will skip over out-of-order missing migrations, you can only use this parameter with I(migrate)}
		link: ${11:# Will create links to the files instead of copying them, you can only use this parameter with 'collectstatic' command}
		fixtures: ${12:# A space-delimited list of fixture file names to load in the database. B(Required) by the 'loaddata' command.}
		failfast: ${13:yes|#no}
$0
endsnippet

snippet ejabberd_user "Manages users for ejabberd servers"
- name:
	ejabberd_user:
		username: ${1:# the name of the user to manage}
		host: ${2:# the ejabberd host associated with this username}
		password: ${3:# the password to assign to the username}
		logging: ${4:true|false|yes|no}
		state: ${5:#present|absent}
$0
endsnippet

snippet htpasswd "manage user files for basic authentication"
- name:
	htpasswd:
		name: ${1:# User name to add or remove}
		path: ${2:# Path to the file that contains the usernames and passwords}
		state: ${3:#present|absent}
		create: ${4:#yes|no}
		password: ${5:# Password associated with user.}
		crypt_scheme: ${6:#apr_md5_crypt|des_crypt|ldap_sha1|plaintext}
$0
endsnippet

snippet jboss "deploy applications to JBoss"
- name:
	jboss:
		deployment: ${1:# The name of the deployment}
		src: ${2:# The remote path of the application ear or war to deploy}
		deploy_path: ${3:/var/lib/jbossas/standalone/deployments}
		state: ${4:#present|absent}
$0
endsnippet

snippet jenkins_job "Manage jenkins jobs"
- name:
	jenkins_job:
		name: ${1:# Name of the Jenkins job.}
		url: ${2:http://localhost:8080}
		enabled: ${3:# Whether the job should be enabled or disabled.}
		state: ${4:#present|absent}
		token: ${5:# API token used to authenticate alternatively to password.}
		user: ${6:# User to authenticate with the Jenkins server.}
		password: ${7:# Password to authenticate with the Jenkins server.}
		config: ${8:# config in XML format.}
$0
endsnippet

snippet jenkins_plugin "Add or remove Jenkins plugin"
- name:
	jenkins_plugin:
		name: ${1:# Plugin name.}
		jenkins_home: ${2:/var/lib/jenkins}
		group: ${3:jenkins}
		url: ${4:http://localhost:8080}
		updates_url: ${5:https://updates.jenkins-ci.org}
		with_dependencies: ${6:#yes|no}
		state: ${7:absent|#present|pinned|unpinned|enabled|disabled|latest}
		version: ${8:# Plugin version number.}
		params: ${9:# Option used to allow the user to overwrite any of the other options. To remove an option, set the value of the option to C(null).}
		mode: ${10:0664}
		timeout: ${11:30}
		owner: ${12:jenkins}
		updates_expiration: ${13:86400}
$0
endsnippet

snippet jenkins_script "Executes a groovy script in the jenkins instance"
- name:
	jenkins_script:
		script: ${1:# The groovy script to be executed. This gets passed as a string Template if args is defined.}
		password: ${2:# The password to connect to the jenkins server with.}
		user: ${3:# The username to connect to the jenkins server with.}
		url: ${4:http://localhost:8080}
		args: ${5:# A dict of key-value pairs used in formatting the script.}
		validate_certs: ${6:yes}
$0
endsnippet

snippet jira "create and modify issues in a JIRA instance"
- name:
	jira:
		username: ${1:# The username to log-in with.}
		operation: ${2:create|comment|edit|fetch|transition}
		password: ${3:# The password to log-in with.}
		uri: ${4:# Base URI for the JIRA instance.}
		comment: ${5:# The comment text to add.}
		description: ${6:# The issue description, where appropriate.}
		assignee: ${7:# Sets the assignee on create or transition operations. Note not all transitions will allow this.}
		inwardissue: ${8:# Set issue from which link will be created.}
		linktype: ${9:# Set type of link, when action 'link' selected.}
		fields: ${10:# This is a free-form data structure that can contain arbitrary data. This is passed directly to the JIRA REST API (possibly after merging with other required data, as when passed to create). See examples for more information, and the JIRA REST API for the structure required for various fields.}
		outwardissue: ${11:# Set issue to which link will be created.}
		summary: ${12:# The issue summary, where appropriate.}
		project: ${13:# The project for this operation. Required for issue creation.}
		status: ${14:# The desired status; only relevant for the transition operation.}
		timeout: ${15:10}
		issuetype: ${16:# The issue type, for issue creation.}
		issue: ${17:# An existing issue key to operate on.}
$0
endsnippet

snippet letsencrypt "Create SSL certificates with Let's Encrypt"
- name:
	letsencrypt:
		dest: ${1:# T}
		account_key: ${2:# File containing the the Let's Encrypt account RSA key.}
		csr: ${3:# File containing the CSR for the new certificate.}
		acme_directory: ${4:https://acme-staging.api.letsencrypt.org/directory}
		account_email: ${5:# The email address associated with this account.}
		data: ${6:# The data to validate ongoing challenges.}
		challenge: ${7:#http-01|dns-01|tls-sni-02}
		agreement: ${8:https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf}
		remaining_days: ${9:10}
$0
endsnippet

snippet nginx_status_facts "Retrieve nginx status facts."
- name:
	nginx_status_facts:
		url: ${1:# URL of the nginx status.}
		timeout: ${2:10}
$0
endsnippet

snippet supervisorctl "Manage the state of a program or group of programs running via supervisord"
- name:
	supervisorctl:
		state: ${1:present|started|stopped|restarted|absent}
		name: ${2:# The name of the supervisord program or group to manage.}
		username: ${3:# username to use for authentication}
		supervisorctl_path: ${4:# path to supervisorctl executable}
		password: ${5:# password to use for authentication}
		config: ${6:# The supervisor configuration file path}
		server_url: ${7:# URL on which supervisord server is listening}
$0
endsnippet

snippet taiga_issue "Creates/deletes an issue in a Taiga Project Management Platform"
- name:
	taiga_issue:
		project: ${1:# Name of the project containing the issue. Must exist previously.}
		issue_type: ${2:# The issue type. Must exist previously.}
		subject: ${3:# The issue subject.}
		status: ${4:New}
		severity: ${5:Normal}
		tags: ${6:[]}
		priority: ${7:Normal}
		taiga_host: ${8:https://api.taiga.io}
		state: ${9:#present|absent}
		attachment: ${10:# Path to a file to be attached to the issue.}
		attachment_description: ${11:}
		description: ${12:}
$0
endsnippet

snippet tower_credential "create, update, or destroy Ansible Tower credential."
- name:
	tower_credential:
		kind: ${1:ssh|net|scm|aws|rax|vmware|satellite6|cloudforms|gce|azure|azure_rm|openstack}
		name: ${2:# The name to use for the credential.}
		authorize: ${3:no}
		username: ${4:# Username for this credential. access_key for AWS.}
		domain: ${5:# Domain for openstack type.}
		description: ${6:# The description to use for the credential.}
		tower_host: ${7:# URL to your Tower instance.}
		vault_password: ${8:# Valut password. Use ASK for prompting.}
		team: ${9:# Team that should own this credential.}
		tower_config_file: ${10:# Path to the Tower config file. See notes.}
		host: ${11:# Host for this credential.}
		user: ${12:# User that should own this credential.}
		become_password: ${13:# Become password. Use ASK for prompting.}
		tower_password: ${14:# Password for your Tower instance.}
		tower_username: ${15:# Username for your Tower instance.}
		become_username: ${16:# Become username. Use ASK for prompting.}
		password: ${17:# Password for this credential. Use ASK for prompting. secret_key for AWS. api_key for RAX.}
		tenant: ${18:# Tenant ID for azure_rm type.}
		subscription: ${19:# Subscription ID for azure_rm type.}
		become_method: ${20:#None|sudo|su|pbrun|pfexec}
		tower_verify_ssl: ${21:yes}
		secret: ${22:# Secret token for azure_rm type.}
		project: ${23:# Project that should for this credential.}
		state: ${24:#present|absent}
		client: ${25:# Client or application ID for azure_rm type.}
		ssh_key_data: ${26:# Path to SSH private key.}
		ssh_key_unlock: ${27:# Unlock password for ssh_key. Use ASK for prompting.}
		organization: ${28:# Organization that should own the credential.}
		authorize_password: ${29:# Password for net credentials that require authroize.}
$0
endsnippet

snippet tower_group "create, update, or destroy Ansible Tower group."
- name:
	tower_group:
		name: ${1:# The name to use for the group.}
		inventory: ${2:# Inventory the group should be made a member of.}
		credential: ${3:# Credential to use for the group.}
		description: ${4:# The description to use for the group.}
		overwrite_vars: ${5:# Override vars in child groups and hosts with those from external source.}
		source_regions: ${6:# Regions for cloud provider.}
		variables: ${7:# Variables to use for the group, use '@' for a file.}
		tower_username: ${8:# Username for your Tower instance.}
		tower_password: ${9:# Password for your Tower instance.}
		tower_config_file: ${10:# Path to the Tower config file. See notes.}
		overwrite: ${11:no}
		source_vars: ${12:# Override variables from source with variables from this field.}
		source_script: ${13:# Inventory script to be used when group type is "custom".}
		update_on_launch: ${14:no}
		tower_verify_ssl: ${15:yes}
		instance_filters: ${16:# Comma-separated list of filter expressions for matching hosts.}
		source: ${17:manual|file|ec2|rax|vmware|gce|azure|azure_rm|openstack|satellite6|cloudforms|custom}
		state: ${18:#present|absent}
		group_by: ${19:# Limit groups automatically created from inventory source.}
		tower_host: ${20:# URL to your Tower instance.}
$0
endsnippet

snippet tower_host "create, update, or destroy Ansible Tower host."
- name:
	tower_host:
		name: ${1:# The name to use for the host.}
		inventory: ${2:# Inventory the host should be made a member of.}
		tower_host: ${3:# URL to your Tower instance.}
		variables: ${4:# Variables to use for the host. Use '@' for a file.}
		enabled: ${5:yes}
		tower_username: ${6:# Username for your Tower instance.}
		state: ${7:#present|absent}
		tower_password: ${8:# Password for your Tower instance.}
		tower_config_file: ${9:# Path to the Tower config file. See notes.}
		tower_verify_ssl: ${10:yes}
		description: ${11:# The description to use for the host.}
$0
endsnippet

snippet tower_inventory "create, update, or destroy Ansible Tower inventory."
- name:
	tower_inventory:
		name: ${1:# The name to use for the inventory.}
		organization: ${2:# Organization the inventory belongs to.}
		tower_host: ${3:# URL to your Tower instance.}
		variables: ${4:# Inventory variables. Use '@' to get from file.}
		tower_username: ${5:# Username for your Tower instance.}
		state: ${6:#present|absent}
		tower_password: ${7:# Password for your Tower instance.}
		tower_config_file: ${8:# Path to the Tower config file. See notes.}
		tower_verify_ssl: ${9:yes}
		description: ${10:# The description to use for the inventory.}
$0
endsnippet

snippet tower_job_cancel "Cancel an Ansible Tower Job."
- name:
	tower_job_cancel:
		job_id: ${1:# ID of the job to cancel}
		tower_config_file: ${2:# Path to the Tower config file. See notes.}
		tower_password: ${3:# Password for your Tower instance.}
		tower_username: ${4:# Username for your Tower instance.}
		tower_host: ${5:# URL to your Tower instance.}
		tower_verify_ssl: ${6:yes}
		fail_if_not_running: ${7:no}
$0
endsnippet

snippet tower_job_launch "Launch an Ansible Job."
- name:
	tower_job_launch:
		job_template: ${1:# Name of the job_template to use.}
		credential: ${2:# Credential to use for job, only used if prompt for credential is set.}
		use_job_endpoint: ${3:no}
		tags: ${4:# Specific tags to use for from playbook.}
		extra_vars: ${5:# Extra_vars to use for the job_template. Use '@' for a file.}
		job_explanation: ${6:# Job explanation field.}
		tower_password: ${7:# Password for your Tower instance.}
		job_type: ${8:run|check|scan}
		tower_config_file: ${9:# Path to the Tower config file. See notes.}
		limit: ${10:# Limit to use for the job_template.}
		inventory: ${11:# Inventory to use for the job, only used if prompt for inventory is set.}
		tower_verify_ssl: ${12:yes}
		tower_username: ${13:# Username for your Tower instance.}
		tower_host: ${14:# URL to your Tower instance.}
$0
endsnippet

snippet tower_job_list "List Ansible Tower jobs."
- name:
	tower_job_list:
		status: ${1:pending|waiting|running|error|failed|canceled|successful}
		tower_host: ${2:# URL to your Tower instance.}
		tower_password: ${3:# Password for your Tower instance.}
		tower_config_file: ${4:# Path to the Tower config file. See notes.}
		all_pages: ${5:no}
		tower_verify_ssl: ${6:yes}
		tower_username: ${7:# Username for your Tower instance.}
		query: ${8:# Query used to further filter the list of jobs. {"foo":"bar"} will be passed at ?foo=bar}
		page: ${9:# Page number of the results to fetch.}
$0
endsnippet

snippet tower_job_template "create, update, or destroy Ansible Tower job_template."
- name:
	tower_job_template:
		job_type: ${1:run|check|scan}
		playbook: ${2:# Playbook to use for the job_template.}
		name: ${3:# Name to use for the job_template.}
		project: ${4:# Project to use for the job_template.}
		network_credential: ${5:# The network_credential to use for the job_template.}
		description: ${6:# Description to use for the job_template.}
		tower_host: ${7:# URL to your Tower instance.}
		ask_inventory: ${8:no}
		ask_job_type: ${9:no}
		tower_username: ${10:# Username for your Tower instance.}
		skip_tags: ${11:# The skip_tags to use for the job_template.}
		tower_password: ${12:# Password for your Tower instance.}
		tower_config_file: ${13:# Path to the Tower config file. See notes.}
		ask_tags: ${14:no}
		host_config_key: ${15:# Allow provisioning callbacks using this host config key.}
		machine_credential: ${16:# Machine_credential to use for the job_template.}
		tower_verify_ssl: ${17:yes}
		ask_credential: ${18:no}
		job_tags: ${19:# The job_tags to use for the job_template.}
		verbosity: ${20:verbose|debug}
		state: ${21:#present|absent}
		ask_extra_vars: ${22:no}
		extra_vars_path: ${23:# Path to the extra_vars yaml file.}
		inventory: ${24:# Inventory to use for the job_template.}
		limit: ${25:# A host pattern to further constrain the list of hosts managed or affected by the playbook}
		forks: ${26:# The number of parallel or simultaneous processes to use while executing the playbook.}
		cloud_credential: ${27:# Cloud_credential to use for the job_template.}
		become_enabled: ${28:no}
$0
endsnippet

snippet tower_job_wait "Wait for Ansible Tower job to finish."
- name:
	tower_job_wait:
		job_id: ${1:# ID of the job to monitor.}
		min_interval: ${2:1}
		tower_host: ${3:# URL to your Tower instance.}
		tower_config_file: ${4:# Path to the Tower config file. See notes.}
		max_interval: ${5:30}
		timeout: ${6:# Maximum time in seconds to wait for a job to finish.}
		tower_password: ${7:# Password for your Tower instance.}
		tower_username: ${8:# Username for your Tower instance.}
		tower_verify_ssl: ${9:yes}
$0
endsnippet

snippet tower_label "create, update, or destroy Ansible Tower label."
- name:
	tower_label:
		name: ${1:# Name to use for the label.}
		organization: ${2:# Organization the label should be applied to.}
		tower_host: ${3:# URL to your Tower instance.}
		tower_username: ${4:# Username for your Tower instance.}
		state: ${5:#present|absent}
		tower_password: ${6:# Password for your Tower instance.}
		tower_config_file: ${7:# Path to the Tower config file. See notes.}
		tower_verify_ssl: ${8:yes}
$0
endsnippet

snippet tower_organization "create, update, or destroy Ansible Tower organizations"
- name:
	tower_organization:
		name: ${1:# Name to use for the organization.}
		tower_host: ${2:# URL to your Tower instance.}
		tower_username: ${3:# Username for your Tower instance.}
		state: ${4:#present|absent}
		tower_password: ${5:# Password for your Tower instance.}
		tower_config_file: ${6:# Path to the Tower config file. See notes.}
		tower_verify_ssl: ${7:yes}
		description: ${8:# The description to use for the organization.}
$0
endsnippet

snippet tower_project "create, update, or destroy Ansible Tower projects"
- name:
	tower_project:
		name: ${1:# Name to use for the project.}
		scm_branch: ${2:# The branch to use for the scm resource.}
		description: ${3:# Description to use for the project.}
		tower_host: ${4:# URL to your Tower instance.}
		scm_update_on_launch: ${5:no}
		scm_clean: ${6:no}
		scm_type: ${7:#manual|git|hg|svn}
		scm_delete_on_update: ${8:no}
		tower_username: ${9:# Username for your Tower instance.}
		tower_password: ${10:# Password for your Tower instance.}
		tower_config_file: ${11:# Path to the Tower config file. See notes.}
		tower_verify_ssl: ${12:yes}
		scm_credential: ${13:# Name of the credential to use with this scm resource.}
		scm_url: ${14:# URL of scm resource.}
		state: ${15:#present|absent}
		local_path: ${16:# The server playbook directory for manual projects.}
		organization: ${17:# Primary key of organization for project.}
$0
endsnippet

snippet tower_role "create, update, or destroy Ansible Tower role."
- name:
	tower_role:
		role: ${1:admin|read|member|execute|adhoc|update|use|auditor}
		credential: ${2:# Credential the role acts on.}
		job_template: ${3:# The job_template the role acts on.}
		tower_host: ${4:# URL to your Tower instance.}
		team: ${5:# Team that receives the permissions specified by the role.}
		project: ${6:# Project the role acts on.}
		tower_username: ${7:# Username for your Tower instance.}
		state: ${8:#present|absent}
		inventory: ${9:# Inventory the role acts on.}
		tower_password: ${10:# Password for your Tower instance.}
		tower_config_file: ${11:# Path to the Tower config file. See notes.}
		organization: ${12:# Organiation the role acts on.}
		target_team: ${13:# Team that the role acts on.}
		tower_verify_ssl: ${14:yes}
		user: ${15:# User that receives the permissions specified by the role.}
$0
endsnippet

snippet tower_team "create, update, or destroy Ansible Tower team."
- name:
	tower_team:
		name: ${1:# Name to use for the team.}
		organization: ${2:# Organization the team should be made a member of.}
		tower_host: ${3:# URL to your Tower instance.}
		tower_username: ${4:# Username for your Tower instance.}
		state: ${5:#present|absent}
		tower_password: ${6:# Password for your Tower instance.}
		tower_config_file: ${7:# Path to the Tower config file. See notes.}
		tower_verify_ssl: ${8:yes}
$0
endsnippet

snippet tower_user "create, update, or destroy Ansible Tower user."
- name:
	tower_user:
		username: ${1:# The username of the user.}
		email: ${2:# Email address of the user.}
		superuser: ${3:no}
		first_name: ${4:# First name of the user.}
		last_name: ${5:# Last name of the user.}
		tower_host: ${6:# URL to your Tower instance.}
		tower_username: ${7:# Username for your Tower instance.}
		state: ${8:#present|absent}
		auditor: ${9:no}
		tower_password: ${10:# Password for your Tower instance.}
		tower_config_file: ${11:# Path to the Tower config file. See notes.}
		organization: ${12:# Organization the user should be made a member of.}
		password: ${13:# Password of the user.}
		tower_verify_ssl: ${14:yes}
$0
endsnippet

snippet win_acl "Set file/directory permissions for a system user or group."
- name:
	win_acl:
		user: ${1:none}
		rights: ${2:AppendData|ChangePermissions|Delete|DeleteSubdirectoriesAndFiles|ExecuteFile|FullControl|ListDirectory|Modify|Read|ReadAndExecute|ReadAttributes|ReadData|ReadExtendedAttributes|ReadPermissions|Synchronize|TakeOwnership|Traverse|Write|WriteAttributes|WriteData|WriteExtendedAttributes}
		path: ${3:# File or Directory}
		type: ${4:allow|deny}
		propagation: ${5:#None|NoPropagateInherit|InheritOnly}
		state: ${6:#present|absent}
		inherit: ${7:ContainerInherit|ObjectInherit|None}
$0
endsnippet

snippet win_acl_inheritance "Change ACL inheritance"
- name:
	win_acl_inheritance:
		path: ${1:# Path to be used for changing inheritance}
		state: ${2:present|#absent}
		reorganize: ${3:#False|True}
$0
endsnippet

snippet win_chocolatey "Installs packages using chocolatey"
- name:
	win_chocolatey:
		name: ${1:# Name of the package to be installed.}
		upgrade: ${2:True|#False}
		force: ${3:True|#False}
		ignore_checksums: ${4:no}
		allow_empty_checksums: ${5:no}
		install_args: ${6:# Arguments to pass to the native installer.}
		source: ${7:# Specify source rather than using default chocolatey repository.}
		state: ${8:#present|absent|latest|reinstalled}
		version: ${9:# Specific version of the package to be installed.}
		params: ${10:# Parameters to pass to the package}
		ignore_dependencies: ${11:no}
		timeout: ${12:2700}
$0
endsnippet

snippet win_command "Executes a command on a remote Windows node"
- name:
	win_command:
		${1:free_form=# the win_command module takes a free form command to run.  There is no parameter actually named 'free form'. See the examples!}
		creates: ${2:# a path or path filter pattern; when the referenced path exists on the target host, the task will be skipped.}
		chdir: ${3:# set the specified path as the current working directory before executing a command}
		removes: ${4:# a path or path filter pattern; when the referenced path B(does not) exist on the target host, the task will be skipped.}
$0
endsnippet

snippet win_copy "Copies files to remote locations on windows hosts."
- name:
	win_copy:
		dest: ${1:# Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too.}
		src: ${2:# Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.}
		content: ${3:# When used instead of C(src), sets the contents of a file directly to the specified value. This is for simple values, for anything complex or with formatting please switch to the template module.}
		remote_src: ${4:True|#False}
		force: ${5:#True|False}
$0
endsnippet

snippet win_disk_image "Manage ISO/VHD/VHDX mounts on Windows hosts"
- name:
	win_disk_image:
		image_path: ${1:# path to an ISO, VHD, or VHDX image on the target Windows host (the file cannot reside on a network share)}
		state: ${2:#present|absent}
$0
endsnippet

snippet win_dns_client "Configures DNS lookup on Windows hosts"
- name:
	win_dns_client:
		adapter_names: ${1:# Adapter name or list of adapter names for which to manage DNS settings ('*' is supported as a wildcard value). The adapter name used is the connection caption in the Network Control Panel or via C(Get-NetAdapter), eg C(Local Area Connection).}
		ipv4_addresses: ${2:# Single or ordered list of DNS server IPv4 addresses to configure for lookup. An empty list will configure the adapter to use the DHCP-assigned values on connections where DHCP is enabled, or disable DNS lookup on statically-configured connections.}
$0
endsnippet

snippet win_domain "Ensures the existence of a Windows domain."
- name:
	win_domain:
		dns_domain_name: ${1:# the DNS name of the domain which should exist and be reachable or reside on the target Windows host}
		safe_mode_password: ${2:# safe mode password for the domain controller}
$0
endsnippet

snippet win_domain_controller "Manage domain controller/member server state for a Windows host"
- name:
	win_domain_controller:
		domain_admin_user: ${1:# username of a domain admin for the target domain (necessary to promote or demote a domain controller)}
		domain_admin_password: ${2:# password for the specified C(domain_admin_user)}
		state: ${3:domain_controller|member_server}
		local_admin_password: ${4:# password to be assigned to the local C(Administrator) user (required when C(state) is C(member_server))}
		dns_domain_name: ${5:# when C(state) is C(domain_controller), the DNS name of the domain for which the targeted Windows host should be a DC}
		safe_mode_password: ${6:# safe mode password for the domain controller (required when C(state) is C(domain_controller))}
$0
endsnippet

snippet win_domain_membership "Manage domain/workgroup membership for a Windows host"
- name:
	win_domain_membership:
		domain_admin_user: ${1:# username of a domain admin for the target domain (required to join or leave the domain)}
		workgroup_name: ${2:# when C(state) is C(workgroup), the name of the workgroup that the Windows host should be in}
		state: ${3:domain|workgroup}
		dns_domain_name: ${4:# when C(state) is C(domain), the DNS name of the domain to which the targeted Windows host should be joined}
		hostname: ${5:# the desired hostname for the Windows host}
		domain_admin_password: ${6:# password for the specified C(domain_admin_user)}
$0
endsnippet

snippet win_dotnet_ngen "Runs ngen to recompile DLLs after .NET  updates"
- name:
	win_dotnet_ngen:
$0
endsnippet

snippet win_environment "Modifies environment variables on windows hosts."
- name:
	win_environment:
		name: ${1:no default}
		level: ${2:machine|process|user}
		state: ${3:#present|absent}
		value: ${4:no default}
$0
endsnippet

snippet win_feature "Installs and uninstalls Windows Features on Windows Server"
- name:
	win_feature:
		name: ${1:# Names of roles or features to install as a single feature or a comma-separated list of features}
		source: ${2: {driveletter}:\sources\sxs| {IP}\Share\sources\sxs}
		state: ${3:#present|absent}
		include_management_tools: ${4:True|False}
		include_sub_features: ${5:True|False}
		restart: ${6:True|False}
$0
endsnippet

snippet win_file "Creates, touches or removes files or directories."
- name:
	win_file:
		path: ${1:# path to the file being managed.  Aliases: I(dest), I(name)}
		state: ${2:file|directory|touch|absent}
$0
endsnippet

snippet win_file_version "Get DLL or EXE file build version"
- name:
	win_file_version:
		path: ${1:# File to get version(provide absolute path)}
$0
endsnippet

snippet win_find "return a list of files based on specific criteria"
- name:
	win_find:
		paths: ${1:# List of paths of directories to search for files or folders in. This can be supplied as a single path or a list of paths.}
		file_type: ${2:#file|directory}
		checksum_algorithm: ${3:md5|#sha1|sha256|sha384|sha512}
		age: ${4:# Select files or folders whose age is equal to or greater than the specified time. Use a negative age to find files equal to or less than the specified time. You can choose seconds, minutes, hours, days or weeks by specifying the first letter of an of those words (e.g., "2s", "10d", 1w").}
		recurse: ${5:true|false}
		age_stamp: ${6:atime|#mtime|ctime}
		patterns: ${7:# One or more (powershell or regex) patterns to compare filenames with. The type of pattern matching is controlled by C(use_regex) option. The patterns retrict the list of files or folders to be returned based on the filenames. For a file to be matched it only has to match with one pattern in a list provided.}
		get_checksum: ${8:true|false}
		use_regex: ${9:true|false}
		follow: ${10:true|false}
		hidden: ${11:true|false}
		size: ${12:no}
$0
endsnippet

snippet win_firewall_rule "Windows firewall automation"
- name:
	win_firewall_rule:
		direction: ${1:in|out}
		name: ${2:# the rules name}
		state: ${3:#present|absent}
		action: ${4:allow|block|bypass}
		profile: ${5:any}
		remoteport: ${6:any}
		enable: ${7:yes}
		protocol: ${8:any}
		service: ${9:any}
		description: ${10:# description for the firewall rule}
		localip: ${11:any}
		program: ${12:# the program this rule applies to}
		remoteip: ${13:any}
		force: ${14:no}
		localport: ${15:any}
$0
endsnippet

snippet win_get_url "Fetches a file from a given URL"
- name:
	win_get_url:
		url: ${1:# The full URL of a file to download}
		dest: ${2:# The absolute path of the location to save the file at the URL. Be sure to include a filename and extension as appropriate.}
		username: ${3:# Basic authentication username}
		force: ${4:yes|no}
		skip_certificate_validation: ${5:no}
		proxy_url: ${6:# The full URL of the proxy server to download through.}
		proxy_password: ${7:# Proxy authentication password}
		proxy_username: ${8:# Proxy authentication username}
		password: ${9:# Basic authentication password}
$0
endsnippet

snippet win_group "Add and remove local groups"
- name:
	win_group:
		name: ${1:# Name of the group}
		state: ${2:#present|absent}
		description: ${3:# Description of the group}
$0
endsnippet

snippet win_iis_virtualdirectory "Configures a virtual directory in IIS."
- name:
	win_iis_virtualdirectory:
		name: ${1:# The name of the virtual directory to create or remove}
		site: ${2:# The site name under which the virtual directory is created or exists.}
		application: ${3:# The application under which the virtual directory is created or exists.}
		state: ${4:absent|#present}
		physical_path: ${5:# The physical path to the folder in which the new virtual directory is created. The specified folder must already exist.}
$0
endsnippet

snippet win_iis_webapplication "Configures IIS web applications."
- name:
	win_iis_webapplication:
		name: ${1:# Name of the web application.}
		site: ${2:# Name of the site on which the application is created.}
		state: ${3:present|absent}
		application_pool: ${4:# The application pool in which the new site executes.}
		physical_path: ${5:# The physical path on the remote host to use for the new application. The specified folder must already exist.}
$0
endsnippet

snippet win_iis_webapppool "Configures an IIS Web Application Pool."
- name:
	win_iis_webapppool:
		name: ${1:# Name of application pool}
		attributes: ${2:# Application Pool attributes from string where attributes are separated by a pipe and attribute name/values by colon Ex. "foo:1|bar:2".}
		state: ${3:absent|stopped|started|restarted}
$0
endsnippet

snippet win_iis_webbinding "Configures a IIS Web site."
- name:
	win_iis_webbinding:
		name: ${1:# Names of web site}
		protocol: ${2:# The protocol to be used for the Web binding (usually HTTP, HTTPS, or FTP).}
		certificate_hash: ${3:# Certificate hash for the SSL binding. The certificate hash is the unique identifier for the certificate.}
		ip: ${4:# The IP address to bind to / use for the new site.}
		host_header: ${5:# The host header to bind to / use for the new site.}
		state: ${6:present|absent}
		port: ${7:# The port to bind to / use for the new site.}
		certificate_store_name: ${8:My}
$0
endsnippet

snippet win_iis_website "Configures a IIS Web site."
- name:
	win_iis_website:
		name: ${1:# Names of web site}
		application_pool: ${2:# The application pool in which the new site executes.}
		parameters: ${3:# Custom site Parameters from string where properties are separated by a pipe and property name/values by colon Ex. "foo:1|bar:2"}
		ip: ${4:# The IP address to bind to / use for the new site.}
		physical_path: ${5:# The physical path on the remote host to use for the new site. The specified folder must already exist.}
		hostname: ${6:# The host header to bind to / use for the new site.}
		site_id: ${7:# Explicitly set the IIS numeric ID for a site. Note that this value cannot be changed after the website has been created.}
		ssl: ${8:# Enables HTTPS binding on the site..}
		state: ${9:started|restarted|stopped|absent}
		port: ${10:# The port to bind to / use for the new site.}
$0
endsnippet

snippet win_lineinfile "Ensure a particular line is in a file, or replace an existing line using a back-referenced regular expression."
- name:
	win_lineinfile:
		path: ${1:# The path of the file to modify.}
		insertbefore: ${2:BOF|*regex*}
		encoding: ${3:auto}
		create: ${4:yes|#no}
		newline: ${5:#windows|unix}
		backrefs: ${6:yes|#no}
		state: ${7:#present|absent}
		insertafter: ${8:#EOF|*regex*}
		regexp: ${9:# The regular expression to look for in every line of the file. For C(state=present), the pattern to replace if found; only the last line found will be replaced. For C(state=absent), the pattern of the line to remove. Uses .NET compatible regular expressions; see U(https://msdn.microsoft.com/en-us/library/hs600312%28v=vs.110%29.aspx).}
		line: ${10:# Required for C(state=present). The line to insert/replace into the file. If C(backrefs) is set, may contain backreferences that will get expanded with the C(regexp) capture groups if the regexp matches.}
		backup: ${11:yes|#no}
		validate: ${12:# Validation to run before copying into place. Use %s in the command to indicate the current file to validate.}
$0
endsnippet

snippet win_msg "Sends a message to logged in users on Windows hosts."
- name:
	win_msg:
		msg: ${1:Hello world!}
		to: ${2:*}
		display_seconds: ${3:10}
		wait: ${4:no}
$0
endsnippet

snippet win_msi "Installs and uninstalls Windows MSI files"
- name:
	win_msi:
		path: ${1:# File system path to the MSI file to install}
		extra_args: ${2:# Additional arguments to pass to the msiexec.exe command}
		state: ${3:#present|absent}
		creates: ${4:# Path to a file created by installing the MSI to prevent from attempting to reinstall the package on every run}
		wait: ${5:True|#False}
$0
endsnippet

snippet win_nssm "NSSM - the Non-Sucking Service Manager"
- name:
	win_nssm:
		name: ${1:# Name of the service to operate on}
		start_mode: ${2:#auto|manual|disabled}
		state: ${3:present|#started|stopped|restarted|absent}
		app_parameters_free_form: ${4:# Single string of parameters to be passed to the service.}
		application: ${5:# The application binary to run as a service}
		stderr_file: ${6:# Path to receive error output}
		dependencies: ${7:# Service dependencies that has to be started to trigger startup, separated by comma.}
		user: ${8:# User to be used for service startup}
		password: ${9:# Password to be used for service startup}
		stdout_file: ${10:# Path to receive output}
		app_parameters: ${11:# Parameters to be passed to the application when it starts.}
$0
endsnippet

snippet win_owner "Set owner"
- name:
	win_owner:
		path: ${1:# Path to be used for changing owner}
		user: ${2:# Name to be used for changing owner}
		recurse: ${3:#False|True}
$0
endsnippet

snippet win_package "Installs/Uninstalls an installable package, either from local file system or url"
- name:
	win_package:
		path: ${1:# Location of the package to be installed (either on file system, network share or url)}
		product_id: ${2:# Product id of the installed package (used for checking if already installed)}
		name: ${3:# Name of the package, if name isn't specified the path will be used for log messages}
		user_password: ${4:# Password of an account with access to the package if it's located on a file share. Only needed if the winrm user doesn't have access to the package. Also specify user_name for this to function properly.}
		expected_return_code: ${5:0}
		state: ${6:#present|absent}
		arguments: ${7:# Any arguments the installer needs}
		user_name: ${8:# Username of an account with access to the package if it's located on a file share. Only needed if the winrm user doesn't have access to the package. Also specify user_password for this to function properly.}
$0
endsnippet

snippet win_path "Manage Windows path environment variables"
- name:
	win_path:
		elements: ${1:# A single path element, or a list of path elements (ie, directories) to add or remove.}
		scope: ${2:#machine|user}
		state: ${3:present|absent}
		name: ${4:PATH}
$0
endsnippet

snippet win_ping "A windows version of the classic ping module."
- name:
	win_ping:
		data: ${1:pong}
$0
endsnippet

snippet win_psexec "Runs commands (remotely) as another (privileged) user"
- name:
	win_psexec:
		command: ${1:# The command line to run through PsExec (limited to 260 characters).}
		username: ${2:# The (remote) user to run the command as.}
		limited: ${3:no}
		executable: ${4:psexec.exe}
		chdir: ${5:# Run the command from this (remote) directory.}
		interactive: ${6:no}
		noprofile: ${7:no}
		system: ${8:no}
		elevated: ${9:no}
		priority: ${10:background|low|belownormal|abovenormal|high|realtime}
		hostnames: ${11:# The hostnames to run the command.}
		timeout: ${12:# The connection timeout in seconds}
		password: ${13:# The password for the (remote) user to run the command as.}
		wait: ${14:yes}
$0
endsnippet

snippet win_reboot "Reboot a windows machine"
- name:
	win_reboot:
		test_command: ${1:whoami}
		connect_timeout_sec: ${2:5}
		msg: ${3:Reboot initiated by Ansible}
		pre_reboot_delay_sec: ${4:2}
		shutdown_timeout_sec: ${5:600}
		reboot_timeout_sec: ${6:600}
$0
endsnippet

snippet win_reg_stat "returns information about a Windows registry key or property of a key"
- name:
	win_reg_stat:
		path: ${1:# T}
		name: ${2:# The registry property name to get information for, the return json will not include the sub_keys and properties entries for the I(key) specified.}
$0
endsnippet

snippet win_regedit "Add, change, or remove registry keys and values"
- name:
	win_regedit:
		path: ${1:# Name of registry path.}
		state: ${2:#present|absent}
		data: ${3:# Value of the registry entry C(name) in C(path).}
		name: ${4:# Name of registry entry in C(path).}
		type: ${5:binary|dword|expandstring|multistring|#string|qword}
$0
endsnippet

snippet win_region "Set the region and format settings"
- name:
	win_region:
		unicode_language: ${1:# The unicode language format to set for all users, see U(https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx) for a list of culture names to use. This needs to be set if C(location) or C(format) is not set. After setting this value a reboot is required for it to take effect.}
		copy_settings: ${2:true|false}
		location: ${3:# The location to set for the current user, see U(https://msdn.microsoft.com/en-us/library/dd374073.aspx) for a list of GeoIDs you can use and what location it relates to. This needs to be set if C(format) or C(unicode_language) is not set.}
		format: ${4:# The language format to set for the current user, see U(https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.aspx) for a list of culture names to use. This needs to be set if C(location) or C(unicode_language) is not set.}
$0
endsnippet

snippet win_regmerge "Merges the contents of a registry file into the windows registry"
- name:
	win_regmerge:
		path: ${1:no default}
		compare_key: ${2:no default}
$0
endsnippet

snippet win_robocopy "Synchronizes the contents of two directories using Robocopy."
- name:
	win_robocopy:
		dest: ${1:# Destination file/directory to sync (Will receive contents of src).}
		src: ${2:# Source file/directory to sync.}
		recurse: ${3:True|#False}
		purge: ${4:True|#False}
		flags: ${5:# Directly supply Robocopy flags. If set, purge and recurse will be ignored.}
$0
endsnippet

snippet win_say "Text to speech module for Windows to speak messages and optionally play sounds"
- name:
	win_say:
		end_sound_path: ${1:# Full path to a C(.wav) file containing a sound to play after the text has been spoken.  Useful on conference calls to alert other speakers that ansible has finished speaking.}
		msg: ${2:none}
		start_sound_path: ${3:# Full path to a C(.wav) file containing a sound to play before the text is spoken.  Useful on conference calls to alert other speakers that ansible has something to say.}
		voice: ${4:system default voice}
		msg_file: ${5:none}
		speech_speed: ${6:0}
$0
endsnippet

snippet win_scheduled_task "Manage scheduled tasks"
- name:
	win_scheduled_task:
		name: ${1:# Name of the scheduled task}
		state: ${2:present|absent}
		executable: ${3:# Command the scheduled task should execute}
		description: ${4:# The description for the scheduled task}
		enabled: ${5:#True|False}
		days_of_week: ${6:# Days of the week to run a weekly task, not idempotent}
		frequency: ${7:once|daily|weekly}
		arguments: ${8:# Arguments to provide scheduled task action}
		time: ${9:# Time to execute scheduled task, not idempotent}
		path: ${10:\}
		user: ${11:# User to run scheduled task as}
$0
endsnippet

snippet win_service "Manages Windows services"
- name:
	win_service:
		name: ${1:# Name of the service}
		username: ${2:# The username to set the service to start as.}
		display_name: ${3:# The display name to set for the service.}
		desktop_interact: ${4:no}
		force_dependent_services: ${5:no}
		dependency_action: ${6:#set|add|remove}
		description: ${7:# The description to set for the service.}
		start_mode: ${8:auto|manual|disabled|delayed}
		state: ${9:started|stopped|restarted|absent}
		dependencies: ${10:# A list of service dependencies to set for this particular service.}
		path: ${11:# The path to the executable to set for the service.}
		password: ${12:# The password to set the service to start as.}
$0
endsnippet

snippet win_share "Manage Windows shares"
- name:
	win_share:
		name: ${1:# Share name}
		path: ${2:# Share directory}
		deny: ${3:# Specify user list that should get no access, regardless of implied access on share, separated by comma.}
		full: ${4:# Specify user list that should get full access on share, separated by comma.}
		read: ${5:# Specify user list that should get read access on share, separated by comma.}
		list: ${6:True|False}
		state: ${7:#present|absent}
		caching_mode: ${8:BranchCache|Documents|#Manual|None|Programs|Unknown}
		change: ${9:# Specify user list that should get read and write access on share, separated by comma.}
		description: ${10:# Share description}
$0
endsnippet

snippet win_shell "Execute shell commands on target hosts."
- name:
	win_shell:
		${1:free_form=# the win_shell module takes a free form command to run.  There is no parameter actually named 'free form'. See the examples!}
		creates: ${2:# a path or path filter pattern; when the referenced path exists on the target host, the task will be skipped.}
		chdir: ${3:# set the specified path as the current working directory before executing a command}
		removes: ${4:# a path or path filter pattern; when the referenced path B(does not) exist on the target host, the task will be skipped.}
		executable: ${5:# change the shell used to execute the command (eg, C(cmd)). The target shell must accept a C(/c) parameter followed by the raw command line to be executed.}
$0
endsnippet

snippet win_shortcut "Manage shortcuts on Windows"
- name:
	win_shortcut:
		dest: ${1:# Destination file for the shortcuting file.}
		windowstyle: ${2:default|maximized|minimized}
		src: ${3:# Executable or URL the shortcut points to.}
		description: ${4:# Description for the shortcut.}
		args: ${5:# Additional arguments for the executable defined in C(src).}
		directory: ${6:# Working directory for executable defined in C(src).}
		state: ${7:#present|absent}
		hotkey: ${8:# Key combination for the shortcut.}
		icon: ${9:# Icon used for the shortcut}
$0
endsnippet

snippet win_stat "returns information about a Windows file"
- name:
	win_stat:
		path: ${1:# The full path of the file/object to get the facts of; both forward and back slashes are accepted.}
		get_md5: ${2:yes}
		get_checksum: ${3:yes}
		checksum_algorithm: ${4:md5|#sha1|sha256|sha384|sha512}
$0
endsnippet

snippet win_tempfile "Creates temporary files and directories."
- name:
	win_tempfile:
		path: ${1:%TEMP%}
		state: ${2:#file|directory}
		prefix: ${3:ansible.}
		suffix: ${4:}
$0
endsnippet

snippet win_template "Templates a file out to a remote server."
- name:
	win_template:
		dest: ${1:# Location to render the template to on the remote machine.}
		src: ${2:# Path of a Jinja2 formatted template on the local server. This can be a relative or absolute path.}
$0
endsnippet

snippet win_timezone "Sets Windows machine timezone"
- name:
	win_timezone:
		timezone: ${1:# Timezone to set to.  Example Central Standard Time}
$0
endsnippet

snippet win_unzip "Unzips compressed files and archives on the Windows node"
- name:
	win_unzip:
		dest: ${1:# Destination of zip file (provide absolute path of directory). If it does not exist, the directory will be created.}
		src: ${2:# File to be unzipped (provide absolute path)}
		recurse: ${3:True|#False|True|#False}
		creates: ${4:# If this file or directory exists the specified src will not be extracted.}
		rm: ${5:True|#False|True|#False}
$0
endsnippet

snippet win_updates "Download and install Windows updates"
- name:
	win_updates:
		log_path: ${1:# If set, win_updates will append update progress to the specified file. The directory must already exist.}
		state: ${2:#installed|searched}
		category_names: ${3:[Application, Connectors, #CriticalUpdates, DefinitionUpdates, DeveloperKits, FeaturePacks, Guidance, #SecurityUpdates, ServicePacks, Tools, #UpdateRollups, Updates}
$0
endsnippet

snippet win_uri "Interacts with webservices."
- name:
	win_uri:
		url: ${1:# HTTP or HTTPS URL in the form of (http|https)://host.domain:port/path}
		body: ${2:# The body of the HTTP request/response to the web service.}
		headers: ${3:# Key Value pairs for headers. Example "Host: www.somesite.com"}
		dest: ${4:# Output the response body to a file.}
		content_type: ${5:# Sets the "Content-Type" header.}
		method: ${6:#GET|POST|PUT|HEAD|DELETE|OPTIONS|PATCH|TRACE|CONNECT|REFRESH}
		use_basic_parsing: ${7:#True|False}
$0
endsnippet

snippet win_user "Manages local Windows user accounts"
- name:
	win_user:
		name: ${1:# Name of the user to create, remove or modify.}
		update_password: ${2:#always|on_create}
		password: ${3:# Optionally set the user's password to this (plain text) value.}
		description: ${4:# Description of the user}
		groups_action: ${5:#replace|add|remove}
		password_expired: ${6:yes|no}
		state: ${7:#present|absent|query}
		groups: ${8:# Adds or removes the user from this comma-separated lis of groups, depending on the value of I(groups_action). When I(groups_action) is C(replace) and I(groups) is set to the empty string ('groups='), the user is removed from all groups.}
		account_disabled: ${9:yes|no}
		fullname: ${10:# Full name of the user}
		password_never_expires: ${11:yes|no}
		account_locked: ${12:no}
		user_cannot_change_password: ${13:yes|no}
$0
endsnippet

snippet win_webpicmd "Installs packages using Web Platform Installer command-line"
- name:
	win_webpicmd:
		name: ${1:# Name of the package to be installed}
$0
endsnippet

