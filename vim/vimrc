" Remap the leader key
let mapleader = ","

set encoding=utf-8

" Call pathogen
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

set nocompatible

set number
set ruler
syntax on

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc

" Status bar
set laststatus=2

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" NERDTree configuration
let NERDTreeIgnore=['\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

" Command-T configuration
let g:CommandTMaxHeight=20

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Mm <CR>
endfunction

" make and python use real tabs
au FileType make                                     set noexpandtab
au FileType python                                   set noexpandtab

" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

au BufRead,BufNewFile *.txt call s:setupWrapping()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Use modeline overrides
set modeline
set modelines=10

" Default color scheme
if has ('gui_running')
  set background=light
else
  let g:solarized_termcolors=16
  set background=dark
endif 
colorscheme solarized

"Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" --------------------------------
" Personal Settings
" --------------------------------

" Override backup file location
set backupdir=~/.dotfiles/vim/backup
set directory=~/.dotfiles/vim/backup

" Emulate the save on losing focus functionality that TextMate has
" (disabled)
au FocusLost * :wa

" Override text wrapping options
"set wrap
"set textwidth=79
"set formatoptions=qrn1
"set colorcolumn=85

" Indentation
set autoindent

" Remap ,v to re-select text that was just pasted
nnoremap <leader>v V`]

" Have vim automatically reload the file in the buffer if the source file changes
set autoread

" Tab completion
set wildmenu

" Insert date and time header
nmap <F5> 1Go<CR>## <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR> ##<CR>
imap <F5> <Esc>1Go<CR>## <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR> ##<CR>

" Remap the help key to the escape key (since I'll be hitting it all the time)
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Remap ; to : to save the keystroke of having to hit shift all the time
nnoremap ; :

" Map Ctrl+h,j,k,l to easily move around splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Prevent Lusty Explorer from showing error messages
set hidden

" Remap easymotion keys
let g:EasyMotion_leader_key = '\'

" Remap key for command-t
nnoremap <silent> <A-t> :CommandT<CR>

" NERDTree
let NERDChristmasTree=1  "Makes NERDTree use colors
let NERDTreeChDirMode=1  "Changes the current working directory to the one set as the root in NERDTree
let NERDTreeShowBookmarks=1    "Display the bookmarks on startup
