" .vimrc
" Author: JR Bing <jr@jrbing.com>
"
" My vimrc file.
" ------------------------------------------------------------------------------
" Structure
"
" * Initial Setup
" * Basic Options
" * Settings
" * Display
" * Utility Functions
" * Key Bindings
"   * ReMappings
"   * Functions
" * Abbreviations
" * Searching and Movement
" * Filetype Specific Settings


" Remap the leader key
let mapleader = ","

" Call pathogen
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
set nocompatible

set encoding=utf-8
set modelines=0
set autoindent
set showmode
set showcmd
set hidden
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set nonumber
set norelativenumber
set laststatus=2
set history=1000
set undofile
set undoreload=10000
set cpoptions+=J
set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set shell=/bin/zsh
set lazyredraw
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set fillchars=diff:⣿
set ttimeout
set notimeout
set nottimeout
set autowrite
set shiftround
set autoread
set title

syntax on

" Whitespace stuff
set nowrap
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set list listchars=tab:\ \ ,trail:·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase


set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit


" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" NERDTree configuration
let NERDTreeIgnore=['\.rbc$', '\~$']
"map <Leader>n :NERDTreeToggle<CR>
map <Leader>n <plug>NERDTreeTabsToggle<CR>

" Command-T configuration
let g:CommandTMaxHeight=20

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function! s:setupWrapping()
  setlocal wrap
  setlocal wm=2
  setlocal textwidth=72
  setlocal linebreak
  setlocal nolist
  nnoremap j gj
  nnoremap k gk
  vnoremap j gj
  vnoremap k gk
  nnoremap <Down> gj
  nnoremap <Up> gk
  vnoremap <Down> gj
  vnoremap <Up> gk
  inoremap <Down> <C-o>gj
  inoremap <Up> <C-o>gk
endfunction

function! s:setupMarkup()
  call s:setupWrapping()
  " Change the tab settings to work properly with Pandoc lists
  setlocal expandtab
  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal textwidth=0
  setlocal wrapmargin=0
  setlocal formatoptions+=1
  setlocal formatoptions+=n
  " Spellcheck
  " set spell
  set spelllang=en
  set spellsuggest=9 "show only 9 suggestions for misspelled words
  " Map the markdown preview to leader-p
  map <buffer> <Leader>p :Hammer <CR>
endfunction

" make and python use real tabs
au FileType make                                     set noexpandtab
au FileType python                                   set noexpandtab

" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

au BufRead,BufNewFile *.txt call s:setupWrapping()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Mapping to easily split current window
"map <Leader>| :vsp CR>

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
 map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Use modeline overrides
set modeline
set modelines=10

" Set the colorscheme to Solarized
if has ('gui_running')
" Default color scheme
  set background=dark
  let g:solarized_menu=0
  " Change the heading for the Alignmaps plugin
  let g:DrChipTopLvlMenu= "Plugin."
  " let g:solarized_contrast="low"    "default value is normal
  " let g:solarized_visibility="high"    "default value is low
else
  " let g:solarized_termcolors=16
  set background=dark
endif
colorscheme solarized

" Set backup file location
set backupdir=~/.dotfiles/vim/backup
set directory=~/.dotfiles/vim/backup

" Highlight the current line
set cursorline

" Emulate the save on losing focus functionality that TextMate has
" au FocusLost * :wa

" Indentation
set autoindent

" Remap ,v to re-select text that was just pasted
nnoremap <leader>v V`]

" Have vim automatically reload the file in the buffer if the source file changes
set autoread

" Remap the help key to the escape key (since I'll be hitting it all the time)
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Remap ; to : to save the keystroke of having to hit shift all the time
nnoremap ; :
vnoremap ; :

" Map Ctrl+h,j,k,l to easily move around splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Remap key for command-t
nnoremap <silent> <A-t> :CommandT<CR>

" NERDTree
let NERDChristmasTree=1  "Makes NERDTree use colors
let NERDTreeChDirMode=1  "Changes the current working directory to the one set as the root in NERDTree
let NERDTreeShowBookmarks=1    "Display the bookmarks on startup

" Automatically reload the vimrc file when changed
autocmd BufWritePost ~/.dotfiles/vim/vimrc source $MYVIMRC

" Set par as the paragraph formatting program to use
set formatprg=par

" Trim trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Map whitespace trim function to F5
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>

" Reassign mapping for quickbuf
let g:qb_hotkey = '<F8>'

" Settings for ruby-vim
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let ruby_operators = 1
let ruby_space_errors = 1

" Settings for xptemplates to work with supertab
" Avoid key conflict:
let g:SuperTabMappingForward = '<Plug>supertabKey'
" if nothing matched in xpt, try supertab
let g:xptemplate_fallback = '<Plug>supertabKey'
" xpt uses <Tab> as trigger key
let g:xptemplate_key = '<Tab>'
" " use <tab>/<S-tab> to navigate through pum. Optional
" let g:xptemplate_pum_tab_nav = 1
" " xpt triggers only when you typed whole name of a snippet. Optional
" let g:xptemplate_minimal_prefix = 'full'

" Status line ---------------------------------------------------------- {{{1

augroup ft_statuslinecolor
    au!

    au InsertEnter * hi StatusLine ctermfg=196 guifg=#FF3145
    au InsertLeave * hi StatusLine ctermfg=130 guifg=#CD5907
augroup END

set statusline=%f    " Path.
set statusline+=%m   " Modified flag.
set statusline+=%r   " Readonly flag.
set statusline+=%w   " Preview window flag.

set statusline+=\    " Space.

set statusline+=%#redbar#                " Highlight the following as a warning.
"set statusline+=%{SyntasticStatuslineFlag()} " Syntastic errors.
set statusline+=%*                           " Reset highlighting.

set statusline+=%=   " Right align.

" File format, encoding and type.  Ex: "(unix/utf-8/python)"
set statusline+=(
set statusline+=%{&ff}                        " Format (unix/DOS).
set statusline+=/
set statusline+=%{strlen(&fenc)?&fenc:&enc}   " Encoding (utf-8).
set statusline+=/
set statusline+=%{&ft}                        " Type (python).
set statusline+=)

" Line and column position and counts.
set statusline+=\ (line\ %l\/%L,\ col\ %03c)

" }}}

" Visual Mode */# from Scrooloose {{{
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction

vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>
" }}}

