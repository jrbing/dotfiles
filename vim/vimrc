" vim: set sw=2 ts=2 sts=2 et
" Personal .vimrc file
" JR Bing <jr@jrbing.com>
" -------------------------------------------------------------------------
"   Much of this is borrowed heavily from Vincent Driessen, Steve Losh, Tim
"   Pope, Janus, and the rest of the internet
" -------------------------------------------------------------------------
" Environment functions {{{1

  silent function! g:OSX()
    return has('macunix')
  endfunction
  silent function! g:LINUX()
    return has('unix') && !has('macunix') && !has('win32unix')
  endfunction
  silent function! g:WINDOWS()
    return  (has('win16') || has('win32') || has('win64'))
  endfunction
  silent function! g:MACVIM()
    return has('gui_macvim')
  endfunction
  silent function! g:VIMR()
    return has('gui_vimr')
  endfunction

" }}}

" Plugins {{{1

  set nocompatible
  filetype off

  call plug#begin('~/.vim/plugged')

  " Utilities
  Plug 'artnez/vim-wipeout'
  Plug 'c0r73x/vimdir.vim'
  Plug 'gabesoft/vim-ags'
  Plug 'gcmt/wildfire.vim'
  Plug 'godlygeek/tabular'
  Plug 'justinmk/vim-sneak'
  Plug 'kana/vim-metarw'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'majutsushi/tagbar'
  Plug 'mattn/webapi-vim'
  Plug 'mtth/scratch.vim'
  Plug 'rizzatti/dash.vim'
  Plug 'scrooloose/nerdcommenter'
  Plug 'tpope/vim-bundler'
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-dotenv'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-git'
  Plug 'tpope/vim-jdaddy'
  Plug 'tpope/vim-markdown'
  Plug 'tpope/vim-obsession'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-rake'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-rbenv'
  Plug 'tpope/vim-rsi'
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'vim-scripts/Align'

  " Colorschemes
  Plug 'altercation/vim-colors-solarized'
  Plug 'chriskempson/base16-vim'
  Plug 'morhetz/gruvbox'
  Plug 'MarioRicalde/vim-lucius'

  " Filetypes
  Plug 'vim-ruby/vim-ruby'
  Plug 'davidoc/taskpaper.vim'
  Plug 'kchmck/vim-coffee-script'
  Plug 'pangloss/vim-javascript'
  Plug 'vim-scripts/plsql.vim-syntax'
  Plug 'stephpy/vim-yaml'
  Plug 'chase/vim-ansible-yaml'
  Plug 'rust-lang/rust.vim'
  "Plug 'juvenn/mustache.vim'
  "Plug 'cespare/vim-toml'
  "Plug 'PProvost/vim-ps1'

  if OSX()
    Plug 'Chiel92/vim-autoformat'
    Plug 'SQLUtilities'
    Plug 'vim-scripts/vim-dbext'
    Plug 'scrooloose/syntastic'
    Plug 'terryma/vim-multiple-cursors'
    Plug 'vim-scripts/VOoM'
    Plug 'bling/vim-airline'
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    Plug 'fatih/vim-go'
    Plug 'zimbatm/direnv.vim'
    Plug 'jpalardy/vim-slime'
    "Plug 'vim-scripts/YankRing.vim'
    if !VIMR()
      Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }
    endif
  endif

  " Only load Nerdtree if we're not using VimR
  if !VIMR()
    Plug 'scrooloose/nerdtree'
    Plug 'jistr/vim-nerdtree-tabs'
    Plug 'EvanDotPro/nerdtree-chmod'
    Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'low-ghost/nerdtree-fugitive'
  endif

  call plug#end()

  filetype plugin indent on
  let g:mapleader = ','
  let g:maplocalleader = '_'

" }}}

" Editing Behavior {{{1

  set encoding=utf-8
  set autoindent
  set showmode
  set showcmd
  set hidden
  set visualbell
  set cursorline
  set ttyfast
  set ruler
  set backspace=indent,eol,start
  set number
  set laststatus=2
  set history=1000
  set cpoptions+=J
  set list
  set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:·
  set shell=/bin/bash
  set lazyredraw
  set matchtime=3
  set showbreak=↪
  set splitbelow
  set splitright
  set fillchars=diff:⣿
  set ttimeout
  set notimeout
  set nottimeout
  set autowrite
  set shiftround
  set autoread
  set title
  set mouse=a
  set mousehide

  syntax on

  set synmaxcol=800                               " Don't try to highlight lines longer than 800 characters.
  set shortmess+=filmnrxoOtT                      " Abbrev. of messages (avoids 'hit enter')
  set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility

  set iskeyword-=.                    " '.' is an end of word designator
  set iskeyword-=#                    " '#' is an end of word designator
  set iskeyword-=-                    " '-' is an end of word designator

  " Set backup file location
  set backupdir=$HOME/.vim/tmp/backup// " backups
  set directory=$HOME/.vim/tmp/swap//   " swap files
  set backup                            " enable backups

  set wildmenu
  set wildmode=list:longest

  set wildignore+=.hg,.git,.svn                    " version control
  set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
  set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
  set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
  set wildignore+=*.spl                            " compiled spelling word lists
  set wildignore+=*.sw?                            " Vim swap files
  set wildignore+=*.DS_Store                       " OSX temp files

  " Use modeline overrides
  set modeline
  set modelines=10

  " Emulate the save on losing focus functionality that TextMate has
  " au FocusLost * :wa

  " Set par as the paragraph formatting program to use
  set formatprg=par

  " Set folding method, but disable by default
  set foldmethod=syntax
  set nofoldenable

" }}}

" Whitespace {{{2

  set nowrap
  set expandtab
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set textwidth=80

" }}}

" Version specific {{{2

  if v:version >= 730
    set norelativenumber
    set undofile
    set undoreload=10000
    set undodir=$HOME/.vim/tmp/undo//     " undo files
    set colorcolumn=+1
  endif

" }}}


" Visual mode {{{2

  function! s:VSetSearch()
    let temp = @@
    norm! gvy
    let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
    let @@ = temp
  endfunction

  vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
  vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>

" }}}

" Display {{{1

  " Colorscheme
  set background=dark
  "let g:solarized_visibility = "normal"
  "let g:solarized_contrast = "normal"
  "colorscheme solarized
  "colorscheme base16-eighties
  colorscheme gruvbox

  " Highlight the current line
  set cursorline

  " Set the tab label to equal the file name
  set guitablabel=%t

  " Change the menu name for the Align plugin
  let g:DrChipTopLvlMenu="Plugin."

" }}}

" Search {{{1

  " Use sane regexes.
  nnoremap / /\v
  vnoremap / /\v

  set ignorecase
  set smartcase
  set incsearch
  set showmatch
  set hlsearch
  set gdefault

  set scrolloff=3
  set sidescroll=1
  set sidescrolloff=10

  set virtualedit+=block

  nnoremap <leader><space> :noh<cr>:call clearmatches()<cr>

  " Keep search matches in the middle of the window and pulse the line when moving
  " to them.
  nnoremap n nzzzv:call PulseCursorLine()<cr>
  nnoremap N Nzzzv:call PulseCursorLine()<cr>

" }}}

" Mappings {{{1

  " Bubble single lines
  nmap <C-Up> [e
  nmap <C-Down> ]e

  " Bubble multiple lines
  vmap <C-Up> [egv
  vmap <C-Down> ]egv

  " Remap help to escape
  inoremap <F1> <ESC>
  nnoremap <F1> <ESC>
  vnoremap <F1> <ESC>

  " Remap ; to :
  nnoremap ; :
  vnoremap ; :

  " Visual shifting (does not exit Visual mode)
  vnoremap < <gv
  vnoremap > >gv

  " Map Ctrl+h,j,k,l to easily move around splits
  nnoremap <C-J> <C-W>j<C-W>_
  nnoremap <C-K> <C-W>k<C-W>_
  nnoremap <C-L> <C-W>l<C-W>_
  nnoremap <C-H> <C-W>h<C-W>_

  " Opens an edit command with the path of the currently edited file filled in
  " normal mode: <Leader>e
  map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

  " Opens a tab edit command with the path of the currently edited file filled in
  " Normal mode: <Leader>t
  map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

  " Command mode: Ctrl+P
  cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

  " Remap ,v to re-select text that was just pasted
  nnoremap <leader>v V`]

  " Whitespace trim function
  nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>

  " Bring up the CtrlP buffer window
  nmap <leader>b :CtrlPBuffer<CR>

  " Adjust viewports to the same size
  map <Leader>= <C-w>=
  imap <Leader>= <Esc> <C-w>=

  " Map Ctrl+Tab and Ctrl+Shift+Tab to switch tabs
  nnoremap <silent> <C-Tab> :call<sid>CycleTabpages(1)<cr>
  nnoremap <silent> <C-S-Tab> :call<sid>CycleTabpages(0)<cr>

  " Align text
  nnoremap <leader>Al :left<cr>
  nnoremap <leader>Ac :center<cr>
  nnoremap <leader>Ar :right<cr>
  vnoremap <leader>Al :left<cr>
  vnoremap <leader>Ac :center<cr>
  vnoremap <leader>Ar :right<cr>

  " Use ,gf to go to file in a vertical split
  nnoremap ,gf :vertical botright wincmd f<CR>

  " Autoformat the current buffer
  nnoremap <leader>af :Autoformat<CR><CR>

  " Sudo to write
  cmap w!! w !sudo tee % >/dev/null

  " Yank from the cursor to the end of the line, to be consistent with C and D
  nnoremap Y y$

  " Easier horizontal scrolling
  map zl zL
  map zh zH

  " Forward clipboard contents to clipper
  nnoremap <leader>y :call system('nc localhost 8377', @0)<CR>

" }}}

" Filetype autocommands {{{1

  augroup filetype_handling
    au!
    au InsertEnter * hi StatusLine ctermfg=196 guifg=#FF3145
    au InsertLeave * hi StatusLine ctermfg=130 guifg=#CD5907
  augroup END

  " Make and Python
  au FileType make    setlocal noexpandtab
  au FileType python  setlocal softtabstop=4 tabstop=4 shiftwidth=4 smarttab expandtab autoindent
  autocmd BufWritePre *.py normal m`:%s/\s\+$//e``
  autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
  autocmd FileType python let b:dispatch = 'python %'

  " JSON
  "au BufNewFile,BufRead *.json set ft=javascript

  " Ruby
  augroup ft_ruby
    au!
    au BufRead,BufNewFile {Gemfile,Vagrantfile,Rakefile,Thorfile,Procfile,config.ru,*.rake,*.cap} setlocal ft=ruby
  augroup END
  autocmd FileType ruby let b:dispatch = '~/.rbenv/shims/ruby %'

  " Markdown
  augroup ft_markdown
    au!
    au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()
  augroup END

  " Textfiles
  augroup ft_txt
    au!
    au BufRead,BufNewFile *.{txt} call s:setupWrapping()
  augroup END

  " Datamover
  augroup ft_datamover
    au!
    au BufRead,BufNewFile *.{dms} setlocal ft=sql
  augroup END

  " Gradle
  augroup ft_gradle
    au!
    au BufRead,BufNewFile *.{gradle} setlocal ft=groovy
  augroup END

  " TaskPaper
  augroup ft_taskpaper
    au!
    au BufRead,BufNewFile *.{taskpaper} setlocal autoread nolist textwidth=0 wrapmargin=0
  augroup END

  " Coffeescript
  autocmd BufNewFile,BufReadPost *.{coffee} setlocal shiftwidth=2 expandtab

  " C Style Indentation
  augroup ft_cstyle
    au!
    au BufRead,BufNewFile *.{c,h,cpp} call s:cStyleIndent()
  augroup END

  " Go
  augroup ft_golang
    au!
    au BufRead,BufNewFile *.go call s:golangIndent()
    "au FileType go nmap <leader>s <Plug>(go-implements)
    "au FileType go nmap <leader>i <Plug>(go-info)
    "au FileType go nmap <leader>gd <Plug>(go-doc)
    "au FileType go nmap <leader>gv <Plug>(go-doc-vertical)
    "au FileType go nmap <leader>gb <Plug>(go-doc-browser)
    "au FileType go nmap <leader>r <Plug>(go-run)
    "au FileType go nmap <leader>b <Plug>(go-build)
    "au FileType go nmap <leader>t <Plug>(go-test)
    "au FileType go nmap <leader>c <Plug>(go-coverage)
    "au FileType go nmap <leader>ds <Plug>(go-def-split)
    "au FileType go nmap <leader>dv <Plug>(go-def-vertical)
    "au FileType go nmap <leader>dt <Plug>(go-def-tab)
    "au FileType go nmap <leader>e <Plug>(go-rename)
  augroup END

  " Ansible
  augroup ft_ansible
    au FileType ansible    setlocal textwidth=0 wrapmargin=0
  augroup END

" }}}

" Plugin configuration/mapping {{{1
"
  " vim-slime {{{2
    let g:slime_target = "tmux"
    "let g:slime_default_config = {"socket_name": "default", "target_pane": "1"}
  "}}}

  " vim-sneak {{{2
    let g:sneak#streak = 1
  "}}}

  " Wildfire {{{2
  let g:wildfire_objects = {
    \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
    \ "html,xml" : ["at"],
    \ }
  "}}}

  " Coffeescript {{{2
    let coffee_compile_vert = 1
    let coffee_watch_vert = 1
  "}}}

  " Airline {{{2
    let g:airline_powerline_fonts = 1
  "}}}

  " Ruby-vim {{{2
    let g:rubycomplete_buffer_loading = 1
    let g:rubycomplete_classes_in_global = 1
    let ruby_operators = 1
    let ruby_space_errors = 1
  "}}}

  " CtrlP {{{2
    noremap <silent> <A-t> :CtrlP<CR>
  "}}}

  " NERDTree {{{2
    map <Leader>n <plug>NERDTreeTabsToggle<CR>
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
    let NERDChristmasTree=1           "Makes NERDTree use colors
    let NERDTreeChDirMode=1           "Changes the current working directory to the one set as the root in NERDTree
    let NERDTreeShowBookmarks=1       "Display the bookmarks on startup
    let NERDTreeMinimalUI=1           "Minimal UI elements
    let NERDTreeDirArrows=1           "Use arrows for directory folding
  "}}}

  " NERDTree Tabs {{{2
    let g:nerdtree_tabs_smart_startup_focus = 1
    let g:nerdtree_tabs_open_on_gui_startup = 1
    let g:nerdtree_tabs_open_on_console_startup = 1
    let g:nerdtree_tabs_meaningful_tab_names = 1
  "}}}

  " Tagbar {{{2
    nnoremap <silent> <F8> :TagbarToggle<CR>

    let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
          \ 'p:package',
          \ 'i:imports:1',
          \ 'c:constants',
          \ 'v:variables',
          \ 't:types',
          \ 'n:interfaces',
          \ 'w:fields',
          \ 'e:embedded',
          \ 'm:methods',
          \ 'r:constructor',
          \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
          \ 't' : 'ctype',
          \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
          \ 'ctype' : 't',
          \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : '/opt/go/bin/gotags',
      \ 'ctagsargs' : '-sort -silent'
    \ }

  "}}}

  " Syntastic {{{2
    let g:syntastic_enable_signs = 1
    let g:syntastic_disabled_filetypes = ['html']
    let g:syntastic_stl_format = '[%E{Error 1/%e: line %fe}%B{, }%W{Warning 1/%w: line %fw}]'
    let g:syntastic_ruby_exec = '~/.rbenv/shims/ruby'
    let g:syntastic_java_maven_executable = '/usr/local/bin/mvn'
    let g:syntastic_java_javac_config_file_enabled = 1
    let g:syntastic_vim_checkers = ['vint']

    "set statusline+=%#warningmsg#
    "set statusline+=%{SyntasticStatuslineFlag()}
    "set statusline+=%*

    "let g:syntastic_always_populate_loc_list = 1
    "let g:syntastic_auto_loc_list = 1
    "let g:syntastic_check_on_open = 1
    "let g:syntastic_check_on_wq = 0
  "}}}

  " Fugitive {{{2
    augroup ft_fugitive
      au!
      au BufNewFile,BufRead .git/index setlocal nolist
    augroup END
    "nnoremap <leader>gd :Gdiff<cr>
    "nnoremap <leader>gs :Gstatus<cr>
    "nnoremap <leader>gw :Gwrite<cr>
    "nnoremap <leader>gb :Gblame<cr>
    "nnoremap <leader>gco :Gcheckout<cr>
    "nnoremap <leader>gci :Gcommit<cr>
    "nnoremap <leader>gm :Gmove<cr>
    "nnoremap <leader>gr :Gremove<cr>
    "nnoremap <leader>gl :Shell git gl -18<cr>:wincmd \|<cr>
  "}}}

  " TaskPaper {{{2
    let g:task_paper_date_format = "%Y-%m-%dT%H:%M:%S%z"
  "}}}

  " SQLUtilities {{{2
    let g:sqlutil_align_comma = 1
    let g:sqlutil_keyword_case = '\L'
    "let g:sqlutil_load_default_maps = 0
    "vnoremap <leader>sf        <Plug>SQLU_Formatter<CR>
    "nnoremap <leader>scl       <Plug>SQLU_CreateColumnList<CR>
    "nnoremap <leader>scd       <Plug>SQLU_GetColumnDef<CR>
    "nnoremap <leader>scdt      <Plug>SQLU_GetColumnDataType<CR>
    "nnoremap <leader>scp       <Plug>SQLU_CreateProcedure<CR>
  "}}}

  " DBExt {{{2
    let g:dbext_default_history_file = "$HOME/.vim/tmp/swap/dbext_sql_history.txt"
    let g:dbext_default_variable_def_regex = '\(\w\|'."'".'\)\@<!?\(\w\|'."'".'\)\@<!,\zs\(@\|:\a\)\w\+\>'
  "}}}

  " vim-go {{{2
    if OSX()
      let g:go_bin_path = "/opt/go/bin"
      let g:go_fmt_command = "/opt/go/bin/goimports"
      "let g:go_play_open_browser = 0
      "let g:go_fmt_fail_silently = 1
      "let g:go_fmt_autosave = 0
      "let g:go_highlight_functions = 1
      "let g:go_highlight_methods = 1
      "let g:go_highlight_structs = 1
    endif
  "}}}

  " YouCompleteMe / Ultisnips {{{2
    let g:acp_enableAtStartup = 0

    " Enable completion from tags
    let g:ycm_collect_identifiers_from_tags_files = 1

    " Remap Ultisnips for compatibility for YCM
    let g:UltiSnipsExpandTrigger = '<C-j>'
    let g:UltiSnipsJumpForwardTrigger = '<C-j>'
    let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

    " Set snippets search path
    let g:UltiSnipsSnippetDirectories=["UltiSnips", "custom/snippets"]

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
    autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

    set completeopt-=preview
  " }}}

  " AutoFormat {{{2
   nnoremap <F4> :Autoformat<CR><CR>

    if executable('yapf')
      let g:formatprg_cs = "yapf"
      let g:formatprg_args_cs = "--style pep8"
    endif
  "}}}

" }}}

" Utility Functions {{{1

  " Remember last location in file
  if has("autocmd")
    au! BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal g'\"" | endif
  endif

  function! s:golangIndent()
    setlocal tabstop=4
    setlocal shiftwidth=4
    setlocal softtabstop=4
    setlocal expandtab
    setlocal autoindent
    setlocal nolist
    setlocal smarttab
  endfunction

  function! s:cStyleIndent()
    setlocal expandtab
    setlocal tabstop=4
    setlocal shiftwidth=4
    setlocal softtabstop=4
  endfunction

  function! s:setupWrapping()
    setlocal wrap
    setlocal wm=2
    setlocal textwidth=80
    setlocal linebreak
    setlocal nolist
    nnoremap j gj
    nnoremap k gk
    vnoremap j gj
    vnoremap k gk
    nnoremap <Down> gj
    nnoremap <Up> gk
    vnoremap <Down> gj
    vnoremap <Up> gk
    inoremap <Down> <C-o>gj
    inoremap <Up> <C-o>gk
  endfunction

  function! s:setupMarkup()
    call s:setupWrapping()
    setlocal expandtab
    setlocal tabstop=4
    setlocal shiftwidth=4
    setlocal softtabstop=4
    setlocal textwidth=0
    setlocal wrapmargin=0
    setlocal formatoptions+=1
    setlocal formatoptions+=n
    set spelllang=en
    set spellsuggest=9 "show only 9 suggestions for misspelled words
  endfunction

  func! <sid>CycleTabpages(forw)
    if a:forw
      normal! gt
    else
      normal! gT
    endif
    while 1
      redraw
      echo "Cycle Tab pages (Shift-Tab/Tab)"
      let c = s:Getchar()
      if c == "\t"
        normal! gt
      elseif c == "\<S-Tab>"
        normal! gT
      else
        exe "norm! :\<C-U>"
        call feedkeys(c)
        break
      endif
    endwhile
  endfunc

  func! s:Getchar()
    let c = getchar()
    if c != 0
      let c = nr2char(c)
    endif
    return c
  endfunc

  " Kernel formatting function modified from https://github.com/vivien/vim-addon-linux-coding-style
  function! SetKernelFormatting()
    " Whitespace
    setlocal tabstop=8
    setlocal shiftwidth=8
    setlocal softtabstop=8
    setlocal textwidth=80
    setlocal noexpandtab

    " Indention
    setlocal cindent
    setlocal formatoptions=tcqlron
    setlocal cinoptions=:0,l1,t0,g0,(0

    " Keywords
    syn keyword cOperator likely unlikely
    syn keyword cType u8 u16 u32 u64 s8 s16 s32 s64

    " Highlighting
    highlight default link LinuxError ErrorMsg
    syn match LinuxError / \+\ze\t/     " spaces before tab
    syn match LinuxError /\s\+$/        " trailing whitespaces
    syn match LinuxError /\%81v.\+/     " virtual column 81 and more
  endfunction

  command! SetKernelFormatting :call SetKernelFormatting()

  " Trim trailing whitespace
  function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
  endfunction

  " Utility functions to create file commands
  function! s:CommandCabbr(abbreviation, expansion)
    execute 'cabbrev ' . a:abbreviation . ' <c-r>=getcmdpos() == 1 && getcmdtype() == ":" ? "' . a:expansion . '" : "' . a:abbreviation . '"<CR>'
  endfunction

  function! s:FileCommand(name, ...)
    if exists("a:1")
      let funcname = a:1
    else
      let funcname = a:name
    endif
    execute 'command -nargs=1 -complete=file ' . a:name . ' :call ' . funcname . '(<f-args>)'
  endfunction

  function! s:DefineCommand(name, destination)
    call s:FileCommand(a:destination)
    call s:CommandCabbr(a:name, a:destination)
  endfunction

  " Public NERDTree-aware versions of builtin functions
  function! ChangeDirectory(dir, ...)
    execute "cd " . a:dir
    let stay = exists("a:1") ? a:1 : 1

    NERDTree

    if !stay
      wincmd p
    endif
  endfunction

  function! Touch(file)
    execute "!touch " . a:file
    call s:UpdateNERDTree()
  endfunction

  function! Remove(file)
    let current_path = expand("%")
    let removed_path = fnamemodify(a:file, ":p")

    if (current_path == removed_path) && (getbufvar("%", "&modified"))
      echo "You are trying to remove the file you are editing. Please close the buffer first."
    else
      execute "!rm " . a:file
    endif

    call s:UpdateNERDTree()
  endfunction

  function! Mkdir(file)
    execute "!mkdir " . a:file
    call s:UpdateNERDTree()
  endfunction

  function! Edit(file)
    if exists("b:NERDTreeRoot")
      wincmd p
    endif

    execute "e " . a:file

ruby << RUBY
  destination = File.expand_path(VIM.evaluate(%{system("dirname " . a:file)}))
  pwd         = File.expand_path(Dir.pwd)
  home        = pwd == File.expand_path("~")

  if home || Regexp.new("^" + Regexp.escape(pwd)) !~ destination
    VIM.command(%{call ChangeDirectory(system("dirname " . a:file), 0)})
  end
RUBY

  endfunction

  " Define the NERDTree-aware aliases
  call s:DefineCommand("cd", "ChangeDirectory")
  call s:DefineCommand("touch", "Touch")
  call s:DefineCommand("rm", "Remove")
  call s:DefineCommand("e", "Edit")
  call s:DefineCommand("mkdir", "Mkdir")

  " Pulse
  function! PulseCursorLine()
    let current_window = winnr()

    windo set nocursorline
    execute current_window . 'wincmd w'

    setlocal cursorline

    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    hi CursorLine guibg=#2a2a2a ctermbg=233
    redraw
    sleep 20m

    hi CursorLine guibg=#333333 ctermbg=235
    redraw
    sleep 20m

    hi CursorLine guibg=#3a3a3a ctermbg=237
    redraw
    sleep 20m

    hi CursorLine guibg=#444444 ctermbg=239
    redraw
    sleep 20m

    hi CursorLine guibg=#3a3a3a ctermbg=237
    redraw
    sleep 20m

    hi CursorLine guibg=#333333 ctermbg=235
    redraw
    sleep 20m

    hi CursorLine guibg=#2a2a2a ctermbg=233
    redraw
    sleep 20m

    execute 'hi ' . old_hi

    windo set cursorline
    execute current_window . 'wincmd w'

  endfunction

  "Toggle Verbose Mode
  function! ToggleVerbose()
    if !&verbose
        set verbosefile=~/.log/vim/verbose.log
        "set verbose=15
        set verbose=8
    else
        set verbose=0
        set verbosefile=
    endif
  endfunction

  command! ToggleVerbose :call ToggleVerbose()

" }}}

" Platform Specific Settings {{{1

  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif

  "Gruvbox italic fix
  if !has("gui_running")
    let g:gruvbox_italic=0
  endif

  if has ('gui_running')

    " Remove all the UI cruft
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R

    " Highlighting for spelling
    highlight SpellBad term=underline gui=undercurl guisp=Orange

    " Use a line-drawing char for pretty vertical splits.
    set fillchars+=vert:│

    " Macvim specific settings
    if OSX()

      " Set Colorscheme
      let g:solarized_visibility = "normal"
      let g:solarized_contrast = "normal"
      colorscheme solarized
      "colorscheme base16-eighties

      " Fullscreen takes up entire screen
      set fuoptions=maxhorz,maxvert

      " Set correct path for tagbar plugin
      let g:tagbar_ctags_bin = '/usr/local/bin/ctags'

      " Make the window slightly transparent
      "set transparency=4

      " Command-T for CtrlP
      map <D-T> :CtrlP<CR>
      imap <D-T> <Esc>:CtrlP<CR>

      " Command-Shift-F for the silver searcher
      map <D-F> :Ags<space>

      " Map Command-# to switch tabs
      map  <D-0> 0gt
      imap <D-0> <Esc>0gt
      map  <D-1> 1gt
      imap <D-1> <Esc>1gt
      map  <D-2> 2gt
      imap <D-2> <Esc>2gt
      map  <D-3> 3gt
      imap <D-3> <Esc>3gt
      map  <D-4> 4gt
      imap <D-4> <Esc>4gt
      map  <D-5> 5gt
      imap <D-5> <Esc>5gt
      map  <D-6> 6gt
      imap <D-6> <Esc>6gt
      map  <D-7> 7gt
      imap <D-7> <Esc>7gt
      map  <D-8> 8gt
      imap <D-8> <Esc>8gt
      map  <D-9> 9gt
      imap <D-9> <Esc>9gt

      " Map Command+Shift+P to preview the document in Marked
      nnoremap <D-P> :silent !open -a 'Marked 2.app' '%:p'<cr>

      " Create a pdf using pandoc and open it
      function! CreatePDF()
        "execute 'silent ! pandoc -o /tmp/%:t:r.pdf --latex-engine=xelatex --template=$HOME/.pandoc/custom/document.latex "%"'
        execute '! pandoc -o /tmp/%:t:r.pdf --latex-engine=xelatex --template=$HOME/.pandoc/custom/document.latex "%"'
        execute 'silent ! open /tmp/%:t:r.pdf'
      endfunction

      command! CreatePDF :call CreatePDF()

      " Set the font
      "set guifont=Meslo\ LG\ M\ DZ:h12.00
      "set guifont=Inconsolata:h14.00
      "set guifont=Inconsolata-dz:h12.00
      "set guifont=Sauce\ Code\ Powerline\ Light:h13
      "set guifont=Inconsolata\ XL:h12,Inconsolata:h12,Monaco:h12
      set guifont=Inconsolata-dz\ for\ Powerline:h12

      " Set history file for YankRing
      let g:yankring_history_dir = "$HOME/.vim/tmp/swap"

      " Insert date and time header at the top of the file
      nmap <D-D> gg}o## <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR> ##<CR>
      imap <D-D> <Esc>gg}o## <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR> ##<CR>

    " Windows Specific Settings
    elseif WINDOWS()

      " Set Colorscheme
      colorscheme gruvbox

      " Set the font
      set guifont=Consolas:h10

      " Change the location of the viminfo file
      set viminfo+=n$USERPROFILE\\_viminfo

      " Change the location of the bookmarks file
      let NERDTreeBookmarksFile=expand("$USERPROFILE/NERDTreeBookmarks")

      " Map Alt-# to switch tabs
      map  <A-0> 0gt
      imap <A-0> <Esc>0gt
      map  <A-1> 1gt
      imap <A-1> <Esc>1gt
      map  <A-2> 2gt
      imap <A-2> <Esc>2gt
      map  <A-3> 3gt
      imap <A-3> <Esc>3gt
      map  <A-4> 4gt
      imap <A-4> <Esc>4gt
      map  <A-5> 5gt
      imap <A-5> <Esc>5gt
      map  <A-6> 6gt
      imap <A-6> <Esc>6gt
      map  <A-7> 7gt
      imap <A-7> <Esc>7gt
      map  <A-8> 8gt
      imap <A-8> <Esc>8gt
      map  <A-9> 9gt
      imap <A-9> <Esc>9gt

      " Show the tab line
      set stal=1

      "Alt Shift-f to run Ack
      nmap <A-F> :Ack<space>

      " Set size and position
      set lines=50
      set columns=135
      winpos 0 0

      " Prevent vim from writing backups, due to issues with the home directory
      " being on a network share
      set nobackup
      set nowritebackup
      set noswapfile

      " Hides the menu
      set winaltkeys=no

      " Have vim use Windows Ctrl+ keys
      source $VIMRUNTIME/mswin.vim

      " Set history file for YankRing
      let g:yankring_history_file = '$HOME/vimfiles/tmp/swap/yankring.history'

      " Map Alt-Shift-P to run markdown to pdf against the current document and
      " open the resulting document
      function! CreatePDF()
        execute 'silent ! markdown2pdf "%" -o \%TMP\%\/%:t:r:s,$,.pdf,'
        execute 'silent ! \%TMP\%\/%:t:r:s,$,.pdf,'
      endfunction

      command! CreatePDF :call CreatePDF()

      nmap <silent> <A-P> :call CreatePDF()<CR>

      " Generate rtf and open in default viewer
      function! CreateRTF()
        execute 'silent ! pandoc  -f markdown -t rtf -s -o \%TEMP\%\/%:t:r:s,$,.rtf, "%"'
        execute 'silent ! \%TEMP\%\/%:t:r:s,$,.rtf,'
      endfunction

      command! CreateRTF :call CreateRTF()

      nmap <silent> <A-R> :call CreateRTF()<CR>

      " Insert date and time header at the top of the file
      nmap <A-D> 1Go<CR>## <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR> ##<CR>
      imap <A-D> <Esc>1Go<CR>## <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR> ##<CR>

    endif

  endif

" }}}

" Miscellaneous {{{1

  " When encrypting any file, use the much stronger blowfish algorithm
  "set cryptmethod=blowfish

  " Disable additional files that are generated when working with an encrypted file
  "autocmd BufReadPost * if &key != "" | set noswapfile nowritebackup viminfo= nobackup noshelltemp history=0 secure | endif

  " Automatically reload the vimrc file when changed
  "autocmd BufWritePost ~/.dotfiles/vim/vimrc source $MYVIMRC

  if !exists("autocommands_loaded")
    let autocommands_loaded = 1
  endif

  " Include vim configuration specific to a machine
  if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
  endif

" }}}

