#!/usr/bin/env bash
#===============================================================================
# vim: softtabstop=4 shiftwidth=4 expandtab fenc=utf-8 spelllang=en
#===============================================================================
#
#          FILE: <%= @script_name %>.sh
#
#   DESCRIPTION:
#
#===============================================================================

set -e                          # Exit immediately on error
set -o nounset                  # Treat unset variables as an error

# Check if root
if [[ $(whoami) != root ]]; then
  printf " Must be root to use. \n"
  exit
fi

function usage() {
cat <<'EOT'
Call this script with...
EOT
exit 0;
}

# Exit if there are no arguments
[[ $# -eq 0 ]] && usage
set -- `getopt -n$0 -u -a --longoptions "help dogs: cats:" "hd:c:" "$@"`

# $# is the number of arguments
while [[ $# -gt 0 ]]
do
  case "$1" in
    -d|--dogs) dogs="$2"; shift;;
    -c|--cats) cats="$2"; shift;;
    -h|--help) usage;;
    --) shift;break;;
    *) break;;
  esac
  shift
done

function cleanup_before_exit () {
  # this code is run before exit
  echo -e "Running cleanup code and exiting"
}

# Trap catches the exit signal and runs the specified function
trap cleanup_before_exit EXIT

# OK now do stuff
printf "$cats and $dogs living together, mass hysteria!\n"

# Required program(s)
req_progs=(prog1 prog2)
for p in "${req_progs[@]}"; do
  hash "$p" 2>&- || \
  { echo >&2 " Required program \"$p\" not installed."; exit 1; }
done

# Display usage if no parameters given
if [[ -z "$@" ]]; then
  echo " ${0##*/} <input> - description"
  exit
fi
