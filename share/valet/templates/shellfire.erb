#!/usr/bin/env sh

_program()
{
  core_usesIn <%= @project_name %>
  core_dependency_requires '*' mkdir
  <%= @project_name %>()
  {
    mkdir -m 0755 -p "$<%= @project_name %>_outputPath"
    core_variable_array_iterate <%= @project_name %>_jsonGearBoxFiles <%= @project_name %>_convertJsonFileToXml
  }
}

_program_name='<%= @project_name %>'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='<%= @project_name %>'

_program_commandLine_parseInitialise()
{
  <%= @project_name %>_outputPath_default="$(pwd)"
}

_program_commandLine_helpMessage()
{
  _program_commandLine_helpMessage_usage="[OPTION]... -- [JSON GEAR BOX FILE]..."
  _program_commandLine_helpMessage_description="Turns JSON into XML."
  _program_commandLine_helpMessage_options="
  -s, --output-path PATH      PATH to output to.
                              Defaults to current working directory:-
                              $<%= @project_name %>_outputPath_default"
    _program_commandLine_helpMessage_optionsSpacing='     '
  _program_commandLine_helpMessage_configurationKeys="
  swaddle_outputPath     Equivalent to --output-path
"
  _program_commandLine_helpMessage_examples="
  ${_program_name} -o /some/path -- some-json-gear-box-file.json
"
}

_program_commandLine_optionExists()
{
  case "$optionName" in

    o|output-path)
      echo 'yes-argumented'
    ;;

    f|force)
      echo 'yes-argumentless'
    ;;

    *)
      echo 'no'
    ;;

  esac
}

_program_commandLine_processOptionWithoutArgument()
{
  case "$optionName" in

    f|force)
      <%= @project_name %>_force='yes'
    ;;

  esac
}

_program_commandLine_processOptionWithArgument()
{
  case "$optionName" in

    o|output-path)
      core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
      <%= @project_name %>_outputPath="$optionValue"
    ;;

  esac
}

_program_commandLine_handleNonOptions()
{
  core_variable_array_initialise <%= @project_name %>_jsonGearBoxFiles

  local jsonGearBoxFile
  for jsonGearBoxFile in "$@"
  do
    core_variable_array_append <%= @project_name %>_jsonGearBoxFiles "$jsonGearBoxFile"
  done

  if core_variable_array_isEmpty <%= @project_name %>_jsonGearBoxFiles; then
    core_exitError $core_commandLine_exitCode_USAGE "You haven't specified any JSON gear box files - are you sure this is what you wanted?"
  fi
}

_program_commandLine_validate()
{
  if core_variable_isSet <%= @project_name %>_outputPath; then
    core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_CONFIG 'configuration setting' '<%= @project_name %>_outputPath' "$<%= @project_name %>_outputPath"
  else
    core_message INFO "Defaulting --output-path to current working directory"
    <%= @project_name %>_outputPath="$<%= @project_name %>_outputPath_default"
  fi

  if core_variable_isSet <%= @project_name %>_force; then
    core_validate_isBoolean $core_commandLine_exitCode_CONFIG 'configuration setting' '<%= @project_name %>_force' "$<%= @project_name %>_force"
  else
    <%= @project_name %>_force='no'
  fi
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
