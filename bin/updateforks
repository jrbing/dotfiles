#!/usr/bin/env bash
# shellcheck disable=2155
#===============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 spelllang=en ft=sh
#===============================================================================
#
#   FILE: updateforks
#
#   DESCRIPTION: Fetch all forked repos from a users github account and update
#                the master branch from the upstream
#
#   NOTE:  Taken from https://github.com/jfrazelle/dotfiles/blob/master/bin/updateforks
#          and modified to satisfy my neurosis
#
#===============================================================================

set -e          # Exit immediately on error
set -u          # Treat unset variables as an error
set -o pipefail # Prevent errors in a pipeline from being masked
IFS=$'\n\t'     # Set the internal field separator to a tab and newline

if [[ -z "$GITHUB_USERNAME" ]]; then
  echo "Set the GITHUB_USERNAME env variable."
  exit 1
fi

URI=https://api.github.com
#API_VERSION=v3

DEFAULT_PER_PAGE=100

#ignore_repos=()

function echoinfo() {
  local GC="\033[1;32m"
  local EC="\033[0m"
  printf "${GC} â˜†  INFO${EC}: %s\n" "$@";
}

function update_fork(){
  local forked_repo=$1
  local upstream_repo=$2
  local tmpdir=$(mktemp -d)

  #if [[ " ${ignore_repos[@]} " =~ " ${repo} " ]]; then
    #return
  #fi

  echoinfo "Updating Fork: ${forked_repo} -> Upstream: ${upstream_repo}"

  (
  set -x
  git clone --depth 1 "git@github.com:${forked_repo}.git" "$tmpdir"
  cd "$tmpdir"
  git remote add upstream "git@github.com:${upstream_repo}.git"
  # just in case
  git remote set-url --push upstream no_push
  # fetch the remotes and prune
  git remote -v update -p
  git rebase upstream/master
  git push origin master
  echoinfo "Updated local ${forked_repo} to origin/master"
  )

  # cleanup
  rm -rf "$tmpdir"
}

main(){
  # send the request
  local response=$(curl -sSL "${URI}/users/${GITHUB_USERNAME}/repos?per_page=${DEFAULT_PER_PAGE}")
  local repos=$(echo $response | jq --raw-output '.[] | {fullname:.full_name,repo:.name,fork:.fork,id:.id} | @base64')

  for r in $repos; do
    raw="$(echo $r | base64 --decode)"
    local id=$(echo $raw | jq --raw-output '.id')
    local fullname=$(echo $raw | jq --raw-output '.fullname')
    local repo=$(echo $raw | jq --raw-output '.repo')
    local fork=$(echo $raw | jq --raw-output '.fork')

    if [[ "$fork" == "true" ]]; then
      local response=$(curl -sSL "${URI}/repos/${fullname}")
      local upstream_user=$(echo $response | jq --raw-output '.parent.owner.login')
      update_fork "${fullname}" "${upstream_user}/${repo}"
    fi
  done
}

main
