#!/usr/bin/env bash
#===============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 spelllang=en ft=sh
#===============================================================================
#
#          FILE: targz
#
#         USAGE: ./targz
#
#   DESCRIPTION:
#
#===============================================================================

#set -e          # Exit immediately on error
set -u          # Treat unset variables as an error
set -o pipefail # Prevent errors in a pipeline from being masked
IFS=$'\n\t'     # Set the internal field separator to a tab and newline

# Source bash functions
source "$DOTFILES/share/lib/bash-functions.sh"

readonly PROGNAME="$(basename $0)"
readonly ARGS=( "$@" )

###############
#  Functions  #
###############

function usage() {
	cat <<- EOF
	usage: $PROGNAME [options] file

	Create a .tar.gz archive using zopfli, pigz, or gzip

	OPTIONS:
	   -v              enable verbose output
	   -x              enable debug output
	   -h              show this help

	Examples:
	   Run:
	   $PROGNAME -v example.txt

	EOF
}

function archive_and_compress() {
  local tmpFile="${@%/}.tar"
  echodebug "tmpFile: ${tmpFile}"

  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1
  #tar -cf "${@}" | pipebench > "${tmpFile}" || return 1

  local size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null  # GNU `stat`
  )
  echodebug "size: ${size}"

  local cmd=""
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi
  echodebug "cmd: ${cmd}"

  echoinfo "Compressing .tar using ${cmd}"
  "${cmd}" -v "${tmpFile}" || return 1

  echodebug "Deleting ${tmpFile}"
  [[ -f "${tmpFile}" ]] && rm "${tmpFile}"

  echoinfo "${tmpFile}.gz created successfully."
}

##########
#  Main  #
##########

main() {

  while getopts "hvx" opt; do
    case $opt in
      h)
        usage
        exit 0
        ;;
      v)
        readonly VERBOSE=true
        shift $(($OPTIND - 1))
        ;;
      x)
        readonly DEBUG=true
        shift $(($OPTIND - 1))
        ;;
    esac
  done


  if [[ $# -eq 0 ]]; then
    echoerror "Filename must be specified"
    usage
    exit 1
  else
    archive_and_compress "$@"
  fi

}

main "${ARGS[@]}"
