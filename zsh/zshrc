#
# Executes commands at the start of an interactive session.
#

# Source prezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Source bd
if [[ -s "${DOTFILES}/zsh/bd/bd.zsh" ]]; then
  source "${DOTFILES}/zsh/bd/bd.zsh"
fi

# Source k
if [[ -s "${DOTFILES}/zsh/k/k.sh" ]]; then
  source "${DOTFILES}/zsh/k/k.sh"
fi

#
# Completion
#
_azure_complete() {
  compadd -- $(azure --compzsh --compgen "${CURRENT}" "${words[CURRENT-1]}" "${BUFFER}")
}
compdef _azure_complete azure

[[ -f ~/.travis/travis.sh ]] && source ~/.travis/travis.sh

#
# ZSH Options
#

# Don't ask before executing rm * or rm path/*
setopt rmstarsilent

# 10 second wait before doing something that will delete everything
#setopt RM_STAR_WAIT

#
# Development
#
#alias server="open http://localhost:8000 && python -m SimpleHTTPServer"
alias server="open http://localhost:4567 && ruby -e '"'require "rack"; Rack::Handler::Thin.run(Rack::Directory.new("."), :Port => 4567)'"'" # Start a webserver in the local directory
alias todos="ack --nogroup '(TODO|FIX(ME)?):'"                                                                                              # List TODO/FIX lines from the current project
alias rpi_ip="arp -a | grep b8:27:eb | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'"
alias java_ls='/usr/libexec/java_home -V 2>&1 | grep -E "\d.\d.\d_\d\d" | cut -d , -f 1 | colrm 1 4 | grep -v Home'
alias mux="tmuxinator"

function java_use() {
  export JAVA_HOME=$(/usr/libexec/java_home -v $1)
  export PATH=$JAVA_HOME/bin:$PATH
  path=("${JAVA_HOME}/bin" $path)
  export PATH
  java -version
}

# direnv
if hash direnv 2>/dev/null; then
  eval "$(direnv hook zsh)"
fi

#
# Database
#

# Postgres
export PSQL_EDITOR=vim

# Oracle SQLcl
export SQLPATH="${DOTFILES}/sql/oracle"
export SQLFORMATPATH="${DOTFILES}/sql/format.xml"
export NLS_LANG=AMERICAN_AMERICA.WE8ISO8859P1
if [[ -d "/opt/oracle/sqlcl" ]]; then
  path+=('/opt/oracle/sqlcl/bin')
  export PATH
fi
if [[ -d "/opt/oracle/tns" ]]; then
  export TNS_ADMIN=/opt/oracle/tns
fi

# Rundeck CLI
if [[ -d "/opt/rundeck" ]]; then
  #TODO: dynamically get the name of the jar file
  alias rd='java -jar /opt/rundeck/rundeck-cli-1.0.0-all.jar'
fi

# SQLPlus
alias sqlplus="DYLD_LIBRARY_PATH=/opt/oracle/client/lib /usr/local/bin/rlwrap -iIp red -f ~/.dotfiles/sql/sqlplus_completions -H ~/.sqlplus_history -s 30000 /opt/oracle/client/bin/sqlplus"

#
# Miscellaneous aliases
#

unalias rm
unalias gb

alias lt='ls -lAht && echo "------ OLDEST ------"'
alias ltr='ls -lAhtr && echo "------ NEWEST ------"'
alias clip="nc localhost 8377"                                  # Used for piping output to clipper
alias purge-dsstore="find . -name '*.DS_Store' -type f -delete"
alias z='fasd_cd -d'
alias flush-dns="sudo killall -HUP mDNSResponder"
alias ans=ansible
alias apb=ansible-playbook
alias agx=ansible-galaxy
alias anv=ansible-vault
alias m="${DOTFILES}/share/m-cli/m"
alias mvim="reattach-to-user-namespace mvim"                    # Fix for macOS Sierra
#alias flush-dns="sudo discoveryutil udnsflushcaches"


#
# Functions
#

# Generate a random password
function randpw() {
  #openssl rand -base64 16
  openssl rand -base64 16 |md5 |head -c16;echo
}

# Make a temporary directory and enter it
function tmpd() {
  if [[ $# -eq 0 ]]; then
    local dir=$(mktemp -d) && cd $dir
  else
    local dir=$(mktemp -d -t $1.XXXXXXXXXX) && cd $dir
  fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for
# compression
function targz() {
  local tmpFile="${@%/}.tar"
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null  # GNU `stat`
  )

  local cmd=""
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi

  echo "Compressing .tar using \`${cmd}\`â€¦"
  "${cmd}" -v "${tmpFile}" || return 1
  [[ -f "${tmpFile}" ]] && rm "${tmpFile}"
  echo "${tmpFile}.gz created successfully."
}

# `tre` is a shorthand for `tree` with hidden files and color enabled,
# ignoring the `.git` directory, listing directories first. The output
# gets piped into `less` with options to preserve color and line
# numbers, unless the output is small enough for one screen.
function tre() {
  tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# Codi
# Usage: codi [filetype] [filename]
function codi() {
  vim $2 -c \
    "let g:startify_disable_at_vimenter = 1 |\
    set bt=nofile ls=0 noru nonu nornu |\
    hi ColorColumn ctermbg=NONE |\
    hi VertSplit ctermbg=NONE |\
    hi NonText ctermfg=0 |\
    Codi ${1:-python}"
}
