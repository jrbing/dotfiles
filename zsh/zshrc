#
# Executes commands at the start of an interactive session.
#

#
# ZSH Options
#

# Don't ask before executing rm * or rm path/*
setopt rmstarsilent

# 10 second wait before doing something that will delete everything
#setopt RM_STAR_WAIT

#
# Source 3rd party modules
#

# Prezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# bd
if [[ -s "${DOTFILES}/zsh/bd/bd.zsh" ]]; then
  source "${DOTFILES}/zsh/bd/bd.zsh"
fi

# k
if [[ -s "${DOTFILES}/zsh/k/k.sh" ]]; then
  source "${DOTFILES}/zsh/k/k.sh"
fi

# asdf
if [[ -s "${DOTFILES}/share/asdf/asdf.sh" ]]; then
  source "${DOTFILES}/share/asdf/asdf.sh"
fi

# kube-ps1
if [[ -s "${DOTFILES}/share/kube-ps1/kube-ps1.sh" ]]; then
  source "${DOTFILES}/share/kube-ps1/kube-ps1.sh"
fi

# direnv
if hash direnv 2>/dev/null; then
  eval "$(direnv hook zsh)"
fi


#
# Application and module settings
#

# kube-ps1
if type "oc" > /dev/null; then
  KUBE_PS1_BINARY=oc
fi
KUBE_PS1_NS_ENABLE=true
KUBE_PS1_PREFIX=""
KUBE_PS1_SEPARATOR=""
KUBE_PS1_DIVIDER=":"
KUBE_PS1_SUFFIX=" "
KUBE_PS1_CTX_COLOR=yellow
KUBE_PS1_NS_COLOR=cyan

# Set the prompt to include kube_ps1, but disable by default
PROMPT='$(kube_ps1)'$PROMPT
KUBE_PS1_TOGGLE=off

# Postgres
PSQL_EDITOR=vim

# Oracle SQLcl
SQLPATH="${DOTFILES}/sql/oracle"
SQLFORMATPATH="${DOTFILES}/sql/format.xml"
NLS_LANG=AMERICAN_AMERICA.WE8ISO8859P1

if [[ -d "/opt/oracle/sqlcl" ]]; then
  path+=('/opt/oracle/sqlcl/bin')
fi

if [[ -d "/opt/oracle/tns" ]]; then
  TNS_ADMIN=/opt/oracle/tns
fi

# Rundeck CLI
if [[ -d "/opt/rundeck" ]]; then
  #TODO: dynamically get the name of the jar file
  alias rd='java -jar /opt/rundeck/rundeck-cli-*-all.jar'
fi


#
# Aliases
#

unalias rm
unalias gb

#alias server="open http://localhost:4567 && ruby -e '"'require "rack"; Rack::Handler::Thin.run(Rack::Directory.new("."), :Port => 4567)'"'" # Start a webserver in the local directory
#alias server="open http://localhost:8000 && python -m SimpleHTTPServer"
alias server="devd -ol ."
alias todos="ack --nogroup '(TODO|FIX(ME)?):'"
alias rpi_ip="arp -a | grep b8:27:eb | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'"
alias java_ls='/usr/libexec/java_home -V 2>&1 | grep -E "\d.\d.\d_\d\d" | cut -d , -f 1 | colrm 1 4 | grep -v Home'
alias mux="tmuxinator"
alias lt='ls -lAht && echo "------ OLDEST ------"'
alias ltr='ls -lAhtr && echo "------ NEWEST ------"'
alias clip="nc localhost 8377"
alias purge-dsstore="find . -name '*.DS_Store' -type f -delete"
alias z='fasd_cd -d'
alias flush-dns="sudo killall -HUP mDNSResponder"
alias ans=ansible
alias apb=ansible-playbook
alias agx=ansible-galaxy
alias anv=ansible-vault
alias mvim="reattach-to-user-namespace mvim"
alias hellogopher="curl -O https://raw.githubusercontent.com/cloudflare/hellogopher/master/Makefile"
#alias flush-dns="sudo discoveryutil udnsflushcaches"
alias sqlplus="DYLD_LIBRARY_PATH=/opt/oracle/client /usr/local/bin/rlwrap -iIp red -f ~/.dotfiles/sql/sqlplus_completions -H ~/.sqlplus_history -s 30000 /opt/oracle/client/sqlplus"

#
# Functions
#

# Switch the current java version
function java_use() {
  export JAVA_HOME=$(/usr/libexec/java_home -v $1)
  export PATH=$JAVA_HOME/bin:$PATH
  path=("${JAVA_HOME}/bin" $path)
  export PATH
  java -version
}

# Generate a random password
function randpw() {
  openssl rand -base64 16 | md5 | head -c16; echo
}

# Make a temporary directory and enter it
function tmpd() {
  if [[ $# -eq 0 ]]; then
    local dir=$(mktemp -d) && cd $dir
  else
    local dir=$(mktemp -d -t $1.XXXXXXXXXX) && cd $dir
  fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled,
# ignoring the `.git` directory, listing directories first. The output
# gets piped into `less` with options to preserve color and line
# numbers, unless the output is small enough for one screen.
function tre() {
  tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# Codi
# Usage: codi [filetype] [filename]
#function codi() {
  #vim $2 -c \
    #"let g:startify_disable_at_vimenter = 1 |\
    #set bt=nofile ls=0 noru nonu nornu |\
    #hi ColorColumn ctermbg=NONE |\
    #hi VertSplit ctermbg=NONE |\
    #hi NonText ctermfg=0 |\
    #Codi ${1:-python}"
#}

#
# Completion
#

# Azure CLI
_azure_complete() {
  compadd -- $(azure --compzsh --compgen "${CURRENT}" "${words[CURRENT-1]}" "${BUFFER}")
}
compdef _azure_complete azure

# TravisCI
[[ -f ~/.travis/travis.sh ]] && source ~/.travis/travis.sh

# asdf
if [[ -s "${DOTFILES}/share/asdf/completions/asdf.bash" ]]; then
  source "${DOTFILES}/share/asdf/completions/asdf.bash"
fi

# OpenShift
if type "oc" > /dev/null; then
  source <(oc completion zsh)
fi
