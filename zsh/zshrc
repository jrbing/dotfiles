#
# Executes commands at the start of an interactive session.
#

# Uncomment this and the 'zprof' call at the bottom of the
# file to get startup times
#zmodload zsh/zprof

###########
#  ZPLUG  #
###########

export ZPLUG_HOME="${DOTFILES}/zsh/zplug"
export ZPLUG_LOADFILE="${DOTFILES}/zsh/packages.zsh"
source $ZPLUG_HOME/init.zsh

# Install plugins if there are plugins that have not been installed
#if ! zplug check --verbose; then
  #printf "Install? [y/N]: "
  #if read -q; then
    #echo; zplug install
  #fi
#fi

# Source plugins and add commands to $PATH
zplug load


###########
#  fpath  #
###########

# Prepend custom function directory to fpath
fpath=("${DOTFILES}/zsh/functions" $fpath)

##########
#  Misc  #
##########

# direnv
if [[ $commands[direnv] ]]; then
  eval "$(direnv hook zsh)"
fi

# mise
if [[ $commands[mise] ]]; then
  eval "$(mise activate zsh)"
fi

# asdf version manager
#if [[ $commands[asdf] ]]; then
  ## prepend shims to path
  #path=("${HOME}/.asdf/shims" $path)
  ## prepend completions to fpath
  #fpath=("${HOME}/.asdf/completions" $fpath)
  ## initialise completions with ZSH's compinit
  #autoload -Uz compinit && compinit
#fi


#################
#  ZSH Options  #
#################

# Don't ask before executing rm * or rm path/*
setopt rmstarsilent

##########################
#  Application Settings  #
##########################

# Postgres
export PSQL_EDITOR=vim

# Oracle SQLcl
export SQLPATH="${DOTFILES}/sql/oracle"
export SQLFORMATPATH="${DOTFILES}/sql/format.xml"
export NLS_LANG=American_America.UTF8

if [[ -d "/opt/oracle/sqlcl" ]]; then
  path+=('/opt/oracle/sqlcl/bin')
fi

# TNS
if [[ -d "/opt/oracle/tns" ]]; then
  export TNS_ADMIN=/opt/oracle/tns
fi

# Rundeck CLI
if [[ -d '/opt/rundeck/rd' ]]; then
  path+=('/opt/rundeck/rd/bin')
fi

# Krew plugins
if [[ -d "${HOME}/.krew/bin" ]]; then
  path+=("${HOME}/.krew/bin")
fi

# Pipx
if [[ -d "${HOME}/.local/bin" ]]; then
  path+=("${HOME}/.local/bin")
fi

# TeX
if [[ -d "/Library/TeX/texbin" ]]; then
  path+=("/Library/TeX/texbin")
fi

# Cargo
if [[ -d "${HOME}/.cargo/bin" ]]; then
  path+=("${HOME}/.cargo/bin")
fi

# Codon: python compiler - https://github.com/exaloop/codon
if [[ -d "${HOME}/.codon/bin" ]]; then
  path+=("${HOME}/.codon/bin")
fi


############
#  Prompt  #
############

# Starship
if [[ $commands[starship] ]]; then
  eval "$(starship init zsh)"
else
  SPACESHIP_PROMPT_ORDER=(
    dir           # Current directory
    char          # Prompt character
  )

  SPACESHIP_RPROMPT_ORDER=(
    exec_time     # Execution time
    jobs          # Background jobs indicator
    exit_code     # Exit code section
    git           # Git branch and git status
  )

  SPACESHIP_PROMPT_ADD_NEWLINE=false
  SPACESHIP_PROMPT_SEPARATE_LINE=false
  SPACESHIP_DIR_COLOR="blue"
  SPACESHIP_EXIT_CODE_SHOW=true
  SPACESHIP_CHAR_SUFFIX=" "
  SPACESHIP_CHAR_SYMBOL="❯❯❯"

  SPACESHIP_EXEC_TIME_PREFIX="⌛ "
  SPACESHIP_EXEC_TIME_ELAPSED=5
  SPACESHIP_KUBECONTEXT_COLOR="blue"
  SPACESHIP_GIT_PREFIX="| "
  SPACESHIP_GIT_STATUS_PREFIX=" "
  SPACESHIP_GIT_STATUS_SUFFIX=""
fi

#############
#  Aliases  #
#############

unalias rm

alias server="devd --open --livewatch ."
alias todos="ack --nogroup '(TODO|FIX(ME)?):'"
alias rpi_ip="arp -a | grep b8:27:eb | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'"
alias java_ls='/usr/libexec/java_home -V'
alias mux="tmuxinator"
alias lt='ls -lAht && echo "------ OLDEST ------"'
alias ltr='ls -lAhtr && echo "------ NEWEST ------"'
alias clip="nc localhost 8377"
alias purge-dsstore="find . -name '*.DS_Store' -type f -delete"
alias z='fasd_cd -d'
alias flush-dns="sudo killall -HUP mDNSResponder"
alias ans=ansible
alias apb=ansible-playbook
alias agx=ansible-galaxy
alias anv=ansible-vault
alias anav=ansible-navigator
alias mvim="reattach-to-user-namespace mvim"
alias sqlplus="DYLD_LIBRARY_PATH=/opt/oracle/client /usr/local/bin/rlwrap -iIp red -f ~/.dotfiles/sql/sqlplus_completions -H ~/.sqlplus_history -s 30000 /opt/oracle/client/sqlplus"
alias uuid="uuidgen | tr -d '\n' | tr '[:upper:]' '[:lower:]' | pbcopy && pbpaste && echo"
alias ytd="yt-dlp --force-overwrites"
alias dcb="docker compose down && docker compose up -d && docker compose logs -f"

alias kedit-secret="KUBE_EDITOR=kube-secret-editor kubectl edit secret"
alias kshell='kubectl run -it --rm debug --image=alpine --restart=Never -- sh'
alias keti='kubectl exec -t -i' # Drop into an interactive terminal on a container
if [[ $commands[kubecolor] ]]; then
  alias kubectl=kubecolor
fi

#if hash piknik 2>/dev/null; then
  #alias pkc='piknik -copy'
  #alias pkp='piknik -paste'
  #alias pkm='piknik -move'
  #alias pkz='piknik -copy < /dev/null'
  #alias pkpr='piknik -paste | tar xzhpvf -'
  #function pko() {
      #echo "$*" | piknik -copy
  #}
  #function pkf() {
      #piknik -copy < $1
  #}
  #function pkfr() {
      #tar czpvf - ${1:-.} | piknik -copy
  #}
#fi

# Ripgrep
if [[ $commands[rg] ]]; then
  alias grep='rg'
fi

# XCP
#if [[ $commands[xcp] ]]; then
  #alias cp='xcp'
#fi

# Travelgrunt
if [[ $commands[travelgrunt] ]]; then
  alias tg='_tg(){ travelgrunt -out-file ~/.tg-path ${@} && cd "$(cat ~/.tg-path)" }; _tg'
  alias tt='_tt(){ travelgrunt -top -out-file ~/.tg-path && cd "$(cat ~/.tg-path)" }; _tt'
fi

###############
#  Functions  #
###############

# Switch the current java version
function java_use() {
  export JAVA_HOME=$(/usr/libexec/java_home -v $1)
  java -version
}

# Generate a random password
function randpw() {
  openssl rand -base64 16 | md5 | head -c16; echo
}

# Make a temporary directory and enter it
function tmpd() {
  if [[ $# -eq 0 ]]; then
    local dir=$(mktemp -d) && cd $dir
  else
    local dir=$(mktemp -d -t $1.XXXXXXXXXX) && cd $dir
  fi
}

# Improved tree
function tre() {
  tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# Assume AWS credentials
function assume-aws-role(){
  # $1 is the role to assume from current role
  echo "Assuming role: $1"
  aws sts assume-role --role-arn $1 --role-session-name AWSCLI-Session  > /tmp/assume-role.yaml
  export AWS_ACCESS_KEY_ID=$(yq .Credentials.AccessKeyId /tmp/assume-role.yaml)
  export AWS_SECRET_ACCESS_KEY=$(yq .Credentials.SecretAccessKey /tmp/assume-role.yaml)
  export AWS_SESSION_TOKEN=$(yq .Credentials.SessionToken /tmp/assume-role.yaml)
  rm -f /tmp/assume-role.yaml
}

# Switch AWS profile
function awsctx() {
  profile=$(aws configure list-profiles | fzf)
  [[ -n "$profile" ]] && export AWS_PROFILE=${profile}
}

# Kubernetes debug pods
function kcdebug() {
  kubectl run -i --rm --tty debug --image=busybox --restart=Never -- sh
}

function kadebug() {
  kubectl run -i --rm --tty debug --image=alpine --restart=Never -- sh
}

################
#  Completion  #
################

# Enable bash completion support
autoload -U +X bashcompinit && bashcompinit

# Azure CLI
if [[ $commands[az] ]]; then
  source "${DOTFILES}/completions/az.zsh"
fi

# Kubernetes CLI
if [[ $commands[kubectl] ]]; then
  source <(kubectl completion zsh)
  compdef kubecolor=kubectl
fi

# Helm CLI
if [[ $commands[helm] ]]; then
  source <(helm completion zsh)
fi

# Terraform
if [[ $commands[terraform] ]]; then
  complete -o nospace -C /usr/local/bin/terraform terraform
fi

# NATS nsc CLI
if [[ $commands[nsc] ]]; then
  source <(nsc completion zsh)
fi

# fzf
if [[ -f ~/.fzf.zsh ]]; then
  source ~/.fzf.zsh
fi

# aws-sso-util
if [[ -e ~/.local/bin/aws-sso-util ]]; then
  eval "$(_AWS_SSO_UTIL_COMPLETE=source_zsh aws-sso-util)"
fi

# talosctl
if [[ $commands[talosctl] ]]; then
  source <(talosctl completion zsh)
fi

# Atuin: shell history - https://github.com/atuinsh/atuin
#if [[ $commands[atuin] ]]; then
  #eval "$(atuin init zsh)"
#fi


###############
#  Profiling  #
###############

#zprof
